{"remainingRequest":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Cailibuhong\\video2Graph\\video2Graph\\src\\components\\Graph\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\src\\components\\Graph\\index.vue","mtime":1691027005041},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1688115046166},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\babel-loader\\lib\\index.js","mtime":1688115046651},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1688115046166},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\vue-loader\\lib\\index.js","mtime":1688115046800}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgKiBhcyBkMyBmcm9tICdkMycNCmltcG9ydCB7IExvYWRpbmcgfSBmcm9tICdlbGVtZW50LXVpJw0KaW1wb3J0IHsgb25Nb3VudGVkLCByZWYgfSBmcm9tICd2dWUnOw0KaW1wb3J0IGZpbGVuYW1lcyBmcm9tICJAL3V0aWxzL2ZpbGVOYW1lIjsNCmltcG9ydCBkb210b2ltYWdlIGZyb20gJ2RvbS10by1pbWFnZSc7DQppbXBvcnQgVGVzdEpzb24gZnJvbSAiQC9hc3NldHMvanNvbi9jYXNlMV8xX2Zpbi5qc29uIjsNCmltcG9ydCBUZXN0UmVsSnNvbiBmcm9tICJAL2Fzc2V0cy9qc29uL2Nhc2UxX2Zpbl9yZWwuanNvbiI7DQppbXBvcnQgdG9vbHMgZnJvbSAiQC91dGlscy90b29scy5qcyI7DQppbXBvcnQgb2NyYWQgZnJvbSAiQC91dGlscy9vY3JhZC5qcyI7DQppbXBvcnQge2NyZWF0ZVdvcmtlcn0gZnJvbSAiQC91dGlscy90ZXNzZXJhY3QubWluLmpzIjsNCmltcG9ydCBUZXNzZXJhY3QgZnJvbSAnQC91dGlscy90ZXNzZXJhY3QubWluLmpzJzsNCi8vIGxldCB3b3JrZXI9IGNyZWF0ZVdvcmtlcih7DQovLyAgICAgLy8gbGFuZ1BhdGg6IkAvYXNzZXRzL2RhdGEiDQovLyAgICAgd29ya2VyUGF0aDogJy91dGkvd29ya2VyLm1pbi5qcycsDQovLyAgICAgLy8gY29yZVBhdGg6ICcuL3Rlc3NlcmFjdC1jb3JlLndhc20uanMnLA0KLy8gICAgIC8vIGxhbmdQYXRoOiAnRDovQ2FpbGlidWhvbmcvdmlkZW8yR3JhcGgvdmlkZW8yR3JhcGgvc3JjL3V0aWxzL3Rlc3NlcmFjdCcNCi8vICAgfSk7Ow0KLy8gY29uc29sZS5sb2cod29ya2VyKQ0KLy8gd29ya2VyLmxvYWQoKQ0KLy8gd29ya2VyLmxvYWRMYW5ndWFnZSgnZW5nJykNCi8vIHdvcmtlci5pbml0aWFsaXplKCdlbmcnKQ0KZXhwb3J0IGRlZmF1bHQgew0KICBwcm9wczogWyJ2aWRlb1RpbWUiXSwNCiAgZGF0YSgpIHsNCiAgICByZXR1cm4gew0KICAgICAgZGF0YTogVGVzdEpzb24sDQogICAgICBlZGl0Q29uZmlybVNob3c6ZmFsc2UsDQogICAgICBnRGF0YTogIlRlc3RKc29uIiwNCiAgICAgIHJlbERhdGE6IFRlc3RSZWxKc29uLA0KICAgICAgYXNzaXN0R1RyYW5zZm9ybVg6IDEwLA0KICAgICAgYXNzaXN0R1RyYW5zZm9ybVk6IDEwMCwNCiAgICAgIHJlY29nbml6ZVRleHQ6IiIsDQogICAgICBsb2FkTG9hZGluZzogZmFsc2UsDQogICAgICBkcmF3RW50aXR5TG9jYXRpb246IFtdLA0KICAgICAgVmlkZW9FZGl0UGFuZWxTaG93OmZhbHNlLA0KICAgICAgc2hvd0VudGl0eUxpc3Q6IFtdLA0KICAgICAgc3dpdGNoTDogW10sDQogICAgICBvdmVyRW50aXR5SWQ6ICcnLA0KICAgICAgb3ZlclRhcmdldEVudGl0eUlkOiAnJywNCiAgICAgIHNob3dFbnRpdHlSZWxJZExpc3Q6IFtdLA0KICAgICAgc2hvd0VudGl0eVJlbElkT3ZlclN0YXRlOiAnJywNCiAgICAgIHJvb3RFbnRpdHlMaXN0OiBbXSwNCiAgICAgIHJvb3RTdmc6IG51bGwsDQogICAgICBUaW1lQXhpc1N2ZzogbnVsbCwNCiAgICAgIGdyb3Vwc1N2ZzogbnVsbCwNCiAgICAgIGFyY0c6IG51bGwsDQogICAgICBjdXJFbnRJZDogJycsDQogICAgICBpbnNlcnRFbnRJZDogJycsDQogICAgICBlZGl0RGl2U2hvdzogZmFsc2UsDQogICAgICBtaW5ESW1wb3J0YW5jZTogMCwNCiAgICAgIG1heERJbXBvcnRhbmNlOiAwLA0KICAgICAgbWluRFJlbGV2YW5jZTogMCwNCiAgICAgIG1heERSZWxldmFuY2U6IDAsDQogICAgICBtYXhERHVyYXRpb246IDAsDQogICAgICB0aW1lQXhpc1g6IDAsDQogICAgICB0aW1lQXhpc1c6IDIwMCwNCiAgICAgIHRpbWVBeGlzRHJvcEZsYWc6IDAsDQogICAgICB0aW1lQXhpc0Rvd25YOiAwLA0KICAgICAgdGltZUF4aXNEb3duVzogNjAsDQogICAgICBtYXhUb3RhbER1cmF0aW9uOiAwLA0KICAgICAgdmlkZW9EdXJhdGlvbjogNjY4LA0KICAgICAgdG90YWxEdXJhdGlvbjogMTAwMCwNCiAgICAgIGltcG9ydGFuY2VDb2xvcl9saW5lYXI6IG51bGwsDQogICAgICBpbXBvcnRhbmNlQ29tcHV0ZV9jb2xvcjogbnVsbCwNCiAgICAgIHJlbGV2YW5jZVNjYWxlX2xpbmVhcjogbnVsbCwNCiAgICAgIHRvdGFsRHVyYXRpb25TY2FsZV9saW5lYXI6IG51bGwsDQogICAgICBzdW1Ub3RhbER1cmF0aW9uOiAwLA0KICAgICAgLy8gaW1wb3J0YW5jZU1pbkNvbG9yOiAicmdiKDEsIDE2NCwgMTgzKSIsDQogICAgICAvLyBpbXBvcnRhbmNlTWF4Q29sb3I6ICJyZ2IoMTA2LCA1MiwgMTI3KSIsDQogICAgICB6b29tSW5Vcmw6IHJlcXVpcmUoIkAvYXNzZXRzL2ltZy96b29tSW4ucG5nIiksDQogICAgICB6b29tT3V0VXJsOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWcvem9vbU91dC5wbmciKSwNCiAgICAgIGVkaXRUb29sVXJsOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWcvZWRpdC5wbmciKSwNCiAgICAgIHRpcFVybDogcmVxdWlyZSgiQC9hc3NldHMvaW1nL3RpcC5wbmciKSwNCiAgICAgIGVkaXRBZGRVcmw6IHJlcXVpcmUoIkAvYXNzZXRzL2ltZy9lZGl0X0FkZC5wbmciKSwNCiAgICAgIGVkaXRBZGROVXJsOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWcvZWRpdF9BZGROLnBuZyIpLA0KICAgICAgZWRpdERlbFVybDogcmVxdWlyZSgiQC9hc3NldHMvaW1nL2VkaXRfRGVsZXRlLnBuZyIpLA0KICAgICAgZWRpdENvbmZpcm1Vcmw6IHJlcXVpcmUoIkAvYXNzZXRzL2ltZy/lt7LnnIsucG5nIiksDQogICAgICBsYXlvdXRTaG93OiAyLA0KICAgICAgZ3JhcGhHVHJhbnNmb3JtSzogMSwNCiAgICAgIGdyYXBoR1RyYW5zZm9ybVg6IDEwLA0KICAgICAgZ3JhcGhHVHJhbnNmb3JtWTogMTAwLA0KICAgICAgZ3JhcGhHTW92ZVg6IDEwLA0KICAgICAgZ3JhcGhTdmdTY2FsZTogMSwNCiAgICAgIG1vdmVUaW1lcjogbnVsbCwNCiAgICAgIG1vdmVGbGFnOiBmYWxzZSwNCiAgICAgIGltcG9ydGFuY2VNaW5Db2xvcjogInJnYigyMDMsIDIzMCwgMjA5KSIsDQogICAgICBpbXBvcnRhbmNlTWF4Q29sb3I6ICJyZ2IoMjIsIDE0NCwgMjA3KSIsDQogICAgICBzdGVwWDogMTUwLA0KICAgICAgc3RlcFk6IDEwMCwNCiAgICAgIGJ0blJlbDogZmFsc2UsDQogICAgICBidG5TaW06IGZhbHNlLA0KICAgICAgYnRuQXNvOiBmYWxzZSwNCiAgICAgIGJ0bkVkaTogZmFsc2UsDQogICAgICBjaXJjbGVJbnRlcnZhbDogNTUsDQogICAgICB3aWR0aDogMCwNCiAgICAgIGhlaWdodDogMCwNCiAgICAgIGN1clRvb2xTdGF0ZTogJ3VuRWRpdCcsDQogICAgICBtYXJnaW46IHsgdG9wOiA4MCwgcmlnaHQ6IDIwLCBib3R0b206IDAsIGxlZnQ6IDIwIH0sDQogICAgICBjb2xvcjogWw0KICAgICAgICAicmdiKDI1NSw2MCw2MCkiLA0KICAgICAgICAicmdiKDAsIDE3OCwgMTcxKSIsDQogICAgICAgIC8vICJyZ2IoMjU1LDgzLDI1NSkiLA0KICAgICAgICAicmdiKDIzNSwxMzUsMTYyKSIsDQogICAgICAgICJyZ2IoMjU1LDE3OCwxMDEpIiwNCiAgICAgICAgInJnYig2MywxNTEsMTM0KSIsDQogICAgICAgICJyZ2IoODMsMjU1LDI1NSkiLA0KICAgICAgICAicmdiKDAsMTIyLDI0NCkiLA0KICAgICAgICAicmdiKDE2OCwxNjgsMjU1KSIsDQogICAgICAgICJyZ2IoMjAwLDIwMCwyMDApIiwNCiAgICAgIF0sDQogICAgICBtY29sb3I6IFsNCiAgICAgICAgInJnYigxMjUsIDY2LCAyMDYpIiwNCiAgICAgICAgInJnYigyNDgsIDEzNCwgMTI0KSIsDQogICAgICAgICJyZ2IoNTAsIDE5OCwgMTkxKSIsDQogICAgICAgICJyZ2IoMTM1LCAxMjYsIDI1MykiLA0KICAgICAgICAicmdiKDE5OCwgMTIxLCAxMjMpIiwNCiAgICAgICAgInJnYigyNTIsIDE3NywgNDkpIiwNCiAgICAgICAgInJnYigxMTIsIDIwMiwgMjI5KSIsDQogICAgICBdLA0KICAgICAgLy8gbWNvbG9yOiBbDQogICAgICAvLyAgICJyZ2IoOTEsIDEwNywgMjU1KSIsDQogICAgICAvLyAgICJyZ2IoMCwgMTc4LCAxNzEpIiwNCiAgICAgIC8vICAgLy8gInJnYig2LCAyMTQsIDE2MCkiLA0KICAgICAgLy8gICAicmdiKDI1NSwgMTIwLCA5MCkiLA0KICAgICAgLy8gICAicmdiKDEyNSwgOTgsIDIxMSkiLA0KICAgICAgLy8gICAicmdiKDI1NSwgMTEzLCAyMTIpIiwNCiAgICAgIC8vICAgInJnYigxMTIsIDIxNCwgMjU1KSIsDQogICAgICAvLyAgICJyZ2IoMjU1LCAxNTksIDI4KSIsDQogICAgICAvLyAgICJyZ2IoMjU1LCA3NywgMTA5KSIsDQogICAgICAvLyBdLA0KICAgICAgbURhcmtjb2xvcjogWw0KICAgICAgICAicmdiKDk1LCAzOSwgMTc5KSIsDQogICAgICAgICJyZ2IoMjIxLCA4MywgNzIpIiwNCiAgICAgICAgInJnYigwLCAxNTgsIDE0OCkiLA0KICAgICAgICAicmdiKDkzLCA4OCwgMjAyKSIsDQogICAgICAgICJyZ2IoMTgwLCA3MiwgNzkpIiwNCiAgICAgICAgInJnYigyMDIsIDEzNCwgMzIpIiwNCiAgICAgICAgInJnYig0NiwgMTc0LCAyMDIpIiwNCiAgICAgIF0sDQogICAgICBtTGlnbnRjb2xvcjogWw0KICAgICAgICAiI2ZmOWM5YyIsDQogICAgICAgICIjY2M4OGIwIiwNCiAgICAgICAgIiNmZmE4ZmYiLA0KICAgICAgICAiI2UzYjA5NyIsDQogICAgICAgICIjZjRjM2QwIiwNCiAgICAgICAgIiNmNGY0ZDAiLA0KICAgICAgICAiI2ZmZDhiMSIsDQogICAgICAgICIjOWVjYWMyIiwNCiAgICAgICAgIiNhOGNjZmYiLA0KICAgICAgICAiIzk3ZTNiYSIsDQogICAgICAgICIjNmY4YmUwIiwNCiAgICAgICAgInJnYigwLDEyMiwyNDQpIiwNCiAgICAgICAgIiNiNmEyZjciLA0KICAgICAgICAicmdiKDE2OCwxNjgsMjU1KSIsDQogICAgICAgICJyZ2IoMjAwLDIwMCwyMDApIiwNCiAgICAgIF0sDQogICAgICBlZGl0VmlkZW9KYWdlOmZhbHNlLA0KICAgICAgZWRpdFZpZGVvU1A6W10sDQogICAgICBlZGl0VmlkZW9FUDpbXSwNCiAgICB9Ow0KICB9LA0KDQogIHdhdGNoOiB7DQogICAgdHlwZSh2YWwpIHsNCiAgICB9LA0KICAgIHN3aXRjaEw6IHsNCiAgICAgIGRlZXA6IHRydWUsDQogICAgICBoYW5kbGVyKHZhbCkgew0KICAgICAgICB0aGlzLmJ0blJlbCA9IHZhbFswXTsNCiAgICAgICAgdGhpcy5idG5TaW0gPSB2YWxbMV07DQogICAgICAgIHRoaXMuYnRuQXNvID0gdmFsWzJdOw0KICAgICAgICB0aGlzLmJ0bkVkaSA9IHZhbFszXTsNCiAgICAgICAgdGhpcy51cGRhdGFSZWwoKQ0KICAgICAgfQ0KICAgIH0sDQogICAgcmVjb2duaXplVGV4dCh2YWwpew0KICAgICAgY29uc3QgX3RoaXMgPXRoaXM7DQogICAgICBfdGhpcy4kYnVzLiRlbWl0KCJyZWNvZ25pemVUZXh0IiwgWzEsdmFsXSk7DQogICAgfSwNCiAgICB0aW1lQXhpc1godmFsKSB7DQogICAgICBjb25zdCBfdGhpcyA9IHRoaXM7DQogICAgICBfdGhpcy51cGRhdGFUaW1lQXhpc0R1cihfdGhpcy5UaW1lQXhpc1N2ZywgX3RoaXMudGltZUF4aXNYLCBfdGhpcy50aW1lQXhpc1cpOw0KICAgIH0sDQogICAgY3VyRW50SWQodmFsKSB7DQogICAgICBjb25zdCBfdGhpcyA9IHRoaXM7DQogICAgICBfdGhpcy5vdmVyRW50aXR5SWQgPSB2YWw7DQogICAgICBjb25zb2xlLmxvZyh2YWwpDQogICAgICBfdGhpcy4kYnVzLiRlbWl0KCJzZWxlY3RFIiwgdmFsKTsNCiAgICAgIGxldCBlbnRpdHlMb2NhdGlvbkRhdGEgPSBfdGhpcy5kcmF3RW50aXR5TG9jYXRpb247DQoNCiAgICAgIGxldCByZWxEYXRhID0gX3RoaXMucmVsRGF0YTsNCiAgICAgIGxldCBzaG93SmFnZURhdGEgPSBfdGhpcy5zaG93RW50aXR5TGlzdDsNCiAgICAgIGxldCBiYXNpY1JlbCA9IHJlbERhdGFbJ2Jhc2ljUmVsJ107DQogICAgICBmb3IgKGxldCByID0gMDsgciA8IGJhc2ljUmVsLmxlbmd0aDsgcisrKSB7DQogICAgICAgIGxldCBzb3JjZUlkID0gYmFzaWNSZWxbcl1bMF07DQogICAgICAgIGxldCB0YXJnZXRJZCA9IGJhc2ljUmVsW3JdWzFdOw0KICAgICAgICBsZXQgc29yY2VKYWdlID0gc2hvd0phZ2VEYXRhLmZpbmQoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGRbJ2lkJ10gPT0gc29yY2VJZCB9KVsnc2hvdyddOw0KICAgICAgICBsZXQgdGFyZ2V0SmFnZSA9IHNob3dKYWdlRGF0YS5maW5kKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkWydpZCddID09IHRhcmdldElkIH0pWydzaG93J107DQogICAgICAgIGlmIChzb3JjZUphZ2UgJiYgdGFyZ2V0SmFnZSkgew0KICAgICAgICAgIGxldCB0cm5JZCA9ICctMSc7DQogICAgICAgICAgaWYgKHNvcmNlSWQgPT0gcGFyc2VJbnQodmFsKSkgew0KICAgICAgICAgICAgdHJuSWQgPSB0YXJnZXRJZDsNCiAgICAgICAgICB9DQogICAgICAgICAgZWxzZSBpZiAodGFyZ2V0SWQgPT0gcGFyc2VJbnQodmFsKSkgew0KICAgICAgICAgICAgdHJuSWQgPSBzb3JjZUlkOw0KICAgICAgICAgIH0NCiAgICAgICAgICBpZiAodHJuSWQgIT0gJy0xJykgew0KICAgICAgICAgICAgbGV0IGN1ckVudCA9IGVudGl0eUxvY2F0aW9uRGF0YS5maW5kKGZ1bmN0aW9uIChkKSB7IHJldHVybiBwYXJzZUludChkWydpZCddKSA9PSB0cm5JZCB9KTsNCiAgICAgICAgICAgIF90aGlzLmFzc2lzdEdUcmFuc2Zvcm1YID0gcGFyc2VJbnQoLWN1ckVudFsneCddKSArIHBhcnNlRmxvYXQoY3VyRW50WydyJ10pICsgMTUwOw0KICAgICAgICAgICAgX3RoaXMuYXNzaXN0R1RyYW5zZm9ybVkgPSBwYXJzZUludCgtY3VyRW50Wyd5J10pICsgcGFyc2VGbG9hdChjdXJFbnRbJ3InXSkgKyAzMDA7DQogICAgICAgICAgICBfdGhpcy51cGRhdGFBc3Npc3RHcmFwaFBhbmVsKCk7DQogICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgIH07DQogICAgICBsZXQgc2ltaWxhcml0eVJlbCA9IHJlbERhdGFbJ3NpbWlsYXJpdHlSZWwnXTsNCiAgICAgIGZvciAobGV0IHIgPSAwOyByIDwgc2ltaWxhcml0eVJlbC5sZW5ndGg7IHIrKykgew0KICAgICAgICBsZXQgc29yY2VJZCA9IHNpbWlsYXJpdHlSZWxbcl1bMF07DQogICAgICAgIGxldCB0YXJnZXRJZCA9IHNpbWlsYXJpdHlSZWxbcl1bMV07DQogICAgICAgIGxldCBzb3JjZUphZ2UgPSBzaG93SmFnZURhdGEuZmluZChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZFsnaWQnXSA9PSBzb3JjZUlkIH0pWydzaG93J107DQogICAgICAgIGxldCB0YXJnZXRKYWdlID0gc2hvd0phZ2VEYXRhLmZpbmQoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGRbJ2lkJ10gPT0gdGFyZ2V0SWQgfSlbJ3Nob3cnXTsNCiAgICAgICAgaWYgKHNvcmNlSmFnZSAmJiB0YXJnZXRKYWdlKSB7DQogICAgICAgICAgbGV0IHRybklkID0gJy0xJzsNCiAgICAgICAgICBpZiAoc29yY2VJZCA9PSBwYXJzZUludCh2YWwpKSB7DQogICAgICAgICAgICB0cm5JZCA9IHRhcmdldElkOw0KICAgICAgICAgIH0NCiAgICAgICAgICBlbHNlIGlmICh0YXJnZXRJZCA9PSBwYXJzZUludCh2YWwpKSB7DQogICAgICAgICAgICB0cm5JZCA9IHNvcmNlSWQ7DQogICAgICAgICAgfQ0KICAgICAgICAgIGlmICh0cm5JZCAhPSAnLTEnKSB7DQogICAgICAgICAgICBsZXQgY3VyRW50ID0gZW50aXR5TG9jYXRpb25EYXRhLmZpbmQoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIHBhcnNlSW50KGRbJ2lkJ10pID09IHRybklkIH0pOw0KICAgICAgICAgICAgX3RoaXMuYXNzaXN0R1RyYW5zZm9ybVggPSBwYXJzZUludCgtY3VyRW50Wyd4J10pICsgcGFyc2VGbG9hdChjdXJFbnRbJ3InXSkgKyAxNTA7DQogICAgICAgICAgICBfdGhpcy5hc3Npc3RHVHJhbnNmb3JtWSA9IHBhcnNlSW50KC1jdXJFbnRbJ3knXSkgKyBwYXJzZUZsb2F0KGN1ckVudFsnciddKSArIDMwMDsNCiAgICAgICAgICAgIF90aGlzLnVwZGF0YUFzc2lzdEdyYXBoUGFuZWwoKTsNCiAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgfTsNCg0KDQogICAgfSwNCiAgICBvdmVyRW50aXR5SWQodmFsKSB7DQogICAgICBjb25zdCBfdGhpcyA9IHRoaXM7DQoNCiAgICAgIF90aGlzLiRidXMuJGVtaXQoIm92ZXJFbnRpdHlJZCIsIHZhbCk7DQogICAgICBsZXQgcmVsTGlzdCA9IFtdOw0KICAgICAgbGV0IHJlbFJvb3RMaXN0ID0gW107DQogICAgICBsZXQgcmVsRGF0YSA9IF90aGlzLnJlbERhdGE7DQogICAgICBsZXQgb0RhdGEgPSBfdGhpcy5kcmF3RW50aXR5TG9jYXRpb247DQogICAgICBsZXQgYmFzaWNSZWwgPSByZWxEYXRhWydiYXNpY1JlbCddOw0KICAgICAgZDMuc2VsZWN0QWxsKCcudGltZVRleHQnKS5hdHRyKCJvcGFjaXR5IiwgMCkNCiAgICAgIGQzLnNlbGVjdEFsbCgnLnRpbWVBeGlzRW50JykuYXR0cigic3Ryb2tlLXdpZHRoIiwgMCkuYXR0cigib3BhY2l0eSIsIDAuNCkuYXR0cigic3Ryb2tlIiwgZnVuY3Rpb24gKCkgew0KICAgICAgICBsZXQgY2lkID0gZDMuc2VsZWN0KHRoaXMpLmF0dHIoImlkIikuc3BsaXQoIl8iKVsxXTsNCiAgICAgICAgbGV0IG5kID0gb0RhdGEuZmluZChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZFsnaWQnXSA9PSBjaWQgfSk7DQogICAgICAgIHJldHVybiBuZFsnY29sb3JEJ10NCiAgICAgIH0pOw0KICAgICAgZm9yIChsZXQgcmUgPSAwOyByZSA8IGJhc2ljUmVsLmxlbmd0aDsgcmUrKykgew0KDQogICAgICAgIGxldCBzb3JjZUlkID0gYmFzaWNSZWxbcmVdWzBdOw0KICAgICAgICBsZXQgdGFyZ2V0SWQgPSBiYXNpY1JlbFtyZV1bMV07DQogICAgICAgIGxldCBjTm9kZSA9ICcnOw0KICAgICAgICBpZiAoc29yY2VJZCA9PSB2YWwpIHsNCiAgICAgICAgICBjTm9kZSA9IG9EYXRhLmZpbmQoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGRbJ2lkJ10gPT0gdGFyZ2V0SWQgfSk7DQogICAgICAgICAgcmVsTGlzdC5wdXNoKHRhcmdldElkKTsNCiAgICAgICAgICByZWxSb290TGlzdC5wdXNoKGNOb2RlWydyb290SW5kZXgnXSk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAodGFyZ2V0SWQgPT0gdmFsKSB7DQogICAgICAgICAgY05vZGUgPSBvRGF0YS5maW5kKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkWydpZCddID09IHNvcmNlSWQgfSk7DQogICAgICAgICAgcmVsTGlzdC5wdXNoKHNvcmNlSWQpOw0KICAgICAgICAgIHJlbFJvb3RMaXN0LnB1c2goY05vZGVbJ3Jvb3RJbmRleCddKTsNCiAgICAgICAgfQ0KICAgICAgfTsNCiAgICAgIHJlbExpc3QuZm9yRWFjaCgoc2VsZiwgaW5keCwgYXJyKSA9PiB7DQoNCiAgICAgICAgZDMuc2VsZWN0KGAjdGltZUF4aXNFbnRfJHtzZWxmfWApLmF0dHIoInN0cm9rZSIsICd3aGl0ZScpLmF0dHIoInN0cm9rZS13aWR0aCIsIDIpLmF0dHIoIm9wYWNpdHkiLCAxKTsNCiAgICAgICAgZDMuc2VsZWN0KGAjdGltZVRleHRfJHtzZWxmfV8wYCkuYXR0cigib3BhY2l0eSIsIDEpOw0KICAgICAgfSkNCiAgICAgIGQzLnNlbGVjdChgI3RpbWVBeGlzRW50XyR7dmFsfWApLmF0dHIoInN0cm9rZS13aWR0aCIsIDIpLmF0dHIoIm9wYWNpdHkiLCAxKTsNCiAgICAgIGQzLnNlbGVjdChgI3RpbWVUZXh0XyR7dmFsfV8wYCkuYXR0cigib3BhY2l0eSIsIDEpOw0KICAgIH0sDQogICAgc2hvd0VudGl0eVJlbElkTGlzdCh2YWwpIHsNCiAgICAgIHRoaXMudXBkYXRhUmVsKCk7DQogICAgfSwNCiAgICBncm91cHNTdmc6IHsNCiAgICAgIGRlZXA6IHRydWUsDQogICAgICBoYW5kbGVyKCkgew0KICAgICAgICB0aGlzLnVwZGF0YUFzc2lzdEdyYXBoUGFuZWwoKTsNCiAgICAgIH0NCiAgICB9LA0KICAgIGdEYXRhKHZhbCkgew0KICAgIH0sDQogICAgbGF5b3V0U2hvdyh2YWwpIHsNCiAgICAgIGNvbnN0IF90aGlzID0gdGhpczsNCiAgICAgIGxldCBzaG93RW50aXR5TGlzdCA9IHRvb2xzLmRlZXBDbG9uZShfdGhpcy5kYXRhKTsNCiAgICAgIGZvciAobGV0IGUgaW4gc2hvd0VudGl0eUxpc3QpIHsNCiAgICAgICAgaWYgKHBhcnNlSW50KHNob3dFbnRpdHlMaXN0W2VdWydsYXlvdXQnXSkgPCBwYXJzZUludCh2YWwpKQ0KICAgICAgICAgIHNob3dFbnRpdHlMaXN0W2VdWydzaG93J10gPSB0cnVlOw0KICAgICAgICBlbHNlIHsNCiAgICAgICAgICBzaG93RW50aXR5TGlzdFtlXVsnc2hvdyddID0gZmFsc2U7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICAgIF90aGlzLnNob3dFbnRpdHlMaXN0ID0gc2hvd0VudGl0eUxpc3Q7DQogICAgICBfdGhpcy51cGRhdGFHcmFwaCgpOw0KICAgIH0sDQogICAgZGF0YSh2YWwpIHsNCiAgICB9LA0KICAgIHZpZGVvVGltZSh2YWwpIHsNCiAgICAgIGNvbnN0IF90aGlzID0gdGhpczsNCiAgICAgIGxldCBlbnRpdHlMb2NhdGlvbkRhdGEgPSBfdGhpcy5kcmF3RW50aXR5TG9jYXRpb247DQogICAgICBmb3IgKGxldCBlID0gMDsgZSA8IGVudGl0eUxvY2F0aW9uRGF0YS5sZW5ndGg7IGUrKykgew0KICAgICAgICBsZXQgY3VyRCA9IGVudGl0eUxvY2F0aW9uRGF0YVtlXTsNCiAgICAgICAgbGV0IHRpbWVTdGFydCA9IHRvb2xzLnRpbWUyc2Vjb25kcyhlbnRpdHlMb2NhdGlvbkRhdGFbZV1bJ3RpbWUnXVswXSk7DQogICAgICAgIGxldCB0aW1lRW5kID0gdG9vbHMudGltZTJzZWNvbmRzKGVudGl0eUxvY2F0aW9uRGF0YVtlXVsndGltZSddWzFdKTsNCiAgICAgICAgaWYgKCh2YWwgPiB0aW1lU3RhcnQpICYmICh2YWwgPCB0aW1lRW5kKSkgew0KICAgICAgICAgIGxldCBlbnRYID0gZW50aXR5TG9jYXRpb25EYXRhW2VdWyd4J107DQogICAgICAgICAgbGV0IGVudFkgPSBlbnRpdHlMb2NhdGlvbkRhdGFbZV1bJ3knXTsNCiAgICAgICAgICBsZXQgZW50UiA9IGVudGl0eUxvY2F0aW9uRGF0YVtlXVsnciddOw0KICAgICAgICAgIGxldCBtb3ZlTGluZWFyID0gZDMuc2NhbGVMaW5lYXIoW3RpbWVTdGFydCwgdGltZUVuZF0sIFtlbnRYIC0gZW50UiwgZW50WCArIGVudFJdKQ0KICAgICAgICAgIF90aGlzLmdyYXBoR1RyYW5zZm9ybVggPSAtbW92ZUxpbmVhcigodmFsKSk7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9LA0KICAgIGdyYXBoR01vdmVYKHZhbCkgew0KICAgICAgY29uc3QgX3RoaXMgPSB0aGlzOw0KICAgICAgbGV0IGRhdGEgPSBfdGhpcy5kcmF3RW50aXR5TG9jYXRpb247DQogICAgICBsZXQgc3RqZyA9IDA7DQogICAgICBsZXQgZW5qZyA9IDA7DQogICAgICBsZXQgc25vZGUgPSAnJzsNCiAgICAgIGxldCBlbm9kZSA9ICcnOw0KICAgICAgbGV0IHdpZHRoID0gMTU5MA0KICAgICAgZGF0YS5mb3JFYWNoKChzZWxmLCBpbmR4LCBhcnIpID0+IHsNCiAgICAgICAgbGV0IGVudHggPSBzZWxmWyd4J10gKiBfdGhpcy5ncmFwaEdUcmFuc2Zvcm1LOw0KICAgICAgICBsZXQgdHJhbnNmb3JtWCA9IGVudHggKyB2YWw7DQogICAgICAgIGlmICgodHJhbnNmb3JtWCA+IDApICYmICh0cmFuc2Zvcm1YIDwgd2lkdGgpKSB7DQogICAgICAgICAgc3RqZysrOw0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgIGlmICgoc3RqZyA+IDApICYmIGVuamcgPT0gMCkgew0KICAgICAgICAgICAgZW5vZGUgPSBzZWxmOw0KICAgICAgICAgICAgZW5qZyA9IDENCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgaWYgKHN0amcgPT0gMSkgew0KICAgICAgICAgIHNub2RlID0gc2VsZg0KICAgICAgICB9DQogICAgICB9KQ0KICAgICAgbGV0IGV3ID0gZW5vZGVbJ3RpbWVXJ107DQogICAgICBpZiAoc25vZGUgPT0gJycpIHsNCiAgICAgICAgX3RoaXMudGltZUF4aXNYID0gMA0KICAgICAgfQ0KICAgICAgZWxzZQ0KICAgICAgICBfdGhpcy50aW1lQXhpc1ggPSBzbm9kZVsndGltZVgnXTsNCiAgICAgIF90aGlzLnRpbWVBeGlzVyA9IGVub2RlWyd0aW1lWCddIC0gc25vZGVbJ3RpbWVYJ10gKyBlbm9kZVsndGltZVcnXQ0KICAgICAgaWYgKGV3ID09IHVuZGVmaW5lZCkgew0KICAgICAgICBfdGhpcy50aW1lQXhpc1cgPSB3aWR0aCAtIHNub2RlWyd0aW1lWCddDQogICAgICB9DQogICAgfSwNCiAgICBncmFwaEdUcmFuc2Zvcm1YKHZhbCkgew0KICAgICAgY29uc3QgX3RoaXMgPSB0aGlzOw0KICAgICAgbGV0IGdyb3VwcyA9IF90aGlzLmdyb3Vwc1N2ZzsNCiAgICAgIF90aGlzLmdyYXBoR01vdmVYID0gX3RoaXMuZ3JhcGhHVHJhbnNmb3JtWDsNCiAgICAgIGxldCBncmFwaEdUcmFuc2Zvcm1YID0gX3RoaXMuZ3JhcGhHVHJhbnNmb3JtWDsNCiAgICAgIGxldCBncmFwaEdUcmFuc2Zvcm1ZID0gX3RoaXMuZ3JhcGhHVHJhbnNmb3JtWTsNCiAgICAgIGxldCBncmFwaEdUcmFuc2Zvcm1LID0gX3RoaXMuZ3JhcGhHVHJhbnNmb3JtSzsNCiAgICAgIGdyb3Vwcy5hdHRyKCJ0cmFuc2Zvcm0iLCAidHJhbnNsYXRlKCIgKyBncmFwaEdUcmFuc2Zvcm1YICsgJywnICsgZ3JhcGhHVHJhbnNmb3JtWSArICIpIHNjYWxlKCIgKyBncmFwaEdUcmFuc2Zvcm1LICsgIikiKTsNCiAgICB9DQogIH0sDQogIG1ldGhvZHM6IHsNCiAgICBhZGROb2RlKCkgew0KICAgICAgY29uc3QgX3RoaXMgPSB0aGlzOw0KICAgICAgX3RoaXMuZWRpdENvbmZpcm1TaG93ID0gdHJ1ZSwNCiAgICAgIF90aGlzLlZpZGVvRWRpdFBhbmVsU2hvdyA9IHRydWUsDQogICAgICBfdGhpcy5lZGl0RGl2U2hvdyA9IGZhbHNlOw0KICAgICAgX3RoaXMuJGJ1cy4kZW1pdCgicmVjb2duaXplVGV4dCIsIFsxLCJQbGVhc2Ugc2VsZWN0IG9uIHRoZSB2aWRlbyJdKTsNCiAgICAgIGQzLnNlbGVjdCgiI1ZpZGVvRWRpdFBhbmVsIikuc2VsZWN0KCJzdmciKS5yZW1vdmUoKQ0KICAgICAgdmFyIHN2ZyA9IGQzLnNlbGVjdCgiI1ZpZGVvRWRpdFBhbmVsIikuYXBwZW5kKCJzdmciKQ0KICAgICAgICAuYXR0cigid2lkdGgiLCAiOTQ2IikNCiAgICAgICAgLmF0dHIoImhlaWdodCIsICI1NTMiKTsNCiAgICAgIHN2Zy5vbigibW91c2Vkb3duIixmdW5jdGlvbihkKXsNCiAgICAgICAgX3RoaXMuZWRpdFZpZGVvU1AgPSBbZC5sYXllclgsZC5sYXllclldOw0KICAgICAgICBfdGhpcy5lZGl0VmlkZW9KYWdlID0gdHJ1ZTsNCiAgICAgIH0pLm9uKCJtb3VzZW1vdmUiLGZ1bmN0aW9uKGQpew0KICAgICAgICBpZihfdGhpcy5lZGl0VmlkZW9KYWdlKXsNCiAgICAgICAgbGV0IHNQID0gX3RoaXMuZWRpdFZpZGVvU1A7DQogICAgICAgIF90aGlzLmVkaXRWaWRlb0VQID0gW2QubGF5ZXJYLGQubGF5ZXJZXTsNCiAgICAgICAgbGV0IGVQID0gIFtkLmxheWVyWCxkLmxheWVyWV07DQogICAgICAgIGxldCBlWCAgPSBzUFswXT5lUFswXT9zUFswXTplUFswXTsNCiAgICAgICAgbGV0IGVZICA9IHNQWzFdPmVQWzFdP3NQWzFdOmVQWzFdOw0KICAgICAgICBsZXQgc1ggID0gc1BbMF08ZVBbMF0/c1BbMF06ZVBbMF07DQogICAgICAgIGxldCBzWSAgPSBzUFsxXTxlUFsxXT9zUFsxXTplUFsxXTsNCiAgICAgICAgX3RoaXMuZHJhd1JlY3Qoc3ZnLHNYICwgc1ksIE1hdGguYWJzKGVYLXNYKSwgTWF0aC5hYnMoZVkgLSBzWSksIDAsMCwicmdiYSgwLDAsMCwwKSIsMSwgInJlZCIsIGB2aWRlb1JlY3RgKX0NCiAgICAgIH0pLm9uKCJtb3VzZXVwIixmdW5jdGlvbihkKXsNCiAgICAgICAgX3RoaXMuZWRpdFZpZGVvSmFnZSA9IGZhbHNlOw0KICAgICAgICANCiAgICAgICAgbGV0IHNQID0gX3RoaXMuZWRpdFZpZGVvU1A7DQogICAgICAgIGxldCBlUCA9IFtkLmxheWVyWCxkLmxheWVyWV07Ow0KDQogICAgICAgIGxldCBlWCAgPSBzUFswXT5lUFswXT9zUFswXTplUFswXTsNCiAgICAgICAgbGV0IGVZICA9IHNQWzFdPmVQWzFdP3NQWzFdOmVQWzFdOw0KICAgICAgICBsZXQgc1ggID0gc1BbMF08ZVBbMF0/c1BbMF06ZVBbMF07DQogICAgICAgIGxldCBzWSAgPSBzUFsxXTxlUFsxXT9zUFsxXTplUFsxXTsNCiAgICAgICAgDQogICAgICAgIHZhciBwbGF5ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicGxheVZpZGVvIik7ICAgLy/ojrflj5Z2aWRlb+eahERvbeiKgueCuQ0KICAgICAgICBwbGF5ZXIuc2V0QXR0cmlidXRlKCJjcm9zc09yaWdpbiIsICJhbm9ueW1vdXMiKTsgIC8v5re75Yqgc3Jvc3NPcmlnaW7lsZ7mgKfvvIzop6PlhrPot6jln5/pl67popgNCiAgICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImNhbnZhcyIpOw0KICAgICAgICANCiAgICAgICAgY2FudmFzLndpZHRoID0gcGxheWVyLmNsaWVudFdpZHRoOw0KICAgICAgICBjYW52YXMuaGVpZ2h0ID0gcGxheWVyLmNsaWVudEhlaWdodDsNCiAgICAgICAgLy8gY2FudmFzID0gY2FudmFzLmdldENvbnRleHQoIjJkIikNCiAgICAgICAgY2FudmFzLmdldENvbnRleHQoIjJkIikuZHJhd0ltYWdlKHBsYXllciAsIDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7Ly/miKoNCiAgICAgICAgY29uc3QgZGF0YSA9IGNhbnZhcy5nZXRDb250ZXh0KCIyZCIpLmdldEltYWdlRGF0YShzWCAsIHNZLGVYLXNYLCBlWS1zWSk7DQogICAgICAgIC8vIGNvbnN0IGRhdGEgPSBjYW52YXMuZ2V0Q29udGV4dCgiMmQiKS5nZXRJbWFnZURhdGEoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTsNCiAgICAgICAgdmFyIGNhbnZhc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJjYW52YXMiKTsNCiAgICAgICAgY2FudmFzcy53aWR0aCA9ZVgtc1g7DQogICAgICAgIGNhbnZhc3MuaGVpZ2h0ID0gZVktc1k7DQogICAgICAgIGNhbnZhc3MuZ2V0Q29udGV4dCgiMmQiKS5wdXRJbWFnZURhdGEoZGF0YSwgMCwwKQ0KICAgICAgICB2YXIgZGF0YVVSTCA9IGNhbnZhc3MudG9EYXRhVVJMKCJpbWFnZS9wbmciKTsgIC8v5bCG5Zu+54mH6L2s5oiQYmFzZTY05qC85byPDQogICAgICAgIHZhciBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTsNCiAgICAgICAgaW1nLnNyYyA9IGRhdGFVUkwNCiAgICAgICAgVGVzc2VyYWN0LnJlY29nbml6ZSgNCiAgICAgICAgICBjYW52YXNzLA0KICAgICAgICAgICdlbmcnLA0KICAgICAgICAgIHsgbG9nZ2VyOiBtID0+IGNvbnNvbGUubG9nKG0pIH0NCiAgICAgICAgKS50aGVuKChkKSA9PiB7DQogICAgICAgICAgY29uc29sZS5sb2coZC5kYXRhLnRleHQpOw0KICAgICAgICAgIF90aGlzLiRidXMuJGVtaXQoInJlY29nbml6ZVRleHQiLCBbMSxkLmRhdGEudGV4dF0pOw0KICAgICAgICB9KQ0KICAgICAgICANCiAgICAgICAgLy8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIlZpZGVvRWRpdFBhbmVsIikuYXBwZW5kQ2hpbGQoaW1nKTsgICAvL+aYvuekuuWcqOmhtemdouS4rQ0KICAgICAgICAvLyB2YXIgc3RyaW5nID0gb2NyYWQoY2FudmFzcyk7DQogICAgICAgIC8vIGNvbnNvbGUubG9nKHN0cmluZykNCiAgICAgICAgLy8gYWxlcnQoc3RyaW5nKTsNCiAgICAgIH0pDQogICAgfSwNCiAgICAvLyBWaWRlb0VkaXRQYW5lbFNob3codmFsKSB7DQogICAgLy8gICBjb25zdCBfdGhpcyA9IHRoaXM7DQogICAgLy8gICBpZiAodmFsKSB7DQogICAgLy8gICAgIGxldCB3aWR0aCA9IF90aGlzLiRyZWZzLlZpZGVvRWRpdFBhbmVsLm9mZnNldFdpZHRoOw0KICAgIC8vICAgICBsZXQgaGVpZ2h0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIlZpZGVvRWRpdFBhbmVsIikuY2xpZW50SGVpZ2h0Ow0KICAgIC8vICAgICBkMy5zZWxlY3QoIiNWaWRlb0VkaXRQYW5lbCIpLnNlbGVjdCgic3ZnIikucmVtb3ZlKCkNCiAgICAvLyAgICAgdmFyIHN2ZyA9IGQzLnNlbGVjdCgiI1ZpZGVvRWRpdFBhbmVsIikuYXBwZW5kKCJzdmciKQ0KICAgIC8vICAgICAgIC5hdHRyKCJ3aWR0aCIsIHdpZHRoKQ0KICAgIC8vICAgICAgIC5hdHRyKCJoZWlnaHQiLCBoZWlnaHQpOw0KICAgIC8vICAgfQ0KICAgIC8vIH0sDQogICAgYWRkTm9kZU4oKSB7DQogICAgICBjb25zdCBfdGhpcyA9IHRoaXM7DQogICAgICBfdGhpcy5lZGl0RGl2U2hvdyA9IGZhbHNlOw0KDQogICAgfSwNCiAgICBkZWxOb2RlKCkgew0KICAgICAgY29uc3QgX3RoaXMgPSB0aGlzOw0KICAgICAgX3RoaXMuZWRpdERpdlNob3cgPSBmYWxzZTsNCiAgICB9LA0KICAgIGVkaXRUb29sQ2xrKCkgew0KICAgICAgY29uc3QgX3RoaXMgPSB0aGlzOw0KICAgICAgaWYgKF90aGlzLmN1clRvb2xTdGF0ZSA9PSAnZWRpdCcpIF90aGlzLmN1clRvb2xTdGF0ZSA9ICd1bkVkaXQnOw0KICAgICAgZWxzZSBpZiAoX3RoaXMuY3VyVG9vbFN0YXRlICE9ICdlZGl0JykgX3RoaXMuY3VyVG9vbFN0YXRlID0gJ2VkaXQnOw0KICAgICAgdGhpcy4kZW1pdCgidG9vbFN0YXRlIiwgdGhpcy5jdXJUb29sU3RhdGUpOw0KICAgIH0sDQogICAgZWRpdENvbmZpcm0oKXsNCiAgICAgIGNvbnNvbGUubG9nKCJjb25maXJtIikNCiAgICAgIGNvbnN0IF90aGlzID0gdGhpczsNCiAgICAgIF90aGlzLmxvYWRMb2FkaW5nID0gdHJ1ZTsNCiAgICAgIHNldFRpbWVvdXQoKCkgPT4gew0KICAgICAgICBfdGhpcy5sb2FkTG9hZGluZyA9IGZhbHNlOw0KICAgICAgICB9LCAyMDAwKTsNCiAgICAgIF90aGlzLmVkaXREaXZTaG93ID0gZmFsc2U7DQogICAgICBfdGhpcy5lZGl0Q29uZmlybVNob3cgPSBmYWxzZTsNCiAgICAgIF90aGlzLlZpZGVvRWRpdFBhbmVsU2hvdyA9IGZhbHNlOw0KICAgICAgX3RoaXMuJGJ1cy4kZW1pdCgicmVjb2duaXplVGV4dCIsIFswLCIiXSk7DQogICAgfSwNCiAgICB1cGRhdGFSZWwoKSB7DQogICAgICBjb25zdCBfdGhpcyA9IHRoaXM7DQogICAgICBsZXQgcmVsRGF0YSA9IF90aGlzLnJlbERhdGE7DQogICAgICBsZXQgb0RhdGEgPSBfdGhpcy5kcmF3RW50aXR5TG9jYXRpb247DQogICAgICBsZXQgc2hvd0phZ2VEYXRhID0gX3RoaXMuc2hvd0VudGl0eUxpc3Q7DQogICAgICBsZXQgc2hvd1JlbCA9IF90aGlzLnNob3dFbnRpdHlSZWxJZExpc3Q7DQogICAgICBsZXQgYmFzaWNSZWwgPSByZWxEYXRhWydiYXNpY1JlbCddOw0KDQogICAgICBpZiAoX3RoaXMuYnRuUmVsKSB7DQogICAgICAgIGlmIChfdGhpcy5idG5TaW0pIHsNCiAgICAgICAgICBkMy5zZWxlY3RBbGwoJy5zaW1pbGFyaXR5UmVsJykuYXR0cignb3BhY2l0eScsIDEpOw0KICAgICAgICB9DQogICAgICAgIGVsc2UgaWYgKCFfdGhpcy5idG5TaW0pIHsNCiAgICAgICAgICBkMy5zZWxlY3RBbGwoJy5zaW1pbGFyaXR5UmVsJykuYXR0cignb3BhY2l0eScsIDApOw0KICAgICAgICB9DQogICAgICAgIGlmIChfdGhpcy5idG5Bc28pIHsNCiAgICAgICAgICBkMy5zZWxlY3RBbGwoJy5iYXNpY1JlbCcpLmF0dHIoJ29wYWNpdHknLCAxKTsNCiAgICAgICAgfQ0KICAgICAgICBlbHNlIGlmICghX3RoaXMuYnRuQXNvKSB7DQogICAgICAgICAgZDMuc2VsZWN0QWxsKCcuYmFzaWNSZWwnKS5hdHRyKCdvcGFjaXR5JywgMCk7DQogICAgICAgIH0NCiAgICAgICAgLy8gZDMuc2VsZWN0QWxsKCcuc2ltaWxhcml0eVJlbCcpLmF0dHIoJ29wYWNpdHknLCAxKTsNCiAgICAgICAgLy8gZDMuc2VsZWN0QWxsKCcuYmFzaWNSZWwnKS5hdHRyKCdvcGFjaXR5JywgMSk7DQogICAgICB9DQogICAgICBlbHNlIGlmICghX3RoaXMuYnRuUmVsKSB7DQogICAgICAgIGQzLnNlbGVjdEFsbCgnLnNpbWlsYXJpdHlSZWwnKS5hdHRyKCdvcGFjaXR5JywgMCk7DQogICAgICAgIGQzLnNlbGVjdEFsbCgnLmJhc2ljUmVsJykuYXR0cignb3BhY2l0eScsIDApOw0KICAgICAgfQ0KICAgICAgaWYgKCFfdGhpcy5idG5SZWwgfHwgIV90aGlzLmJ0bkFzbykgew0KICAgICAgICBmb3IgKGxldCByID0gMDsgciA8IGJhc2ljUmVsLmxlbmd0aDsgcisrKSB7DQogICAgICAgICAgbGV0IHNvcmNlSWQgPSBiYXNpY1JlbFtyXVswXTsNCiAgICAgICAgICBsZXQgdGFyZ2V0SWQgPSBiYXNpY1JlbFtyXVsxXTsNCiAgICAgICAgICBsZXQgaWROID0gImJhc2ljUmVsIiArIHNvcmNlSWQgKyAiXyIgKyB0YXJnZXRJZDsNCiAgICAgICAgICBpZiAoX3RoaXMub3ZlclRhcmdldEVudGl0eUlkID09ICcnKSB7DQogICAgICAgICAgICBpZiAoKHNob3dSZWwuaW5jbHVkZXMoc29yY2VJZCkpIHx8IChzaG93UmVsLmluY2x1ZGVzKHRhcmdldElkKSkpIHsNCiAgICAgICAgICAgICAgZDMuc2VsZWN0KGAjJHtpZE59YCkuYXR0cignb3BhY2l0eScsIDEpLmF0dHIoJ3N0cm9rZScsICdncmV5JykNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICBkMy5zZWxlY3QoYCMke2lkTn1gKS5hdHRyKCdvcGFjaXR5JywgMCkNCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9DQogICAgICAgICAgZWxzZSB7DQoNCiAgICAgICAgICAgIGlmICgoc2hvd1JlbC5pbmNsdWRlcyhzb3JjZUlkICsgJycpKSB8fCAoc2hvd1JlbC5pbmNsdWRlcyh0YXJnZXRJZCArICcnKSkpIHsNCiAgICAgICAgICAgICAgZDMuc2VsZWN0KGAjJHtpZE59YCkuYXR0cignb3BhY2l0eScsIDEpLmF0dHIoJ3N0cm9rZScsICdncmV5JykNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICBkMy5zZWxlY3QoYCMke2lkTn1gKS5hdHRyKCdvcGFjaXR5JywgMCkNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmICgoc2hvd1JlbC5pbmNsdWRlcyhzb3JjZUlkICsgJycpKSAmJiAodGFyZ2V0SWQgPT0gX3RoaXMub3ZlclRhcmdldEVudGl0eUlkKSkgew0KICAgICAgICAgICAgICBkMy5zZWxlY3QoYCMke2lkTn1gKS5hdHRyKCdvcGFjaXR5JywgMSkuYXR0cignc3Ryb2tlJywgJ2RhcmtzbGF0ZWJsdWUnKQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSBpZiAoKHNob3dSZWwuaW5jbHVkZXModGFyZ2V0SWQgKyAnJykpICYmIChzb3JjZUlkID09IF90aGlzLm92ZXJUYXJnZXRFbnRpdHlJZCkpIHsNCiAgICAgICAgICAgICAgZDMuc2VsZWN0KGAjJHtpZE59YCkuYXR0cignb3BhY2l0eScsIDEpLmF0dHIoJ3N0cm9rZScsICdkYXJrc2xhdGVibHVlJykNCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9DQogICAgICAgIH07DQogICAgICB9DQogICAgfSwNCiAgICBkcmF3UmVsYXRpb25zaGlwTGluZShzdmcpIHsNCiAgICAgIGNvbnN0IF90aGlzID0gdGhpczsNCiAgICAgIGxldCByZWxEYXRhID0gX3RoaXMucmVsRGF0YTsNCiAgICAgIGxldCBvRGF0YSA9IF90aGlzLmRyYXdFbnRpdHlMb2NhdGlvbjsNCiAgICAgIGxldCBzaG93SmFnZURhdGEgPSBfdGhpcy5zaG93RW50aXR5TGlzdDsNCiAgICAgIGxldCBtYXJnaW4gPSBfdGhpcy5tYXJnaW47DQogICAgICBsZXQgaGVpZ2h0ID0gc3ZnLmF0dHIoJ2hlaWdodCcpOw0KICAgICAgbGV0IGJhc2ljUmVsID0gcmVsRGF0YVsnYmFzaWNSZWwnXTsNCiAgICAgIGZvciAobGV0IHIgPSAwOyByIDwgYmFzaWNSZWwubGVuZ3RoOyByKyspIHsNCg0KICAgICAgICBsZXQgc29yY2VJZCA9IGJhc2ljUmVsW3JdWzBdOw0KICAgICAgICBsZXQgdGFyZ2V0SWQgPSBiYXNpY1JlbFtyXVsxXTsNCiAgICAgICAgbGV0IGlkTiA9ICJiYXNpY1JlbCIgKyBzb3JjZUlkICsgIl8iICsgdGFyZ2V0SWQ7DQogICAgICAgIGxldCBjbGFzc04gPSAiYmFzaWNSZWwgc291cmNlIiArIHNvcmNlSWQgKyAiIHRhcmdldCIgKyB0YXJnZXRJZDsNCiAgICAgICAgbGV0IHNvcmNlTm9kZSA9IG9EYXRhLmZpbmQoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGRbJ2lkJ10gPT0gc29yY2VJZCB9KTsNCiAgICAgICAgbGV0IHRhcmdldE5vZGUgPSBvRGF0YS5maW5kKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkWydpZCddID09IHRhcmdldElkIH0pOw0KICAgICAgICBsZXQgc29yY2VKYWdlID0gc2hvd0phZ2VEYXRhLmZpbmQoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGRbJ2lkJ10gPT0gc29yY2VJZCB9KVsnc2hvdyddOw0KICAgICAgICBsZXQgdGFyZ2V0SmFnZSA9IHNob3dKYWdlRGF0YS5maW5kKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkWydpZCddID09IHRhcmdldElkIH0pWydzaG93J107DQogICAgICAgIGlmIChzb3JjZUphZ2UgJiYgdGFyZ2V0SmFnZSkgew0KICAgICAgICAgIGlmIChzb3JjZU5vZGVbJ3gnXSA+IHRhcmdldE5vZGVbJ3gnXSkgew0KICAgICAgICAgICAgbGV0IHRwID0gc29yY2VOb2RlOw0KICAgICAgICAgICAgc29yY2VOb2RlID0gdGFyZ2V0Tm9kZTsNCiAgICAgICAgICAgIHRhcmdldE5vZGUgPSB0cDsNCiAgICAgICAgICB9DQogICAgICAgICAgY29uc3QgcGF0aCA9IGQzLnBhdGgoKTsNCg0KICAgICAgICAgIGxldCBzdGFydFggPSBzb3JjZU5vZGVbJ3gnXTsNCiAgICAgICAgICBsZXQgZW5kWCA9IHRhcmdldE5vZGVbJ3gnXTsNCiAgICAgICAgICBsZXQgbWlkWCA9IChzdGFydFggKyBlbmRYKSAvIDI7DQogICAgICAgICAgbGV0IGZsYWcgPSAoKHNvcmNlTm9kZVsnc29uRmxhZyddKSB8fCAodGFyZ2V0Tm9kZVsnc29uRmxhZyddKSk7DQogICAgICAgICAgLy8gaWYoKHRhcmdldE5vZGVbJ2lkJ10gPT0gIjQiKXx8KChzb3JjZU5vZGVbJ2lkJ109PSIxIikmJih0YXJnZXROb2RlWydpZCddPT0iNiIpKXx8KChzb3JjZU5vZGVbJ2lkJ109PSIyIikmJih0YXJnZXROb2RlWydpZCddPT0iNyIpKXx8KChzb3JjZU5vZGVbJ2lkJ109PSIzIikmJih0YXJnZXROb2RlWydpZCddPT0iOCIpKSl7DQogICAgICAgICAgLy8gICBmbGFnID0gdHJ1ZTsNCiAgICAgICAgICAvLyB9DQogICAgICAgICAgaWYgKHRhcmdldE5vZGVbJ2lkJ10gPT0gIjQiKSB7DQogICAgICAgICAgICBmbGFnID0gdHJ1ZTsNCiAgICAgICAgICB9DQogICAgICAgICAgLy8gaWYodGFyZ2V0Tm9kZVsnaWQnXSA9PSAiMzAiKXsNCiAgICAgICAgICAvLyAgIGZsYWcgPSB0cnVlOw0KICAgICAgICAgIC8vIH0NCiAgICAgICAgICBsZXQgcnNvdXJjZWludCA9IChzb3JjZU5vZGVbJ3NvbkZsYWcnXSkgPyAoNDkpIDogKDIpOw0KICAgICAgICAgIGxldCBydGFyZ2V0aW50ID0gKHRhcmdldE5vZGVbJ3NvbkZsYWcnXSkgPyAoNDkpIDogKDIpOw0KICAgICAgICAgIGxldCBzdGFydFkgPSAoZmxhZykgPyAoc29yY2VOb2RlWyd5J10gLSBzb3JjZU5vZGVbJ3InXSAtIHJzb3VyY2VpbnQpIDogKHNvcmNlTm9kZVsneSddICsgc29yY2VOb2RlWydyJ10gKyByc291cmNlaW50KTsNCiAgICAgICAgICBsZXQgZW5kWSA9IChmbGFnKSA/ICh0YXJnZXROb2RlWyd5J10gLSB0YXJnZXROb2RlWydyJ10gLSBydGFyZ2V0aW50KSA6ICh0YXJnZXROb2RlWyd5J10gKyB0YXJnZXROb2RlWydyJ10gKyBydGFyZ2V0aW50KTsNCg0KICAgICAgICAgIGxldCBjbngxID0gc3RhcnRYIC0gNTA7DQogICAgICAgICAgbGV0IGNueDIgPSBlbmRYICsgNTA7DQogICAgICAgICAgbGV0IG1pZFkgPSAoc3RhcnRZICsgZW5kWSkgLyAyOw0KICAgICAgICAgIC8vIGlmKCgoc29yY2VOb2RlWydpZCddPT0iMSIpJiYodGFyZ2V0Tm9kZVsnaWQnXT09IjYiKSl8fCgoc29yY2VOb2RlWydpZCddPT0iMiIpJiYodGFyZ2V0Tm9kZVsnaWQnXT09IjciKSl8fCgoc29yY2VOb2RlWydpZCddPT0iMyIpJiYodGFyZ2V0Tm9kZVsnaWQnXT09IjgiKSkpew0KICAgICAgICAgIC8vICAgbWlkWS09MTQwDQogICAgICAgICAgLy8gfQ0KICAgICAgICAgIGxldCBoID0gKCgoZW5kWCAtIHN0YXJ0WCkgLyA1KSA+IChwYXJzZUludChoZWlnaHQpICsgMTAwKSkgPyAocGFyc2VJbnQoaGVpZ2h0KSArIDEwMCkgOiAoKGVuZFggLSBzdGFydFgpIC8gNSk7DQogICAgICAgICAgbGV0IGNueSA9IChmbGFnKSA/IChtaWRZIC0gaCkgOiAobWlkWSArIGgpOw0KDQogICAgICAgICAgbGV0IGNueTEgPSBjbnk7DQogICAgICAgICAgbGV0IGNueTIgPSBjbnk7DQoNCiAgICAgICAgICBpZiAoKChzb3JjZU5vZGVbJ2xheW91dCddID09IDIpICYmIChjbnkgPCAwKSkgfHwgKChzb3JjZU5vZGVbJ2xheW91dCddID09IDApICYmIChjbnkgPiAwKSkpIHsNCiAgICAgICAgICAgIGNueDEgLT0gMjUwOw0KICAgICAgICAgICAgY255MSA9IGNueSAqIDEuMzsNCiAgICAgICAgICB9DQogICAgICAgICAgaWYgKCgodGFyZ2V0Tm9kZVsnbGF5b3V0J10gPT0gMikgJiYgKGNueSA8IDApKSB8fCAoKHRhcmdldE5vZGVbJ2xheW91dCddID09IDApICYmIChjbnkgPiAwKSkpIHsNCiAgICAgICAgICAgIGNueDIgKz0gMjUwOw0KICAgICAgICAgICAgY255MiA9IGNueSAqIDEuMzsNCiAgICAgICAgICB9DQogICAgICAgICAgaWYoKHNvcmNlSWQgPT0gJzE0JykmJih0YXJnZXRJZCA9PSAnNycpKXsNCiAgICAgICAgICAgIGNueSo9MS40fQ0KICAgICAgICAgIC8vIGxldCBtaWRQID0gWyhzdGFydFBbMF0rZW5kUFswXSkvMiwoc3RhcnRQWzFdKT4oZW5kUFsxXSk/KHN0YXJ0UFsxXS0xMDApOihlbmRQWzFdLTEwMCldOw0KICAgICAgICAgIHBhdGgubW92ZVRvKHN0YXJ0WCwgc3RhcnRZKTsNCiAgICAgICAgICBwYXRoLmJlemllckN1cnZlVG8obWlkWCwgY255LCBtaWRYLCBjbnksIGVuZFgsIGVuZFkpOw0KICAgICAgICAgIF90aGlzLmRyYXdUaW1lTGluZShzdmcsIHBhdGgsICJyZ2IoMjAwLDIwMCwyMDApIiwgNSwgIjksOSIsIGlkTiwgY2xhc3NOKTsNCiAgICAgICAgfQ0KDQogICAgICB9Ow0KICAgICAgbGV0IHNpbWlsYXJpdHlSZWwgPSByZWxEYXRhWydzaW1pbGFyaXR5UmVsJ107DQogICAgICAvLyBsZXQgYmFzaWNSZWwgPSByZWxEYXRhWydiYXNpY1JlbCddOw0KICAgICAgZm9yIChsZXQgciA9IDA7IHIgPCBzaW1pbGFyaXR5UmVsLmxlbmd0aDsgcisrKSB7DQoNCiAgICAgICAgbGV0IHNvcmNlSWQgPSBzaW1pbGFyaXR5UmVsW3JdWzBdOw0KICAgICAgICBsZXQgdGFyZ2V0SWQgPSBzaW1pbGFyaXR5UmVsW3JdWzFdOw0KDQogICAgICAgIGxldCBpZE4gPSAic2ltaWxhcml0eVJlbCIgKyBzb3JjZUlkICsgIl8iICsgdGFyZ2V0SWQ7DQoNCiAgICAgICAgbGV0IGNsYXNzTiA9ICJzaW1pbGFyaXR5UmVsIHNvdXJjZSIgKyBzb3JjZUlkICsgIiB0YXJnZXQiICsgdGFyZ2V0SWQ7DQogICAgICAgIGxldCBzb3JjZU5vZGUgPSBvRGF0YS5maW5kKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkWydpZCddID09IHNvcmNlSWQgfSk7DQogICAgICAgIGxldCB0YXJnZXROb2RlID0gb0RhdGEuZmluZChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZFsnaWQnXSA9PSB0YXJnZXRJZCB9KTsNCiAgICAgICAgbGV0IHNvcmNlSmFnZSA9IHNob3dKYWdlRGF0YS5maW5kKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkWydpZCddID09IHNvcmNlSWQgfSlbJ3Nob3cnXTsNCiAgICAgICAgbGV0IHRhcmdldEphZ2UgPSBzaG93SmFnZURhdGEuZmluZChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZFsnaWQnXSA9PSB0YXJnZXRJZCB9KVsnc2hvdyddOw0KICAgICAgICBpZiAoc29yY2VKYWdlICYmIHRhcmdldEphZ2UpIHsNCg0KICAgICAgICAgIGlmIChzb3JjZU5vZGVbJ3gnXSA+IHRhcmdldE5vZGVbJ3gnXSkgew0KICAgICAgICAgICAgbGV0IHRwID0gc29yY2VOb2RlOw0KICAgICAgICAgICAgc29yY2VOb2RlID0gdGFyZ2V0Tm9kZTsNCiAgICAgICAgICAgIHRhcmdldE5vZGUgPSB0cDsNCiAgICAgICAgICB9DQogICAgICAgICAgY29uc3QgcGF0aCA9IGQzLnBhdGgoKTsNCg0KICAgICAgICAgIGxldCBzdGFydFggPSBzb3JjZU5vZGVbJ3gnXSArIHNvcmNlTm9kZVsnciddIC8gMjsNCiAgICAgICAgICBsZXQgZW5kWCA9IHRhcmdldE5vZGVbJ3gnXSAtIHRhcmdldE5vZGVbJ3InXSAvIDI7DQogICAgICAgICAgbGV0IG1pZFggPSAoc3RhcnRYICsgZW5kWCkgLyAyOw0KICAgICAgICAgIGxldCBmbGFnID0gKChzb3JjZU5vZGVbJ3NvbkZsYWcnXSkgfHwgKHRhcmdldE5vZGVbJ3NvbkZsYWcnXSkpOw0KICAgICAgICAgIGxldCByc291cmNlaW50ID0gKHNvcmNlTm9kZVsnc29uRmxhZyddKSA/ICgyMCkgOiAoMik7DQogICAgICAgICAgbGV0IHJ0YXJnZXRpbnQgPSAodGFyZ2V0Tm9kZVsnc29uRmxhZyddKSA/ICgyMCkgOiAoMik7DQogICAgICAgICAgbGV0IHN0YXJ0WSA9IChmbGFnKSA/IChzb3JjZU5vZGVbJ3knXSAtIHNvcmNlTm9kZVsnciddIC0gcnNvdXJjZWludCkgOiAoc29yY2VOb2RlWyd5J10gKyBzb3JjZU5vZGVbJ3InXSArIHJzb3VyY2VpbnQpOw0KICAgICAgICAgIGxldCBlbmRZID0gKGZsYWcpID8gKHRhcmdldE5vZGVbJ3knXSAtIHRhcmdldE5vZGVbJ3InXSAtIHJ0YXJnZXRpbnQpIDogKHRhcmdldE5vZGVbJ3knXSArIHRhcmdldE5vZGVbJ3InXSArIHJ0YXJnZXRpbnQpOw0KDQogICAgICAgICAgbGV0IG1pZFkgPSAoc3RhcnRZICsgZW5kWSkgLyAyOw0KDQogICAgICAgICAgLy8gbGV0IGgxU2NhbGVfbGluZWFyID0gZDMuc2NhbGVMaW5lYXIoWzAsIF90aGlzLndpZHRoXSwgWyhzb3JjZU5vZGVbJ3knXT50YXJnZXROb2RlWyd5J10pPyhzb3JjZU5vZGVbJ3knXSoyKToodGFyZ2V0Tm9kZVsneSddKjIpLHBhcnNlSW50KGhlaWdodCldKQ0KICAgICAgICAgIGxldCBoID0gKCgoZW5kWCAtIHN0YXJ0WCkgLyAxNCkgPiAocGFyc2VJbnQoaGVpZ2h0KSAtIDEwKSkgPyAocGFyc2VJbnQoaGVpZ2h0KSAtIDEwKSA6ICgoZW5kWCAtIHN0YXJ0WCkgLyAxNCk7DQogICAgICAgICAgbGV0IGhTY2FsZV9saW5lYXIgPSBkMy5zY2FsZUxpbmVhcihbMCwgX3RoaXMud2lkdGggLyAyXSwgWzAsIChoLTgwKSAvIDMgKiAyXSkNCiAgICAgICAgICBsZXQgY255ID0gKGZsYWcpID8gKG1pZFkgLSBoU2NhbGVfbGluZWFyKGVuZFgpKSA6IChtaWRZICsgaFNjYWxlX2xpbmVhcihlbmRYKSk7DQogICAgICAgICAgLy8gaWYgKHNvcmNlTm9kZVsnaWQnXSA9PSAnNycpIHsgY255IC09IDIwIH0NCiAgICAgICAgICBpZiAoY255IDwgLTE1MCkgew0KICAgICAgICAgICAgc3RhcnRZID0gc29yY2VOb2RlWyd5J10gKyBzb3JjZU5vZGVbJ3InXSArIHJzb3VyY2VpbnQNCiAgICAgICAgICAgIGVuZFkgPSB0YXJnZXROb2RlWyd5J10gKyB0YXJnZXROb2RlWydyJ10gKyBydGFyZ2V0aW50DQogICAgICAgICAgICBjbnkgPSBoZWlnaHQgLSBjbnkgLSAzMDA7DQogICAgICAgICAgfQ0KICAgICAgICAgIGlmKHRhcmdldElkPT0iNSJ8fHNvcmNlSWQ9PSI1Iil7Y255Kz0yNTB9DQogICAgICAgICAgaWYodGFyZ2V0SWQ9PSI2Inx8c29yY2VJZD09IjYiKXtjbnkrPTE1MH0NCiAgICAgICAgICBwYXRoLm1vdmVUbyhzdGFydFgsIHN0YXJ0WSk7DQogICAgICAgICAgcGF0aC5saW5lVG8oc3RhcnRYLCBjbnkpOw0KICAgICAgICAgIHBhdGgubGluZVRvKGVuZFgsIGNueSk7DQogICAgICAgICAgcGF0aC5saW5lVG8oZW5kWCwgZW5kWSk7DQogICAgICAgICAgX3RoaXMuZHJhd1RpbWVMaW5lKHN2ZywgcGF0aCwgInJnYigyMDAsMjAwLDIwMCkiLCA1LCAiMCIsIGlkTiwgY2xhc3NOKTsNCiAgICAgICAgfQ0KDQoNCiAgICAgIH07DQogICAgICBfdGhpcy51cGRhdGFSZWwoKQ0KICAgIH0sDQogICAgZHJhd01haW4oc3ZnKSB7DQogICAgICBsZXQgX3RoaXMgPSB0aGlzOw0KICAgICAgbGV0IGRhdGEgPSBfdGhpcy5kYXRhOw0KICAgICAgbGV0IG1hcmdpbiA9IF90aGlzLm1hcmdpbjsNCg0KICAgICAgbGV0IHdpZHRoID0gX3RoaXMud2lkdGggLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDsNCiAgICAgIGxldCBoZWlnaHQgPSBfdGhpcy5oZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTsNCg0KICAgICAgbGV0IGdyYXBoR1RyYW5zZm9ybVggPSBfdGhpcy5ncmFwaEdUcmFuc2Zvcm1YOw0KICAgICAgbGV0IGdyYXBoR1RyYW5zZm9ybVkgPSBfdGhpcy5ncmFwaEdUcmFuc2Zvcm1ZOw0KICAgICAgbGV0IGdyYXBoR1RyYW5zZm9ybUsgPSBfdGhpcy5ncmFwaEdUcmFuc2Zvcm1LOw0KICAgICAgbGV0IGF4aXNHcm91cHMgPSBzdmcuYXBwZW5kKCJnIikuYXR0cigiaWQiLCAiYXhpc0dyb3VwcyIpLmF0dHIoIndpZHRoIiwgd2lkdGgpLmF0dHIoImhlaWdodCIsIGhlaWdodCkNCiAgICAgIC8vIC5hdHRyKCJ0cmFuc2Zvcm0iLCAidHJhbnNsYXRlKCIgKyBncmFwaEdUcmFuc2Zvcm1YICsgJywnICsgZ3JhcGhHVHJhbnNmb3JtWSArICIpIHNjYWxlKCIgKyBncmFwaEdUcmFuc2Zvcm1LICsgIikiKTsNCiAgICAgIGxldCBncm91cHMgPSBzdmcuYXBwZW5kKCJnIikuYXR0cigiaWQiLCAiZ3JvdXBzIikuYXR0cigid2lkdGgiLCB3aWR0aCkuYXR0cigiaGVpZ2h0IiwgaGVpZ2h0KQ0KICAgICAgICAuYXR0cigidHJhbnNmb3JtIiwgInRyYW5zbGF0ZSgiICsgZ3JhcGhHVHJhbnNmb3JtWCArICcsJyArIGdyYXBoR1RyYW5zZm9ybVkgKyAiKSBzY2FsZSgiICsgZ3JhcGhHVHJhbnNmb3JtSyArICIpIik7DQogICAgICB0aGlzLmdyb3Vwc1N2ZyA9IGdyb3VwczsNCg0KICAgICAgbGV0IGJhY2tHID0gZ3JvdXBzLmFwcGVuZCgiZyIpLmF0dHIoImlkIiwgImJhY2tHIikuYXR0cigid2lkdGgiLCB3aWR0aCkuYXR0cigiaGVpZ2h0IiwgaGVpZ2h0KTsNCiAgICAgIGxldCBhcmNHID0gZ3JvdXBzLmFwcGVuZCgiZyIpLmF0dHIoImlkIiwgImFyY0ciKS5hdHRyKCJ3aWR0aCIsIHdpZHRoKS5hdHRyKCJoZWlnaHQiLCBoZWlnaHQpOw0KICAgICAgbGV0IHRpbWVMaW5lRyA9IGdyb3Vwcy5hcHBlbmQoImciKS5hdHRyKCJpZCIsICJ0aW1lTGluZUciKS5hdHRyKCJ3aWR0aCIsIHdpZHRoKS5hdHRyKCJoZWlnaHQiLCBoZWlnaHQpOw0KICAgICAgbGV0IGNpcmNsZUcgPSBncm91cHMuYXBwZW5kKCJnIikuYXR0cigiaWQiLCAiY2lyY2xlRyIpLmF0dHIoIndpZHRoIiwgd2lkdGgpLmF0dHIoImhlaWdodCIsIGhlaWdodCk7DQoNCiAgICAgIF90aGlzLmFyY0cgPSBhcmNHOw0KICAgICAgbGV0IHN0ZXBYID0gX3RoaXMuc3RlcFg7DQogICAgICBsZXQgc3RlcFkgPSBfdGhpcy5zdGVwWTsNCiAgICAgIGxldCBpbnRlcnZhbCA9IF90aGlzLmNpcmNsZUludGVydmFsOw0KDQoNCiAgICAgIGxldCBzY2FsZVByZSA9IF90aGlzLmdyYXBoU3ZnU2NhbGU7DQogICAgICBsZXQgc3R4ID0gMDsNCiAgICAgIGxldCBzdHkgPSAwOw0KICAgICAgbGV0IHN0ayA9IDE7DQogICAgICB2YXIgZ3JhcGhab29tID0gZDMuem9vbSgpDQogICAgICAgIC5zY2FsZUV4dGVudChbMCwgMTBdKQ0KICAgICAgICAub24oInN0YXJ0IiwgKGUpID0+IHsNCiAgICAgICAgICBzdHkgPSBlLnRyYW5zZm9ybS55Ow0KICAgICAgICAgIHN0eCA9IGUudHJhbnNmb3JtLng7DQogICAgICAgICAgc3RrID0gZS50cmFuc2Zvcm0uazsNCiAgICAgICAgfSkNCiAgICAgICAgLm9uKCd6b29tJywgKGUpID0+IHsNCiAgICAgICAgICBncmFwaEdUcmFuc2Zvcm1YID0gX3RoaXMuZ3JhcGhHVHJhbnNmb3JtWCArIGUudHJhbnNmb3JtLnggLSBzdHg7DQogICAgICAgICAgZ3JhcGhHVHJhbnNmb3JtWSA9IF90aGlzLmdyYXBoR1RyYW5zZm9ybVkgKyBlLnRyYW5zZm9ybS55IC0gc3R5Ow0KICAgICAgICAgIGdyYXBoR1RyYW5zZm9ybUsgPSBfdGhpcy5ncmFwaEdUcmFuc2Zvcm1LICsgZS50cmFuc2Zvcm0uayAtIHN0azsNCiAgICAgICAgICBfdGhpcy5ncmFwaEdNb3ZlWCA9IGdyYXBoR1RyYW5zZm9ybVg7DQoNCiAgICAgICAgICBncm91cHMuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgKGdyYXBoR1RyYW5zZm9ybVgpICsgJywnICsgKGdyYXBoR1RyYW5zZm9ybVkpICsgJykgc2NhbGUoJyArIChncmFwaEdUcmFuc2Zvcm1LKSArICcpJykNCiAgICAgICAgfSkNCiAgICAgICAgLm9uKCdlbmQnLCAoZSkgPT4gew0KICAgICAgICAgIF90aGlzLmdyYXBoR1RyYW5zZm9ybVggPSBncmFwaEdUcmFuc2Zvcm1YOw0KICAgICAgICAgIF90aGlzLmdyYXBoR1RyYW5zZm9ybVkgPSBncmFwaEdUcmFuc2Zvcm1ZOw0KICAgICAgICAgIF90aGlzLmdyYXBoR1RyYW5zZm9ybUsgPSBncmFwaEdUcmFuc2Zvcm1LOw0KICAgICAgICAgIGdyb3Vwcy5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyAoZ3JhcGhHVHJhbnNmb3JtWCkgKyAnLCcgKyAoZ3JhcGhHVHJhbnNmb3JtWSkgKyAnKSBzY2FsZSgnICsgKGdyYXBoR1RyYW5zZm9ybUspICsgJyknKQ0KICAgICAgICB9KTsNCg0KDQogICAgICBzdmcuY2FsbChncmFwaFpvb20pDQogICAgICAvLyAuY2FsbChncmFwaFpvb20udHJhbnNmb3JtLCBkMy56b29tSWRlbnRpdHkuc2NhbGUoMSkpDQogICAgICBjb25zdCBwYXRoID0gZDMucGF0aCgpDQogICAgICBwYXRoLm1vdmVUbyhtYXJnaW4ubGVmdCwgbWFyZ2luLnRvcCkNCiAgICAgIGxldCB4ID0gbWFyZ2luLmxlZnQ7DQogICAgICBsZXQgcHJleCA9IG1hcmdpbi5sZWZ0Ow0KICAgICAgbGV0IHByZXkgPSBtYXJnaW4udG9wOw0KICAgICAgbGV0IHByZXIgPSAwOw0KICAgICAgbGV0IHByZVNvbkxlbiA9IDA7DQogICAgICBsZXQgbGF5b3V0U2hvdyA9IF90aGlzLmxheW91dFNob3c7DQogICAgICBsZXQgc3VtVG90YWxEdXJhdGlvbiA9IDA7DQogICAgICBsZXQgcm9vdEluZGV4ID0gLTE7DQogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgbGV0IGxheSA9IHBhcnNlSW50KGRhdGFbaV1bJ2xheW91dCddKTsNCg0KICAgICAgICBsZXQgY29sb3JzID0gX3RoaXMubWNvbG9yOw0KICAgICAgICBsZXQgY29sb3JzRCA9IF90aGlzLm1EYXJrY29sb3I7DQogICAgICAgIGxldCBlbnRpdHlMb2NhdGlvbkRhdGEgPSB0b29scy5kZWVwQ2xvbmUoZGF0YVtpXSk7DQogICAgICAgIGlmIChsYXkgPT0gMCkgew0KICAgICAgICAgIHJvb3RJbmRleCsrOw0KICAgICAgICB9DQogICAgICAgIGVudGl0eUxvY2F0aW9uRGF0YVsncm9vdEluZGV4J10gPSByb290SW5kZXg7DQogICAgICAgIGVudGl0eUxvY2F0aW9uRGF0YVsnY29sb3InXSA9IGNvbG9yc1tyb290SW5kZXggJSBjb2xvcnMubGVuZ3RoXTsNCiAgICAgICAgZW50aXR5TG9jYXRpb25EYXRhWydjb2xvckQnXSA9IGNvbG9yc0Rbcm9vdEluZGV4ICUgY29sb3JzRC5sZW5ndGhdOw0KICAgICAgICBsZXQgdGltZUxpc3QgPSBkYXRhW2ldWyd0aW1lJ107DQogICAgICAgIGxldCBkdXJhdGlvbiA9IHRvb2xzLnRpbWUyc2Vjb25kcyh0aW1lTGlzdFsxXSkgLSB0b29scy50aW1lMnNlY29uZHModGltZUxpc3RbMF0pOw0KICAgICAgICBzdW1Ub3RhbER1cmF0aW9uICs9IGR1cmF0aW9uOw0KICAgICAgICBsZXQgc2hvd0VudGl0eSA9IF90aGlzLnNob3dFbnRpdHlMaXN0LmZpbmQoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGRbJ2lkJ10gPT0gZGF0YVtpXVsnaWQnXSB9KTsNCiAgICAgICAgaWYgKChzaG93RW50aXR5WydzaG93J10gPT0gdHJ1ZSkpIHsNCiAgICAgICAgICBsZXQgeSA9IG1hcmdpbi50b3AgKyBsYXkgKiBzdGVwWQ0KICAgICAgICAgIGxldCByZWxldmFuY2VWYWx1ZSA9IGRhdGFbaV1bJ2F0dHJpYnV0ZSddWydyZWxldmFuY2UnXTsNCiAgICAgICAgICBsZXQgdG90YWxEdXJhdGlvblZhbHVlID0gZGF0YVtpXVsndG90YWxEdXJhdGlvbiddOw0KICAgICAgICAgIGxldCByU2NhbGUgPSBfdGhpcy50b3RhbER1cmF0aW9uU2NhbGVfbGluZWFyOw0KDQoNCiAgICAgICAgICBsZXQgciA9IHJTY2FsZSh0b3RhbER1cmF0aW9uVmFsdWUpOw0KICAgICAgICAgIGxldCBzdGVwTCA9IHIgKyBzdGVwWCAvIDIgKyBpbnRlcnZhbCAvIDEwOw0KICAgICAgICAgIGxldCBjb250cm9sUDF4ID0gcHJleCArIGludGVydmFsIC8gMTsNCiAgICAgICAgICBsZXQgY29udHJvbFAyeCA9IHggLSBpbnRlcnZhbCAvIDE7DQogICAgICAgICAgbGV0IGN1ckxpbmV4ID0geCAtIHIgLSBpbnRlcnZhbDsNCg0KICAgICAgICAgIGxldCByZWxEYXRhID0gX3RoaXMucmVsRGF0YTsNCiAgICAgICAgICBsZXQgb0RhdGEgPSBfdGhpcy5kcmF3RW50aXR5TG9jYXRpb247DQogICAgICAgICAgbGV0IGJhc2ljUmVsID0gcmVsRGF0YVsnYmFzaWNSZWwnXTsNCiAgICAgICAgICBsZXQgZGFJZCA9IGRhdGFbKGkpXVsnaWQnXTsNCiAgICAgICAgICBsZXQgamcgPSAwOw0KICAgICAgICAgIGZvciAobGV0IHJlID0gMDsgcmUgPCBiYXNpY1JlbC5sZW5ndGg7IHJlKyspIHsNCg0KICAgICAgICAgICAgbGV0IHNvcmNlSWQgPSBiYXNpY1JlbFtyZV1bMF07DQogICAgICAgICAgICBsZXQgdGFyZ2V0SWQgPSBiYXNpY1JlbFtyZV1bMV07DQogICAgICAgICAgICBsZXQgY05vZGUgPSAnJzsNCiAgICAgICAgICAgIGlmICgoc29yY2VJZCA9PSBkYUlkKSB8fCAodGFyZ2V0SWQgPT0gZGFJZCkpIHsNCiAgICAgICAgICAgICAgamcgPSAxOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH07DQogICAgICAgICAgbGV0IHNvbkZsYWcgPSAxOw0KICAgICAgICAgIGlmICgoKGkgPiAwKSAmJiAocHJlU29uTGVuID09IDApKSAmJiAoZGF0YVsoaSldWydzb24nXS5sZW5ndGggPT0gMCkpIHsNCiAgICAgICAgICAgIHNvbkZsYWcgPSAwOw0KICAgICAgICAgICAgc3RlcEwgPSByICsgc3RlcFggLyAxLjIgKyBpbnRlcnZhbCAvIDEwOw0KICAgICAgICAgICAgeCArPSBzdGVwTDsNCiAgICAgICAgICAgIGNvbnRyb2xQMXggPSBwcmV4ICsgaW50ZXJ2YWwgLyAxOw0KICAgICAgICAgICAgY29udHJvbFAyeCA9IHggLSByIC0gaW50ZXJ2YWwgLyAyIC0gaW50ZXJ2YWwgLyAxOw0KICAgICAgICAgICAgY3VyTGluZXggPSByICsgaW50ZXJ2YWwgLyAxMDsNCiAgICAgICAgICB9DQogICAgICAgICAgZWxzZSBpZiAoKChpID4gMCkgJiYgKHByZVNvbkxlbiAhPSAwKSkgJiYgKGRhdGFbKGkpXVsnc29uJ10ubGVuZ3RoID09IDApKSB7DQogICAgICAgICAgICBzb25GbGFnID0gMDsNCiAgICAgICAgICAgIHN0ZXBMID0gciArIHN0ZXBYICsgaW50ZXJ2YWwgKyAzMDsNCiAgICAgICAgICAgIHggKz0gc3RlcEw7DQogICAgICAgICAgICBjb250cm9sUDF4ID0gcHJleCArIGludGVydmFsIC8gMTsNCiAgICAgICAgICAgIGNvbnRyb2xQMnggPSB4IC0gciAtIGludGVydmFsIC8gMSAtIGludGVydmFsIC8gMTsNCiAgICAgICAgICAgIGN1ckxpbmV4ID0gciArIGludGVydmFsIC8gMTA7DQogICAgICAgICAgfQ0KICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgc3RlcEwgPSByICsgc3RlcFggKyBpbnRlcnZhbCArIDEwOw0KICAgICAgICAgICAgeCArPSBzdGVwTDsNCiAgICAgICAgICAgIGNvbnRyb2xQMXggPSBwcmV4ICsgaW50ZXJ2YWwgLyAxOw0KICAgICAgICAgICAgY29udHJvbFAyeCA9IHggLSByIC0gaW50ZXJ2YWwgLSBpbnRlcnZhbCAvIDE7DQogICAgICAgICAgICBjdXJMaW5leCA9IHIgKyBpbnRlcnZhbDsNCiAgICAgICAgICB9DQoNCiAgICAgICAgICBpZiAoKGpnID09IDEpICYmIChkYXRhW2ldWyd0eXBlJ10gPT0gMCkgJiYgKGRhdGFbKGkpXVsnc29uJ10ubGVuZ3RoID09IDApKSB7DQogICAgICAgICAgICBjdXJMaW5leCArPSByICogMS41DQogICAgICAgICAgfQ0KICAgICAgICAgIF90aGlzLmRyYXdFbnRpdHkoY2lyY2xlRywgeCwgeSwgciwgZGF0YVtpXSkNCiAgICAgICAgICBwYXRoLmJlemllckN1cnZlVG8oY29udHJvbFAxeCwgcHJleSwgY29udHJvbFAyeCwgeSwgeCAtIGN1ckxpbmV4LCB5KQ0KICAgICAgICAgIC8vIHBhdGgubGluZVRvKGNvbnRyb2xQMXgsIHByZXkpDQogICAgICAgICAgLy8gcGF0aC5saW5lVG8oY29udHJvbFAyeCwgeSkNCiAgICAgICAgICAvLyBwYXRoLmxpbmVUbyh4IC0gY3VyTGluZXgsIHkpDQogICAgICAgICAgcGF0aC5tb3ZlVG8oeCArIGN1ckxpbmV4LCB5KTsNCiAgICAgICAgICBwcmV4ID0geCArIGN1ckxpbmV4Ow0KICAgICAgICAgIHByZXkgPSB5Ow0KICAgICAgICAgIHByZXIgPSByOw0KICAgICAgICAgIHByZVNvbkxlbiA9IGRhdGFbKGkpXVsnc29uJ10ubGVuZ3RoOw0KICAgICAgICAgIGVudGl0eUxvY2F0aW9uRGF0YVsneCddID0geDsNCiAgICAgICAgICBlbnRpdHlMb2NhdGlvbkRhdGFbJ3knXSA9IHk7DQogICAgICAgICAgZW50aXR5TG9jYXRpb25EYXRhWydyJ10gPSByOw0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgIGVudGl0eUxvY2F0aW9uRGF0YVsneCddID0gcHJleDsNCiAgICAgICAgICBlbnRpdHlMb2NhdGlvbkRhdGFbJ3knXSA9IHByZXk7DQogICAgICAgICAgZW50aXR5TG9jYXRpb25EYXRhWydyJ10gPSBwcmVyOw0KICAgICAgICB9DQogICAgICAgIGVudGl0eUxvY2F0aW9uRGF0YVsnc29uRmxhZyddID0gKGVudGl0eUxvY2F0aW9uRGF0YVsnc29uJ10ubGVuZ3RoID4gMCkgPyAoMSkgOiAoMCk7DQogICAgICAgIC8vIGVudGl0eUxvY2F0aW9uRGF0YVsnc2hvd1JlbCddID0gZmFsc2U7DQogICAgICAgIF90aGlzLmRyYXdFbnRpdHlMb2NhdGlvbi5wdXNoKGVudGl0eUxvY2F0aW9uRGF0YSk7DQogICAgICB9DQogICAgICBsZXQgZW50aXR5TG9jYXRpb25EYXRhID0gX3RoaXMuZHJhd0VudGl0eUxvY2F0aW9uOw0KICAgICAgbGV0IGNvbG9ycyA9IF90aGlzLm1jb2xvcjsNCiAgICAgIGxldCBjb2xvckluZGV4ID0gMDsNCiAgICAgIGxldCBjb2xvcnJvb3RJbmRleCA9IDA7DQoNCiAgICAgIF90aGlzLnN1bVRvdGFsRHVyYXRpb24gPSBzdW1Ub3RhbER1cmF0aW9uOw0KICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbnRpdHlMb2NhdGlvbkRhdGEubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgbGV0IHggPSBlbnRpdHlMb2NhdGlvbkRhdGFbaV1bJ3gnXTsNCiAgICAgICAgbGV0IHkgPSBlbnRpdHlMb2NhdGlvbkRhdGFbaV1bJ3knXTsNCiAgICAgICAgbGV0IHIgPSBlbnRpdHlMb2NhdGlvbkRhdGFbaV1bJ3InXTsNCg0KICAgICAgICBsZXQgc2hvd0VudGl0eSA9IF90aGlzLnNob3dFbnRpdHlMaXN0LmZpbmQoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGRbJ2lkJ10gPT0gZW50aXR5TG9jYXRpb25EYXRhW2ldWydpZCddIH0pOw0KICAgICAgICBpZiAoZW50aXR5TG9jYXRpb25EYXRhW2ldWyd0eXBlJ10gPT0gMCAmJiAoc2hvd0VudGl0eVsnc2hvdyddID09IHRydWUpKSB7DQogICAgICAgICAgX3RoaXMuZHJhd0VudGl0eVRpbWVBeGlzKGNpcmNsZUcsIGVudGl0eUxvY2F0aW9uRGF0YVtpXSk7DQogICAgICAgIH0NCiAgICAgICAgaWYgKChlbnRpdHlMb2NhdGlvbkRhdGFbaV1bJ2xheW91dCddID09ICcwJyAmJiAoZW50aXR5TG9jYXRpb25EYXRhW2ldWyduYW1lJ10gIT0gJ1Rlc3QnKSkpIHsNCiAgICAgICAgICBjb2xvckluZGV4ID0gY29sb3Jyb290SW5kZXg7DQogICAgICAgICAgY29sb3Jyb290SW5kZXgrKzsNCg0KICAgICAgICB9DQogICAgICAgIGlmICgoZW50aXR5TG9jYXRpb25EYXRhW2ldWydzb24nXS5sZW5ndGggIT0gMCkgJiYgKF90aGlzLnNob3dFbnRpdHlMaXN0LmZpbmQoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGRbJ2lkJ10gPT0gZW50aXR5TG9jYXRpb25EYXRhW2ldWydzb24nXVswXSB9KVsnc2hvdyddKSkgew0KICAgICAgICAgIGxldCBtYXh4cyA9IGVudGl0eUxvY2F0aW9uRGF0YVtpXVsneCddIC0gZW50aXR5TG9jYXRpb25EYXRhW2ldWydyJ10gLSA0MDsNCiAgICAgICAgICBsZXQgbWF4eXMgPSBlbnRpdHlMb2NhdGlvbkRhdGFbaV1bJ3knXSAtIGVudGl0eUxvY2F0aW9uRGF0YVtpXVsnciddIC0gNDA7DQogICAgICAgICAgbGV0IG1pbnhzID0gdG9vbHMuZGVlcENsb25lKG1heHhzKTsNCiAgICAgICAgICBsZXQgbWlueXMgPSB0b29scy5kZWVwQ2xvbmUobWF4eXMpOw0KICAgICAgICAgIGxldCByZWN0UG9pbnRzID0gW1ttYXh4cywgbWF4eXNdXTsNCiAgICAgICAgICBsZXQgc29ucyA9IHRvb2xzLmRlZXBDbG9uZShkYXRhW2ldWydzb24nXSk7DQogICAgICAgICAgd2hpbGUgKChzb25zLmxlbmd0aCA+IDApKSB7DQogICAgICAgICAgICBsZXQgcyA9IHNvbnNbMF07DQogICAgICAgICAgICBzb25zLnNwbGljZSgwLCAxKTsNCiAgICAgICAgICAgIGxldCBjdXJzb24gPSBlbnRpdHlMb2NhdGlvbkRhdGEuZmluZChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZFsnaWQnXSA9PSBzOyB9KTsNCiAgICAgICAgICAgIGxldCBjdXJnc29uID0gY3Vyc29uWydzb24nXTsNCiAgICAgICAgICAgIGxldCBjdXJ4ID0gY3Vyc29uWyd4J10gKyBjdXJzb25bJ3InXSAqIDI7DQogICAgICAgICAgICBsZXQgY3VyeSA9IGN1cnNvblsneSddICsgY3Vyc29uWydyJ10gKiAyOw0KICAgICAgICAgICAgaWYgKGN1cnggPiBtYXh4cykgeyBtYXh4cyA9IGN1cng7IH0NCiAgICAgICAgICAgIC8vIGlmKGN1cnNvblsneSddPG1heHlzKW1heHlzID0gY3Vyc29uWyd5J107DQogICAgICAgICAgICBpZiAoY3VyeSA8IG1pbnlzKSBtaW55cyA9IGN1cnk7DQogICAgICAgICAgICBpZiAoY3VyeSA+IG1heHlzKSBtYXh5cyA9IGN1cnk7DQogICAgICAgICAgICBmb3IgKGxldCBncyA9IDA7IGdzIDwgY3VyZ3Nvbi5sZW5ndGg7IGdzKyspIHsNCiAgICAgICAgICAgICAgc29ucy5wdXNoKGN1cmdzb25bZ3NdKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9DQogICAgICAgICAgcmVjdFBvaW50cyA9IFtbbWlueHMsIG1pbnlzXSwgW21pbnhzLCBtYXh5c10sIFttYXh4cywgbWF4eXNdLCBbbWF4eHMsIG1pbnlzXV07DQogICAgICAgICAgLy8gX3RoaXMuZHJhd3BvbHlnb24oYmFja0csIGNvbG9yc1tjb2xvckluZGV4XSwgcmVjdFBvaW50cywgInJnYigyNTUsMjU1LDI1NSkiLDAuMyk7DQogICAgICAgICAgX3RoaXMuZHJhd1JlY3QoYmFja0csIG1pbnhzLCBtaW55cywgTWF0aC5hYnMobWF4eHMgLSBtaW54cyksIE1hdGguYWJzKG1heHlzIC0gbWlueXMpLCAyMCwgMjAsIGNvbG9yc1tjb2xvckluZGV4XSwgMC4xLCAid2hpdGUiLCBgYmFja1JlY3Qke2l9YCkNCg0KICAgICAgICAgIGNvbG9ySW5kZXgrKzsNCiAgICAgICAgICBjb2xvckluZGV4ICU9IGNvbG9ycy5sZW5ndGgNCiAgICAgICAgfQ0KICAgICAgICAvLyBlbnRpdHlMb2NhdGlvbkRhdGFbaV1bJ2NvbG9yJ10gPSBjb2xvcnNbY29sb3JJbmRleCAtIDFdOw0KICAgICAgICAvLyBpZiAoKGVudGl0eUxvY2F0aW9uRGF0YVtpXVsnbGF5b3V0J10gPT0gJzAnKSAmJiAoKGVudGl0eUxvY2F0aW9uRGF0YVtpXVsnbmFtZSddID09ICdUZXN0JykgfHwgKGVudGl0eUxvY2F0aW9uRGF0YVtpXVsnbmFtZSddID09ICdFeGFtcGxlJykpKSB7DQogICAgICAgIC8vICAgZW50aXR5TG9jYXRpb25EYXRhW2ldWydjb2xvciddID0gY29sb3JzW2NvbG9ySW5kZXhdDQogICAgICAgIC8vIH0NCiAgICAgIH0NCiAgICAgIF90aGlzLmRyYXdUaW1lTGluZSh0aW1lTGluZUcsIHBhdGgsICJyZ2IoMjAwLDIwMCwyMDApIiwgNSwgJzAnLCAndGltZUxpbmUgJywgJ3RpbWVMaW5lICcpOw0KICAgICAgX3RoaXMuZHJhd1JlbGF0aW9uc2hpcExpbmUodGltZUxpbmVHKTsNCiAgICAgIF90aGlzLmRyYXdUaW1lQXhpcyhfdGhpcy5UaW1lQXhpc1N2Zyk7DQogICAgICBfdGhpcy5kcmF3VHlwZVJpdmVyKF90aGlzLlRpbWVBeGlzU3ZnKTsNCiAgICAgIF90aGlzLnVwZGF0YVRpbWVBeGlzRHVyKF90aGlzLlRpbWVBeGlzU3ZnLCBfdGhpcy50aW1lQXhpc1gsIF90aGlzLnRpbWVBeGlzVyk7DQogICAgfSwNCiAgICB1cGRhdGFUaW1lQXhpc0R1cihzdmcsIHgsIHdpZHRoKSB7DQogICAgICBjb25zdCBfdGhpcyA9IHRoaXM7DQogICAgICBsZXQgbWFyZ2luID0gX3RoaXMubWFyZ2luOw0KICAgICAgbGV0IHRvdGFsV2lkdGggPSBfdGhpcy53aWR0aCAvL21hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0Ow0KICAgICAgbGV0IHkgPSAwOw0KICAgICAgbGV0IGggPSAyMDA7DQogICAgICBfdGhpcy5kcmF3UmVjdChzdmcsIDAsIHksIHgsIGgsIDMsIDMsICd3aGl0ZScsIDAuMywgJycsICJ0aW1lQXhpc1JlY3QxIikNCiAgICAgIGxldCBjdXJSZWN0ID0gX3RoaXMuZHJhd1JlY3Qoc3ZnLCB4LCB5IC0gMCwgd2lkdGgsIGggLSA1LCAzLCAzLCAncmdiYSgwLDAsMCwwKScsIDEsICdyZ2IoMTQ1LCAxODAsIDE4OSknLCAnd2luUmVjdCcsIDIpOw0KICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgIC8vIGN1clJlY3Qub24oJ21vdXNlbW92ZScsIGZ1bmN0aW9uIChlKSB7DQogICAgICAvLyAgIGQzLnNlbGVjdCh0aGlzKS5hdHRyKCJjdXJzb3IiLCAncG9pbnRlcicpOw0KICAgICAgLy8gICBpZiAoX3RoaXMudGltZUF4aXNEcm9wRmxhZyA9PSAxKSB7DQogICAgICAvLyAgICAgbGV0IG14ID0gZS5jbGllbnRYIC0gX3RoaXMudGltZUF4aXNEb3duWDsNCiAgICAgIC8vICAgICBfdGhpcy50aW1lQXhpc1ggPSBlLmxheWVyWCAtIDQ1MCAtIF90aGlzLnRpbWVBeGlzVyAvIDI7DQogICAgICAvLyAgIH0NCiAgICAgIC8vIH0pDQogICAgICAvLyBjdXJSZWN0Lm9uKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkgew0KICAgICAgLy8gICBfdGhpcy50aW1lQXhpc0Rvd25YID0gZS5jbGllbnRYOw0KICAgICAgLy8gICBfdGhpcy50aW1lQXhpc0Ryb3BGbGFnID0gMTsNCiAgICAgIC8vIH0pDQogICAgICAvLyBjdXJSZWN0Lm9uKCdtb3VzZXVwJywgZnVuY3Rpb24gKGUpIHsNCiAgICAgIC8vICAgX3RoaXMudGltZUF4aXNEb3duWCA9IGUuY2xpZW50WDsNCiAgICAgIC8vICAgX3RoaXMudGltZUF4aXNEcm9wRmxhZyA9IDA7DQogICAgICAvLyB9KQ0KICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KDQogICAgICBfdGhpcy5kcmF3UmVjdChzdmcsIHggKyB3aWR0aCwgeSwgdG90YWxXaWR0aCAtIHdpZHRoLCBoLCAzLCAzLCAnd2hpdGUnLCAwLjMsICcnLCAidGltZUF4aXNSZWN0MiIpDQogICAgfSwNCiAgICBkcmF3VHlwZVJpdmVyKHN2Zykgew0KICAgICAgY29uc3QgX3RoaXMgPSB0aGlzOw0KICAgICAgbGV0IG9yaURhdGEgPSBfdGhpcy5kYXRhOw0KICAgICAgbGV0IHJlc0RhdGEgPSBbXTsNCiAgICAgIGxldCB0cmlMaSA9IFtdOw0KICAgICAgbGV0IGV4ZUxpID0gW107DQogICAgICB2YXIgZGVmcyA9IHN2Zy5hcHBlbmQoImRlZnMiKTsNCg0KICAgICAgdmFyIGZpbHRlciA9IGRlZnMNCiAgICAgICAgLmFwcGVuZCgiZmlsdGVyIikNCiAgICAgICAgLmF0dHIoImlkIiwgImNvb2xTaGFkb3ciKQ0KICAgICAgICAuYXR0cigieCIsICItMTAwJSIpDQogICAgICAgIC5hdHRyKCJ5IiwgIi0xMDAlIikgLy8NCiAgICAgICAgLmF0dHIoIndpZHRoIiwgIjMwMCUiKQ0KICAgICAgICAuYXR0cigiaGVpZ2h0IiwgIjMwMCUiKTsgLy8NCg0KICAgICAgZmlsdGVyDQogICAgICAgIC5hcHBlbmQoImZlTW9ycGhvbG9neSIpDQogICAgICAgIC5hdHRyKCJpbiIsICJTb3VyY2VHcmFwaGljIikNCiAgICAgICAgLmF0dHIoInJlc3VsdCIsICJ1cHBlckxheWVyIikNCiAgICAgICAgLmF0dHIoIm9wZXJhdG9yIiwgImRpbGF0ZSIpDQogICAgICAgIC5hdHRyKCJyYWRpdXMiLCAiMC4yIDAuMiIpOw0KDQogICAgICBmaWx0ZXINCiAgICAgICAgLmFwcGVuZCgiZmVNb3JwaG9sb2d5IikNCiAgICAgICAgLmF0dHIoImluIiwgIlNvdXJjZUFscGhhIikNCiAgICAgICAgLmF0dHIoInJlc3VsdCIsICJlbmxhcmdlZEFscGhhIikNCiAgICAgICAgLmF0dHIoIm9wZXJhdG9yIiwgImRpbGF0ZSIpDQogICAgICAgIC5hdHRyKCJyYWRpdXMiLCAiMC4yIDAuMiIpOw0KDQogICAgICBmaWx0ZXINCiAgICAgICAgLmFwcGVuZCgiZmVHYXVzc2lhbkJsdXIiKQ0KICAgICAgICAuYXR0cigiaW4iLCAiZW5sYXJnZWRBbHBoYSIpDQogICAgICAgIC5hdHRyKCJyZXN1bHQiLCAiYmx1cmVkQWxwaGEiKQ0KICAgICAgICAuYXR0cigic3RkRGV2aWF0aW9uIiwgIjMiKTsNCg0KICAgICAgZmlsdGVyDQogICAgICAgIC5hcHBlbmQoImZlT2Zmc2V0IikNCiAgICAgICAgLmF0dHIoImluIiwgImJsdXJlZEFscGhhIikNCiAgICAgICAgLmF0dHIoInJlc3VsdCIsICJsb3dlckxheWVyIikNCiAgICAgICAgLmF0dHIoImR5IiwgIjEiKTsgLy8NCg0KICAgICAgdmFyIGZlTWVyZ2UgPSBmaWx0ZXIuYXBwZW5kKCJmZU1lcmdlIik7DQogICAgICBmZU1lcmdlLmFwcGVuZCgiZmVNZXJnZU5vZGUiKS5hdHRyKCJpbiIsICJsb3dlckxheWVyIik7DQogICAgICBmZU1lcmdlLmFwcGVuZCgiZmVNZXJnZU5vZGUiKS5hdHRyKCJpbiIsICJ1cHBlckxheWVyIik7DQogICAgICBsZXQgdG90YWwgPSAwDQogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9yaURhdGEubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgbGV0IGN1ckVudCA9IG9yaURhdGFbaV07DQogICAgICAgIGxldCB0cCA9IHt9DQogICAgICAgIHRwWydvZCddID0gaTsNCiAgICAgICAgdHBbJ2R1J10gPXRvdGFsOw0KICAgICAgICB0b3RhbCs9Y3VyRW50Wyd0b3RhbER1cmF0aW9uJ107DQogICAgICAgIGNvbnNvbGUubG9nKGN1ckVudCkNCiAgICAgICAgaWYgKChjdXJFbnRbJ3R5cGUnXSA9PSAiMSIpKSB7DQogICAgICAgICAgdHJpTGkucHVzaCh0cCk7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGN1ckVudFsndHlwZSddID09ICIyIikgew0KICAgICAgICAgIGV4ZUxpLnB1c2godHApOw0KICAgICAgICB9DQogICAgICAgIGxldCB0eXBlRGF0YSA9IGN1ckVudFsiYXR0cmlidXRlIl1bImV4cHJlc3Npb25zIl07DQogICAgICAgIGxldCB0b3RhbER1ciA9IDA7DQoNCiAgICAgICAgZm9yIChsZXQgdCBpbiB0eXBlRGF0YSkgew0KICAgICAgICAgIC8vIGxldCBjb2xvciA9IHR5cGVDb2xvcltpXTsNCiAgICAgICAgICBsZXQgdHlwZUR1cml0aW9uID0gdHlwZURhdGFbdF07DQogICAgICAgICAgbGV0IHRvdGFsVHlwZVNlY29uZHMgPSAwOw0KICAgICAgICAgIGZvciAobGV0IGQgaW4gdHlwZUR1cml0aW9uKSB7DQogICAgICAgICAgICB0b3RhbFR5cGVTZWNvbmRzICs9ICh0b29scy50aW1lMnNlY29uZHModHlwZUR1cml0aW9uW2RdWzFdKSAtIHRvb2xzLnRpbWUyc2Vjb25kcyh0eXBlRHVyaXRpb25bZF1bMF0pKQ0KICAgICAgICAgIH0NCiAgICAgICAgICB0b3RhbER1ciArPSB0b3RhbFR5cGVTZWNvbmRzOw0KICAgICAgICAgIHRwW3RdID0gdG90YWxUeXBlU2Vjb25kczsNCiAgICAgICAgfQ0KICAgICAgICBmb3IgKGxldCB0IGluIHRwKSB7DQogICAgICAgICAgaWYgKCh0ICE9ICdvZCcpJiYodCE9J2R1JykpIHsNCiAgICAgICAgICAgIHRwW3RdIC89IHRvdGFsRHVyOw0KICAgICAgICAgICAgaWYgKHRvdGFsRHVyID09IDApIHsNCiAgICAgICAgICAgICAgdHBbdF0gPSAwOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXNEYXRhLnB1c2godHApDQogICAgICB9DQogICAgICBsZXQgZGF0YSA9IHJlc0RhdGE7DQogICAgICB2YXIgc3RhY2sgPSBkMy5zdGFjaygpDQogICAgICAgIC5rZXlzKFsnMScsICcyJywgJzMnXSkNCiAgICAgICAgLm9yZGVyKGQzLnN0YWNrT3JkZXJJbnNpZGVPdXQpDQogICAgICAgIC5vZmZzZXQoZDMuc3RhY2tPZmZzZXRXaWdnbGUpOw0KDQogICAgICBsZXQgeVJhbmdlV2lkdGggPSA3MDsNCiAgICAgIGxldCB3ID0gcGFyc2VJbnQoc3ZnLmF0dHIoIndpZHRoIikpICsgMzANCiAgICAgIGxldCB4U3RlcCA9ICh3KSAvIG9yaURhdGEubGVuZ3RoOw0KICAgICAgbGV0IHhTY2FsZSA9IGQzLnNjYWxlTGluZWFyKCkuZG9tYWluKFswLHRvdGFsXSkucmFuZ2UoWzAsd10pDQogICAgICBsZXQgeVNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWy0xLCAxXSkucmFuZ2UoWzAsIDcwXSk7DQogICAgICB2YXIgYXJlYSA9IGQzLmFyZWEoKQ0KICAgICAgICAuY3VydmUoZDMuY3VydmVCYXNpcykNCiAgICAgICAgLngoZnVuY3Rpb24gKGQpIHsNCiAgICAgICAgICByZXR1cm4gMTUreFNjYWxlKGQuZGF0YS5kdSkrZC5kYXRhLm9kICogMTAvL3hTdGVwICsgMTU7DQogICAgICAgIH0pDQogICAgICAgIC55MChmdW5jdGlvbiAoZCkgew0KICAgICAgICAgIHJldHVybiAxNTMgKyB5UmFuZ2VXaWR0aCAtIHlTY2FsZShkWzBdKTsNCiAgICAgICAgfSkNCiAgICAgICAgLnkxKGZ1bmN0aW9uIChkKSB7DQogICAgICAgICAgcmV0dXJuIDE1MyArIHlSYW5nZVdpZHRoIC0geVNjYWxlKGRbMV0pOw0KICAgICAgICB9KTsNCiAgICAgIGxldCBzdGFja0RhdGEgPSBzdGFjayhkYXRhKQ0KICAgICAgY29uc29sZS5sb2coInN0YWNrIixyZXNEYXRhLHN0YWNrRGF0YSkNCiAgICAgIGxldCBsZW5UaHJlc2hvbGQgPSAwLjQ7DQogICAgICBsZXQgaWNvbkxpID0ge30NCiAgICAgIGZvciAobGV0IHMgaW4gc3RhY2tEYXRhKSB7DQogICAgICAgIGljb25MaVtzXSA9IFtdDQogICAgICAgIGZvciAobGV0IGkgaW4gc3RhY2tEYXRhW3NdKSB7DQogICAgICAgICAgbGV0IGxlbkFyZWEgPSBzdGFja0RhdGFbc11baV0NCiAgICAgICAgICBpZiAoKGxlbkFyZWFbMV0gLSBsZW5BcmVhWzBdKSA+IDAuNCkgew0KICAgICAgICAgICAgaWNvbkxpW3NdLnB1c2goW2ksIGxlbkFyZWFdKTsNCiAgICAgICAgICB9DQogICAgICAgICAgZm9yIChsZXQgbGkgaW4gaWNvbkxpW3NdKSB7DQogICAgICAgICAgICBpZiAoaSA8IChpY29uTGlbc11bbGldWzBdICsgMikpIHsNCiAgICAgICAgICAgICAgbGV0IHNlbGVjdEFyZWEgPSBpY29uTGlbc11bbGldWzFdDQogICAgICAgICAgICAgIGlmICgoKHNlbGVjdEFyZWFbMV0gLSBsZW5BcmVhWzFdKSAtIChzZWxlY3RBcmVhWzBdIC0gbGVuQXJlYVswXSkpIDwgMC4yKSB7DQogICAgICAgICAgICAgICAgaWNvbkxpW3NdLnNwbGljZShzLCAxKTsNCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgfQ0KICAgICAgLy8gbGV0IGFyZWFHID0gc3ZnLmFwcGVuZCgiZyIpDQogICAgICBsZXQgdHlwZUNvbG9yID0gew0KICAgICAgICAiMSI6ICIjZmY5YzljIiwNCiAgICAgICAgIjIiOiAiI2Y0ZjRkMCIsDQogICAgICAgICIzIjogIiM2ZjhiZTAiLA0KICAgICAgfTsNCiAgICAgIGxldCBjb2xvckxpID0gX3RoaXMubWNvbG9yOw0KICAgICAgc3ZnLnNlbGVjdEFsbCgicGF0aCIpDQogICAgICAgIC5kYXRhKHN0YWNrRGF0YSkNCiAgICAgICAgLmpvaW4oInBhdGgiKQ0KICAgICAgICAuYXR0cigiaWQiLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5rZXkgfSkNCiAgICAgICAgLmF0dHIoImNsYXNzIiwgInJpdmVyIikNCiAgICAgICAgLmF0dHIoImQiLCBmdW5jdGlvbiAoZCkgew0KICAgICAgICAgIHJldHVybiBhcmVhKGQpDQogICAgICAgIH0pDQogICAgICAgIC5hdHRyKCJmaWxsIiwgZnVuY3Rpb24gKGQsIGkpIHsNCiAgICAgICAgICByZXR1cm4gdHlwZUNvbG9yW2Qua2V5XQ0KICAgICAgICB9KQ0KICAgICAgICAub24oIm1vdXNlb3ZlciIsIGZ1bmN0aW9uIChkKSB7DQogICAgICAgICAgZDMuc2VsZWN0QWxsKCIucml2ZXIiKS5zdHlsZSgiZmlsdGVyIiwgInVybCgpIikNCiAgICAgICAgICBkMy5zZWxlY3QodGhpcykuc3R5bGUoImZpbHRlciIsICJ1cmwoI2Nvb2xTaGFkb3cpIikNCiAgICAgICAgfSkNCg0KICAgICAgZm9yIChsZXQgdCBpbiB0cmlMaSkgew0KICAgICAgICBsZXQgYXJlYSA9IHRvb2xzLmNhbGNUcmlhbmdsZSgodHJpTGlbdF1bJ29kJ10pICogeFN0ZXAsIC0zMCwgMTQpOw0KICAgICAgICBfdGhpcy5kcmF3VHJpYW5nbGUoc3ZnLCAicmdiKDI1MCwgMTk5LCA4OCkiLCBhcmVhLCAicmdiKDI1MCwgMTk5LCA4OCkiLDEsMTUsImVudEUiLGBlbnRFXyR7ZGF0YVsnaWQnXX1gKTsNCiAgICAgICAgX3RoaXMuZHJhd1R4dChzdmcsICh0cmlMaVt0XVsnb2QnXSkgKiB4U3RlcCwgLTIzLCAiVCIsICJ3aGl0ZSIsIDAsICJtaWRkbGUiLCAxOCkNCiAgICAgIH0NCiAgICAgIGZvciAobGV0IHQgaW4gZXhlTGkpIHsNCiAgICAgICAgbGV0IGFyZWEgPSB0b29scy5jYWxjVHJpYW5nbGUoKGV4ZUxpW3RdWydvZCddKSAqIHhTdGVwLCAtMzAsIDE0KTsNCiAgICAgICAgX3RoaXMuZHJhd1RyaWFuZ2xlKHN2ZywgInJnYigyNTAsIDE5OSwgODgpIiwgYXJlYSwgInJnYigyNTAsIDE5OSwgODgpIiwxLDE1LCJlbnRFIixgZW50RV8ke2RhdGFbJ2lkJ119YCk7DQogICAgICAgIF90aGlzLmRyYXdUeHQoc3ZnLCAoZXhlTGlbdF1bJ29kJ10pICogeFN0ZXAsIC0yMywgIkUiLCAid2hpdGUiLCAwLCAibWlkZGxlIiwgMTgpDQogICAgICB9DQogICAgfSwNCiAgICBkcmF3VGltZUF4aXMoc3ZnKSB7DQogICAgICBjb25zdCBfdGhpcyA9IHRoaXM7DQogICAgICBsZXQgc3VtVG90YWxEdXJhdGlvbiA9IF90aGlzLnN1bVRvdGFsRHVyYXRpb247DQogICAgICBsZXQgZGF0YSA9IF90aGlzLmRyYXdFbnRpdHlMb2NhdGlvbjsNCiAgICAgIGxldCBhZGREYXRhID0gdG9vbHMuZGVlcENsb25lKF90aGlzLmRyYXdFbnRpdHlMb2NhdGlvbik7DQogICAgICBsZXQgbWFyZ2luID0gX3RoaXMubWFyZ2luOw0KICAgICAgbGV0IHByZXggPSBtYXJnaW4ubGVmdDsNCiAgICAgIGxldCBwcmV5ID0gNTA7DQogICAgICBsZXQgd2lkdGggPSBzdmcuYXR0cigid2lkdGgiKSAtMjAgLy9tYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDsNCiAgICAgIGxldCBoZWlnaHQgPSBfdGhpcy5oZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTsNCiAgICAgIGxldCB3aWR0aFNjYWxlID0gZDMuc2NhbGVMaW5lYXIoWzAsIHN1bVRvdGFsRHVyYXRpb25dLCBbMCwgd2lkdGhdKTsNCiAgICAgIGRhdGEuZm9yRWFjaCgoc2VsZiwgaW5keCwgYXJyKSA9PiB7DQogICAgICAgIGxldCB0b3RhbER1cmF0aW9uVmFsdWUgPSBzZWxmWyd0b3RhbER1cmF0aW9uJ107DQogICAgICAgIGxldCB0aW1lTGlzdCA9IHNlbGZbJ3RpbWUnXTsNCiAgICAgICAgbGV0IGlkID0gc2VsZlsnaWQnXQ0KICAgICAgICBsZXQgZHVyYXRpb24gPSB0b29scy50aW1lMnNlY29uZHModGltZUxpc3RbMV0pIC0gdG9vbHMudGltZTJzZWNvbmRzKHRpbWVMaXN0WzBdKTsNCiAgICAgICAgLy8gY29uc29sZS5sb2codGltZUxpc3QsdG9vbHMudGltZTJzZWNvbmRzKHRpbWVMaXN0WzBdKSkNCiAgICAgICAgbGV0IGV2V2lkdGggPSB3aWR0aFNjYWxlKGR1cmF0aW9uKSAtIDQ7DQoNCiAgICAgICAgbGV0IGV2VFdpZHRoID0gd2lkdGhTY2FsZSh0b3RhbER1cmF0aW9uVmFsdWUpOw0KICAgICAgICBsZXQgbGF5ID0gcGFyc2VJbnQoc2VsZlsnbGF5b3V0J10pOw0KICAgICAgICBsZXQgZXZIaWdodCA9IDgwIC0gMjAgKiBsYXk7DQogICAgICAgIGxldCB4ID0gcHJleDsNCiAgICAgICAgbGV0IHkgPSBwcmV5ICsgMjAgKiBsYXk7DQogICAgICAgIHByZXggKz0gZXZXaWR0aCArIDQ7DQogICAgICAgIGxldCBjciA9IDM7DQogICAgICAgIC8vIGlmKHNlbGZbJ3R5cGUnXT09MCl7DQogICAgICAgIGlmICgxKSB7DQogICAgICAgICAgaWYgKGxheSA9PSAwKSB7DQogICAgICAgICAgICBfdGhpcy5kcmF3UmVjdChzdmcsIHgtMSwgeSAtIDU5LCAzLCA0MiwgMCwgMCwgc2VsZlsnY29sb3InXSwgMC40LCAnd2hpdGUnLCBgdGltZUF4aXNFbnRCbF8ke2luZHh9YCwgMCwgJ3RpbWVBeGlzRW50QmwnKQ0KDQogICAgICAgICAgICBfdGhpcy5kcmF3VHh0KHN2ZywgeCsyMywgeSAgLSAyMywgMTAsIFtzZWxmWyd0aW1lJ11bMF0uc3BsaXQoIjoiKS5zcGxpY2UoMSkuam9pbigiOiIpXSwgc2VsZlsnY29sb3InXSwgMTUsIGB0aW1lRHVyVGV4dF8ke2lkfWAsICd0aW1lRHV5clRleHQnKTsNCiAgICAgICAgICAgIF90aGlzLmRyYXdSZWN0KHN2ZywgeCAtIDIsIHkgLSAyMCwgZXZUV2lkdGgsIDEwMCwgNiwgNiwgc2VsZlsnY29sb3InXSwgMC4zLCAnd2hpdGUnLCBgdGltZUF4aXNFbnRCXyR7aW5keH1gLCAxLjUsICd0aW1lQXhpc0VudEInKQ0KICAgICAgICAgIH0NCiAgICAgICAgICBfdGhpcy5kcmF3UmVjdChzdmcsIHgsIHksIGV2V2lkdGgsIGV2SGlnaHQsIDMsIDMsIHNlbGZbJ2NvbG9yJ10sIDAuNCwgc2VsZlsnY29sb3JEJ10sIGB0aW1lQXhpc0VudF8ke2lkfWAsIDEuNSwgJ3RpbWVBeGlzRW50JykNCiAgICAgICAgICBfdGhpcy5kcmF3VHh0KHN2ZywgeCArIGV2V2lkdGggLyAyLCB5ICsgZXZIaWdodCArIDIwLCAxMCwgW3NlbGZbJ25hbWUnXS5zcGxpdCgiICIpLmpvaW4oIiAiKV0sICJncmV5IiwgMTYsIGB0aW1lVGV4dF8ke2lkfWAsICd0aW1lVGV4dCcpOw0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgIGlmIChsYXkgPT0gMCkgew0KICAgICAgICAgICAgX3RoaXMuZHJhd1JlY3Qoc3ZnLCB4IC0gMiwgeSAtIDIwLCBldlRXaWR0aCwgMTAwLCA2LCA2LCBzZWxmWydjb2xvciddLCAwLjMsICd3aGl0ZScsIGB0aW1lQXhpc0VudEJfJHtpZH1gLCAxLjUsICd0aW1lQXhpc0VudCcpDQogICAgICAgICAgfQ0KICAgICAgICAgIGxldCBhcmVhID0gW1t4ICsgY3IsIHkgKyBldkhpZ2h0IC0gY3JdLCBbeCAtIGNyICsgZXZXaWR0aCwgeSArIGV2SGlnaHQgLSBjcl0sIFt4ICsgZXZXaWR0aCAvIDIsIHldXTsNCiAgICAgICAgICBfdGhpcy5kcmF3VHJpYW5nbGUoc3ZnLCBzZWxmWydjb2xvciddLCBhcmVhLCBzZWxmWydjb2xvciddLCAxLCBjciAqIDIsImVudEUiLGBlbnRFXyR7ZGF0YVsnaWQnXX1gKTsNCiAgICAgICAgfQ0KICAgICAgICBhZGREYXRhW2luZHhdWyd0aW1lWCddID0geDsNCiAgICAgICAgYWRkRGF0YVtpbmR4XVsndGltZVcnXSA9IGV2V2lkdGgNCiAgICAgIH0pDQoNCiAgICAgIGQzLnNlbGVjdEFsbCgnLnRpbWVUZXh0JykuYXR0cigib3BhY2l0eSIsIDApDQogICAgICBfdGhpcy5kcmF3RW50aXR5TG9jYXRpb24gPSBhZGREYXRhOw0KICAgIH0sDQogICAgZHJhd1RyaWFuZ2xlKHN2ZywgY29sb3IsIHBvaW50cywgc3Ryb2tlLCBvcGFjaXR5ID0gMSwgc3Ryb2tlVyA9IDE1LGNsYXNzTmEsaWROYSkgew0KICAgICAgY29uc3QgX3RoaXMgPSB0aGlzOw0KICAgICAgc3ZnLmFwcGVuZCgicG9seWdvbiIpDQogICAgICAgIC5hdHRyKCJwb2ludHMiLCBwb2ludHMpDQogICAgICAgIC5hdHRyKCJmaWxsIiwgY29sb3IpDQogICAgICAgIC5hdHRyKCJpZCIsIGlkTmEpDQogICAgICAgIC5hdHRyKCJjbGFzcyIsIGNsYXNzTmEpDQogICAgICAgIC5hdHRyKCJzdHJva2UtbGluZWpvaW4iLCAicm91bmQiKQ0KICAgICAgICAuYXR0cigib3BhY2l0eSIsIG9wYWNpdHkpDQogICAgICAgIC5hdHRyKCJzdHJva2UiLCBzdHJva2UpDQogICAgICAgIC5vbigibW91c2VvdmVyIiwgZnVuY3Rpb24gKGQpIHsNCiAgICAgICAgICAvLyBkMy5zZWxlY3QodGhpcykuYXR0cigiciIsIHIgKiAxLjEpDQogICAgICAgICAgbGV0IGNsYXNzTiA9IGQzLnNlbGVjdCh0aGlzKS5hdHRyKCJjbGFzcyIpOw0KICAgICAgICAgIGxldCBpZE4gPSBkMy5zZWxlY3QodGhpcykuYXR0cigiaWQiKS5zcGxpdCgiXyIpWzFdDQogICAgICAgICAgX3RoaXMub3ZlckVudGl0eUlkID0gaWRODQogICAgICAgICAgbGV0IHNob3dSZWwgPSBfdGhpcy5zaG93RW50aXR5UmVsSWRMaXN0DQogICAgICAgICAgaWYgKCFzaG93UmVsLmluY2x1ZGVzKHBhcnNlSW50KGlkTikpKSB7DQogICAgICAgICAgICBzaG93UmVsLnB1c2gocGFyc2VJbnQoaWROKSkNCiAgICAgICAgICAgIF90aGlzLnNob3dFbnRpdHlSZWxJZE92ZXJTdGF0ZSA9IDA7DQogICAgICAgICAgfQ0KICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgX3RoaXMuc2hvd0VudGl0eVJlbElkT3ZlclN0YXRlID0gMTsNCiAgICAgICAgICB9DQogICAgICAgICAgX3RoaXMuc2hvd0VudGl0eVJlbElkTGlzdCA9IHNob3dSZWw7DQogICAgICAgICAgaWYgKGNsYXNzTiA9PSAnbGluZVBvaW50Jykgew0KICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmF0dHIoIm9wYWNpdHkiLCAxKS5hdHRyKCJyIiwgNSkNCiAgICAgICAgICB9DQogICAgICAgICAgLy8gZWxzZSB7DQogICAgICAgICAgLy8gICBkMy5zZWxlY3RBbGwoIi5mIiArIGRhdGFbJ2lkJ10pDQogICAgICAgICAgLy8gICAgIC5hdHRyKCJ0cmFuc2Zvcm0iLCBmdW5jdGlvbiAoZCkgew0KICAgICAgICAgIC8vICAgICAgIGxldCB0cmFuc2Zvcm1kID0gZDMuc2VsZWN0KHRoaXMpLmF0dHIoInRyYW5zZm9ybSIpDQogICAgICAgICAgLy8gICAgICAgcmV0dXJuIHRyYW5zZm9ybWQuc3BsaXQoIiAiKVswXSArICIgc2NhbGUoMS4xKSINCiAgICAgICAgICAvLyAgICAgfSkNCg0KICAgICAgICAgIC8vICAgZDMuc2VsZWN0QWxsKCIuYmFzaWNSZWwiKQ0KICAgICAgICAgIC8vICAgICAuYXR0cigiY2xhc3MiLCBmdW5jdGlvbiAoZCkgew0KICAgICAgICAgIC8vICAgICAgIGxldCBjbGFzc04gPSBkMy5zZWxlY3QodGhpcykuYXR0cigiY2xhc3MiKTsNCiAgICAgICAgICAvLyAgICAgICBsZXQgY2xhc3NOTGlzdCA9IGNsYXNzTi5zcGxpdCgiICIpOw0KICAgICAgICAgIC8vICAgICAgIGxldCBqZyA9IDA7DQogICAgICAgICAgLy8gICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjbGFzc05MaXN0Lmxlbmd0aCAtIDE7IGkrKykgew0KICAgICAgICAgIC8vICAgICAgICAgaWYgKCdzb3VyY2UnICsgZGF0YVsnaWQnXSA9PSBjbGFzc05MaXN0W2ldKSB7IGpnID0gMTsgfQ0KICAgICAgICAgIC8vICAgICAgICAgaWYgKCd0YXJnZXQnICsgZGF0YVsnaWQnXSA9PSBjbGFzc05MaXN0W2ldKSB7IGpnID0gMTsgfQ0KICAgICAgICAgIC8vICAgICAgIH0NCiAgICAgICAgICAvLyAgICAgICBpZiAoamcgPT0gMSkgew0KICAgICAgICAgIC8vICAgICAgICAgLy8gY2xhc3NOICs9ICIgYWN0aXZlUyI7DQogICAgICAgICAgLy8gICAgICAgfQ0KICAgICAgICAgIC8vICAgICAgIHJldHVybiBjbGFzc047DQogICAgICAgICAgLy8gICAgIH0pDQogICAgICAgICAgLy8gfQ0KICAgICAgICB9KQ0KICAgICAgICAub24oIm1vdXNlbGVhdmUiLCBmdW5jdGlvbiAoZCkgew0KICAgICAgICAgIC8vIGQzLnNlbGVjdCh0aGlzKS5hdHRyKCJyIiwgcikNCg0KICAgICAgICAgIF90aGlzLm92ZXJFbnRpdHlJZCA9ICIiLy9fdGhpcy5jdXJFbnRJZDsNCiAgICAgICAgICBsZXQgY2xhc3NOID0gZDMuc2VsZWN0KHRoaXMpLmF0dHIoImNsYXNzIik7DQoNCiAgICAgICAgICBsZXQgaWROID0gZDMuc2VsZWN0KHRoaXMpLmF0dHIoImlkIikuc3BsaXQoIl8iKVsxXQ0KICAgICAgICAgIGxldCBzaG93UmVsID0gX3RoaXMuc2hvd0VudGl0eVJlbElkTGlzdA0KICAgICAgICAgIGlmIChfdGhpcy5zaG93RW50aXR5UmVsSWRPdmVyU3RhdGUgPT0gMSkgew0KICAgICAgICAgICAgc2hvd1JlbC5wdXNoKHBhcnNlSW50KGlkTikpDQogICAgICAgICAgfQ0KICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgc2hvd1JlbC5zcGxpY2Uoc2hvd1JlbC5pbmRleE9mKHBhcnNlSW50KGlkTikpLCAxKQ0KICAgICAgICAgIH0NCiAgICAgICAgICBfdGhpcy5zaG93RW50aXR5UmVsSWRMaXN0ID0gc2hvd1JlbDsNCg0KICAgICAgICAgIGlmIChjbGFzc04gPT0gJ2xpbmVQb2ludCcpIHsNCiAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hdHRyKCJvcGFjaXR5IiwgMCkuYXR0cigiciIsIDUpDQogICAgICAgICAgfQ0KICAgICAgICAgIC8vIGVsc2Ugew0KICAgICAgICAgIC8vICAgZDMuc2VsZWN0QWxsKCIuZiIgKyBkYXRhWydpZCddKQ0KICAgICAgICAgIC8vICAgICAuYXR0cigidHJhbnNmb3JtIiwgZnVuY3Rpb24gKGQpIHsNCiAgICAgICAgICAvLyAgICAgICBsZXQgdHJhbnNmb3JtZCA9IGQzLnNlbGVjdCh0aGlzKS5hdHRyKCJ0cmFuc2Zvcm0iKQ0KICAgICAgICAgIC8vICAgICAgIHJldHVybiB0cmFuc2Zvcm1kLnNwbGl0KCIgIilbMF0gKyAiIHNjYWxlKDEpIg0KICAgICAgICAgIC8vICAgICB9KQ0KICAgICAgICAgIC8vICAgZDMuc2VsZWN0KCIjZ3JhcGhQYW5lbCIpLnNlbGVjdEFsbCgicGF0aCIpDQogICAgICAgICAgLy8gICAgIC5hdHRyKCJjbGFzcyIsIGZ1bmN0aW9uIChkKSB7DQogICAgICAgICAgLy8gICAgICAgbGV0IHRoaXNTZWxlY3QgPSBkMy5zZWxlY3QodGhpcykNCiAgICAgICAgICAvLyAgICAgICBsZXQgY2xhc3NOID0gdGhpc1NlbGVjdC5hdHRyKCJjbGFzcyIpOw0KICAgICAgICAgIC8vICAgICAgIGxldCBjbGFzc05MaXN0ID0gY2xhc3NOLnNwbGl0KCIgIikNCiAgICAgICAgICAvLyAgICAgICBpZiAoY2xhc3NOTGlzdFtjbGFzc05MaXN0Lmxlbmd0aCAtIDFdID09ICJhY3RpdmVTIikgew0KICAgICAgICAgIC8vICAgICAgICAgY2xhc3NOID0gIiI7DQogICAgICAgICAgLy8gICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNsYXNzTkxpc3QubGVuZ3RoIC0gMTsgaSsrKSB7DQogICAgICAgICAgLy8gICAgICAgICAgIGNsYXNzTiArPSAiICIgKyBjbGFzc05MaXN0W2ldOw0KICAgICAgICAgIC8vICAgICAgICAgfQ0KICAgICAgICAgIC8vICAgICAgIH0NCiAgICAgICAgICAvLyAgICAgICByZXR1cm4gY2xhc3NODQogICAgICAgICAgLy8gICAgIH0pDQogICAgICAgICAgLy8gfQ0KICAgICAgICB9KQ0KICAgICAgICAub24oImNsaWNrIiwgZnVuY3Rpb24gKGQpIHsNCg0KICAgICAgICAgIGxldCBpZE4gPSBkMy5zZWxlY3QodGhpcykuYXR0cigiaWQiKS5zcGxpdCgiXyIpWzFdDQogICAgICAgICAgbGV0IHNob3dSZWwgPSBfdGhpcy5zaG93RW50aXR5UmVsSWRMaXN0Ow0KICAgICAgICAgIC8vICAtIF90aGlzLnNob3dFbnRpdHlSZWxJZE92ZXJTdGF0ZTsNCiAgICAgICAgICBpZiAoIXNob3dSZWwuaW5jbHVkZXMocGFyc2VJbnQoaWROKSkpIHsNCiAgICAgICAgICAgIHNob3dSZWwgPSBbKHBhcnNlSW50KGlkTikpXQ0KICAgICAgICAgICAgX3RoaXMuc2hvd0VudGl0eVJlbElkT3ZlclN0YXRlID0gMTsNCiAgICAgICAgICB9DQogICAgICAgICAgZWxzZSBpZiAoc2hvd1JlbC5pbmNsdWRlcyhwYXJzZUludChpZE4pKSkgew0KICAgICAgICAgICAgLy8gc2hvd1JlbC5maWx0ZXIoaXRlbT0+e3JldHVybiBpdGVtPT1wYXJzZUludChpZE4pfSkNCiAgICAgICAgICAgIF90aGlzLnNob3dFbnRpdHlSZWxJZE92ZXJTdGF0ZSA9IDA7DQogICAgICAgICAgICBzaG93UmVsLnNwbGljZShzaG93UmVsLmluZGV4T2YocGFyc2VJbnQoaWROKSksIDEpDQogICAgICAgICAgfQ0KICAgICAgICAgIF90aGlzLnNob3dFbnRpdHlSZWxJZExpc3QgPSBzaG93UmVsOw0KDQogICAgICAgICAgLy8gZDMuc2VsZWN0KHRoaXMpLmF0dHIoInIiLCByKTsNCiAgICAgICAgICAvLyBkMy5zZWxlY3RBbGwoIi5mIiArIGRhdGFbJ2lkJ10pDQogICAgICAgICAgLy8gICAuYXR0cigidHJhbnNmb3JtIiwgZnVuY3Rpb24gKGQpIHsNCiAgICAgICAgICAvLyAgICAgbGV0IHRyYW5zZm9ybWQgPSBkMy5zZWxlY3QodGhpcykuYXR0cigidHJhbnNmb3JtIikNCiAgICAgICAgICAvLyAgICAgcmV0dXJuIHRyYW5zZm9ybWQuc3BsaXQoIiAiKVswXSArICIgc2NhbGUoMSkiDQogICAgICAgICAgLy8gICB9KQ0KICAgICAgICAgIGxldCB0aGlzSWQgPSB0aGlzLmlkLnNwbGl0KCJfIilbMV07DQogICAgICAgICAgX3RoaXMuY3VyRW50SWQgPSB0aGlzSWQ7DQogICAgICAgICAgbGV0IHRoaXNEYXRhID0gX3RoaXMuZHJhd0VudGl0eUxvY2F0aW9uLmZpbmQoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGFbJ2lkJ10gPT0gdGhpc0lkIH0pDQogICAgICAgICAgbGV0IHRoaXNUaW1lID0gdGhpc0RhdGFbJ3RpbWUnXTsNCiAgICAgICAgICBfdGhpcy5jbGlja19FbnQodGhpc1RpbWUpOw0KICAgICAgICAgIGxldCBwc3ZnID0gZDMuc2VsZWN0KCIjZW50RyIpOw0KICAgICAgICAgIGxldCBkdyA9IHBzdmcuYXR0cigid2lkdGgiKTsNCiAgICAgICAgICBsZXQgZGggPSBwc3ZnLmF0dHIoImhlaWdodCIpOw0KICAgICAgICAgIHBzdmcucmVtb3ZlKCk7DQogICAgICAgICAgbGV0IHN2ZyA9IGQzLnNlbGVjdCgnI2VkaXRFbnQnKS5hcHBlbmQoImciKS5hdHRyKCJpZCIsICJlbnRHIikuYXR0cigid2lkdGgiLCBkdykuYXR0cigiaGVpZ2h0IiwgZGgpOw0KICAgICAgICAgIF90aGlzLmRyYXdFbnRpdHkoc3ZnLCBkdy8yLCAxMDAsIDUwLCB0aGlzRGF0YSwxKQ0KICAgICAgICAgIC8vIGlmICh0aGlzRGF0YVsndHlwZSddID09IDAgKSB7DQogICAgICAgICAgICAvLyBfdGhpcy5kcmF3RW50aXR5VGltZUF4aXMoc3ZnLHRoaXNEYXRhLFtkdy8yLDEwMCwxMF0pOw0KICAgICAgICAvLyB9DQogICAgICAgICAgLy8gY29uc29sZS5sb2codGhpc1RpbWUsdGhpc0lkLHRoaXNEYXRhKQ0KICAgICAgICB9KQ0KICAgICAgICAuYXR0cigic3Ryb2tlLXdpZHRoIiwgc3Ryb2tlVyk7DQogICAgfSwNCiAgICBkcmF3cG9seWdvbihzdmcsIGNvbG9yLCBhcmVhcywgc3Ryb2tlLCBvcGFjaXR5ID0gMSkgew0KICAgICAgc3ZnLmFwcGVuZCgicG9seWdvbiIpDQogICAgICAgIC5hdHRyKCJwb2ludHMiLCBhcmVhcykNCiAgICAgICAgLmF0dHIoImZpbGwiLCBjb2xvcikNCiAgICAgICAgLmF0dHIoIm9wYWNpdHkiLCBvcGFjaXR5KQ0KICAgICAgICAuYXR0cigic3Ryb2tlIiwgc3Ryb2tlKQ0KICAgICAgICAuYXR0cigic3Ryb2tlLXdpZHRoIiwgIjEuNXB4Iik7DQogICAgfSwNCiAgICBkcmF3RW50aXR5VGltZUF4aXMoc3ZnLCBlbnREYXRhLGNvcHk9MCkgew0KDQogICAgICBjb25zdCBfdGhpcyA9IHRoaXM7DQogICAgICBsZXQgeCA9IGVudERhdGFbJ3gnXTsNCiAgICAgIGxldCByID0gZW50RGF0YVsnciddOw0KICAgICAgbGV0IHkgPSBlbnREYXRhWyd5J10gKyByIC8gMjsNCiAgICAgIGlmKGNvcHkhPTApew0KICAgICAgICB4ID0gY29weVswXTsNCiAgICAgICAgciA9IGNvcHlbMl07DQogICAgICAgIHkgPSBjb3B5WzFdK3IvMjsNCiAgICAgIH0NCiAgICAgIGxldCBwYXRoMSA9IGQzLnBhdGgoKTsNCiAgICAgIGxldCBqZzEgPSAwOw0KICAgICAgbGV0IHBhdGgyID0gZDMucGF0aCgpOw0KICAgICAgbGV0IGpnMiA9IDA7DQogICAgICBsZXQgZGFJZCA9IGVudERhdGFbJ2lkJ10NCiAgICAgIGxldCBlbnREYXRhTyA9IF90aGlzLmRyYXdFbnRpdHlMb2NhdGlvbjsNCiAgICAgIGxldCBzdW1Ub3RhbER1cmF0aW9uID0gX3RoaXMuc3VtVG90YWxEdXJhdGlvbjsNCiAgICAgIGxldCB3aWR0aFNjYWxlID0gZDMuc2NhbGVMaW5lYXIoWzAsIHN1bVRvdGFsRHVyYXRpb25dLCBbMCwgTWF0aC5QSV0pOw0KICAgICAgbGV0IHRpbWVTdGVwUiA9IDA7DQogICAgICBsZXQgdGltZVN0YXJ0UiA9IC1NYXRoLlBJIC8gMjsNCiAgICAgIGxldCBpbnRlciA9IDA7DQogICAgICBsZXQgc29ucyA9IHRvb2xzLmRlZXBDbG9uZShlbnREYXRhWydzb24nXSk7DQogICAgICBsZXQgcmVsTGlzdCA9IFtdOw0KICAgICAgbGV0IHJlbFJvb3RMaXN0ID0gW107DQogICAgICBsZXQgcHNOdW0gPSAwLjU7DQogICAgICBpZiAoKHNvbnMubGVuZ3RoID4gMCkpIHsNCiAgICAgICAgaW50ZXIgPSAxNA0KICAgICAgfQ0KDQogICAgICBsZXQgcmVsRGF0YSA9IF90aGlzLnJlbERhdGE7DQogICAgICBsZXQgb0RhdGEgPSBfdGhpcy5kcmF3RW50aXR5TG9jYXRpb247DQogICAgICBsZXQgYmFzaWNSZWwgPSByZWxEYXRhWydiYXNpY1JlbCddOw0KICAgICAgZm9yIChsZXQgcmUgPSAwOyByZSA8IGJhc2ljUmVsLmxlbmd0aDsgcmUrKykgew0KDQogICAgICAgIGxldCBzb3JjZUlkID0gYmFzaWNSZWxbcmVdWzBdOw0KICAgICAgICBsZXQgdGFyZ2V0SWQgPSBiYXNpY1JlbFtyZV1bMV07DQogICAgICAgIGxldCBjTm9kZSA9ICcnOw0KICAgICAgICBpZiAoc29yY2VJZCA9PSBkYUlkKSB7DQogICAgICAgICAgY05vZGUgPSBvRGF0YS5maW5kKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkWydpZCddID09IHRhcmdldElkIH0pOw0KICAgICAgICAgIHJlbExpc3QucHVzaCh0YXJnZXRJZCk7DQogICAgICAgICAgcmVsUm9vdExpc3QucHVzaChjTm9kZVsncm9vdEluZGV4J10pOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKHRhcmdldElkID09IGRhSWQpIHsNCiAgICAgICAgICBjTm9kZSA9IG9EYXRhLmZpbmQoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGRbJ2lkJ10gPT0gc29yY2VJZCB9KTsNCiAgICAgICAgICByZWxMaXN0LnB1c2goc29yY2VJZCk7DQogICAgICAgICAgcmVsUm9vdExpc3QucHVzaChjTm9kZVsncm9vdEluZGV4J10pOw0KICAgICAgICB9DQogICAgICB9Ow0KICAgICAgLy8gaWYoZW50RGF0YVtdKSANCiAgICAgIGxldCB3bGluZSA9IDA7DQogICAgICBsZXQgc3VtVG90YWxEdXJhdGlvbkYgPSAwOw0KICAgICAgZW50RGF0YU8uZm9yRWFjaCgoc2VsZiwgaW5keCwgYXJyKSA9PiB7DQogICAgICAgIGxldCB0b3RhbER1cmF0aW9uVmFsdWUgPSBzZWxmWyd0b3RhbER1cmF0aW9uJ107DQogICAgICAgIGxldCB0aW1lTGlzdCA9IHNlbGZbJ3RpbWUnXTsNCiAgICAgICAgbGV0IGxheW91dCA9IHNlbGZbJ2xheW91dCddOw0KICAgICAgICBsZXQgcm9vdEluZGV4ID0gc2VsZlsncm9vdEluZGV4J107DQogICAgICAgIGxldCBkdXJhdGlvbiA9IHRvb2xzLnRpbWUyc2Vjb25kcyh0aW1lTGlzdFsxXSkgLSB0b29scy50aW1lMnNlY29uZHModGltZUxpc3RbMF0pOw0KICAgICAgICB0aW1lU3RlcFIgPSB3aWR0aFNjYWxlKGR1cmF0aW9uKTsNCiAgICAgICAgaWYgKCFyZWxSb290TGlzdC5pbmNsdWRlcyhyb290SW5kZXgpKSB7DQogICAgICAgICAgd2xpbmUgKz0gdGltZVN0ZXBSICogcHNOdW07DQogICAgICAgICAgc3VtVG90YWxEdXJhdGlvbkYgKz0gZHVyYXRpb247DQogICAgICAgIH0NCiAgICAgIH0pDQogICAgICBsZXQgd2lkdGhTY2FsZUEgPSBkMy5zY2FsZUxpbmVhcihbMCwgc3VtVG90YWxEdXJhdGlvbiAtIHN1bVRvdGFsRHVyYXRpb25GXSwgWzAsIE1hdGguUEkgLSB3bGluZV0pOw0KICAgICAgLy8gaWYocm9vdEVudGl0eUxpc3QubGVuZ3RoPT0wKXsNCiAgICAgIC8vICAgd2lkdGhTY2FsZUEgPSB3aWR0aFNjYWxlDQogICAgICAvLyB9DQogICAgICAvLyBsZXQgd2xpbmUgPSAwOw0KICAgICAgZW50RGF0YU8uZm9yRWFjaCgoc2VsZiwgaW5keCwgYXJyKSA9PiB7DQogICAgICAgIGxldCB0b3RhbER1cmF0aW9uVmFsdWUgPSBzZWxmWyd0b3RhbER1cmF0aW9uJ107DQogICAgICAgIGxldCB0aW1lTGlzdCA9IHNlbGZbJ3RpbWUnXTsNCiAgICAgICAgbGV0IGxheW91dCA9IHNlbGZbJ2xheW91dCddOw0KICAgICAgICBsZXQgcm9vdEluZGV4ID0gc2VsZlsncm9vdEluZGV4J107DQogICAgICAgIGxldCBjSWQgPSBzZWxmWydpZCddOw0KICAgICAgICBsZXQgZHVyYXRpb24gPSB0b29scy50aW1lMnNlY29uZHModGltZUxpc3RbMV0pIC0gdG9vbHMudGltZTJzZWNvbmRzKHRpbWVMaXN0WzBdKTsNCiAgICAgICAgdGltZVN0ZXBSID0gd2lkdGhTY2FsZShkdXJhdGlvbik7DQogICAgICAgIGlmICghcmVsUm9vdExpc3QuaW5jbHVkZXMocm9vdEluZGV4KSkgew0KICAgICAgICAgIGlmIChyZWxSb290TGlzdC5sZW5ndGggIT0gMCkgew0KICAgICAgICAgICAgdGltZVN0ZXBSID0gcHNOdW0gKiB3aWR0aFNjYWxlKGR1cmF0aW9uKTsNCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgdGltZVN0ZXBSID0gd2lkdGhTY2FsZUEoZHVyYXRpb24pDQogICAgICAgIH0NCiAgICAgICAgbGV0IGVuZEFuZ2xldCA9IHRpbWVTdGFydFIgKyB0aW1lU3RlcFI7DQogICAgICAgIHZhciBkYXRhc2V0ID0geyBzdGFydEFuZ2xlOiB0aW1lU3RhcnRSLCBlbmRBbmdsZTogZW5kQW5nbGV0IH07IC8v5Yib5bu65LiA5Liq5byn55Sf5oiQ5ZmoDQogICAgICAgIHRpbWVTdGFydFIgPSBlbmRBbmdsZXQ7DQogICAgICAgIGxldCBjb2xvciA9ICdibHVlJzsNCiAgICAgICAgbGV0IHJoID0gMzA7DQogICAgICAgIGxldCBoID0gcmg7DQogICAgICAgIGxldCBuaCA9IDA7DQogICAgICAgIGlmIChyZWxSb290TGlzdC5sZW5ndGggIT0gMCkgew0KICAgICAgICAgIGggPSByaCAqIDAuMzIgKyByaCAqIDAuNiAtIDMgKiBsYXlvdXQ7DQogICAgICAgICAgbmggPSByaCAqIDAuMzsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoIXJlbFJvb3RMaXN0LmluY2x1ZGVzKHNlbGZbJ3Jvb3RJbmRleCddKSkgew0KICAgICAgICAgIGggPSByaCAqIDAuNzsNCiAgICAgICAgICBuaCA9IGggKiAwICsgaCAqIDAuNjsNCiAgICAgICAgfQ0KICAgICAgICBlbHNlIHsNCiAgICAgICAgICBkYXRhc2V0LnN0YXJ0QW5nbGUgKz0gMC4wMDM7DQogICAgICAgICAgZGF0YXNldC5lbmRBbmdsZSAtPSAwLjAwMzsNCg0KICAgICAgICB9DQogICAgICAgIHZhciBhcmNQYXRoID0gZDMuYXJjKCkNCiAgICAgICAgICAuaW5uZXJSYWRpdXMociArIGludGVyICsgbmgpDQogICAgICAgICAgLm91dGVyUmFkaXVzKHIgKyBpbnRlciArIGgpOw0KICAgICAgICB2YXIgcGF0aEFyYyA9IGFyY1BhdGgoZGF0YXNldCk7DQogICAgICAgIGxldCBhcmM7DQogICAgICAgIGlmIChyZWxSb290TGlzdC5sZW5ndGggIT0gMCkgew0KICAgICAgICAgIGxldCBqaWFudG91UGF0aCA9IGQzLnBhdGgoKTsNCiAgICAgICAgICBqaWFudG91UGF0aC5hcmMoeCwgeSAtIHIgLyAyLCByICsgaCArIGludGVyLCAtIE1hdGguUEksIDApOw0KDQogICAgICAgICAgLy8gX3RoaXMuZHJhd1RpbWVMaW5lKF90aGlzLmFyY0csIGppYW50b3VQYXRoLCAicmdiKDIwMCwyMDAsMjAwKSIsIDEsICc5LDUnLCAndGltZUxheW91dCAnLCAndGltZUxheW91dCAnKTsNCg0KICAgICAgICAgIGlmIChyZWxSb290TGlzdC5pbmNsdWRlcyhzZWxmWydyb290SW5kZXgnXSkpIHsNCiAgICAgICAgICAgIGlmIChyZWxMaXN0LmluY2x1ZGVzKHBhcnNlSW50KHNlbGZbJ2lkJ10pKSkgew0KICAgICAgICAgICAgaWYoKGNvcHkhPTApICYmKGpnMT09MCkpew0KICAgICAgICAgICAgICBqZzE9MQ0KICAgICAgICAgICAgICBwYXRoMS5tb3ZlVG8oMiwgMjUpDQogICAgICAgICAgICAgIHBhdGgxLmxpbmVUbygxNTAsMjUpDQogICAgICAgICAgICAgIGxldCBhbmcgPSBkYXRhc2V0LnN0YXJ0QW5nbGUrTWF0aC5QSS8yDQogICAgICAgICAgICAgIF90aGlzLmRyYXdUeHQoc3ZnLCA3MCwgMjAsIDEwMCwgWyJBc3NvY2lhdGVkIENvbmNlcHQiXSwgImdyZXkiLCAxNSwgYHRleHRzXzFgKTsNCiAgICAgICAgICAgICAgLy8gcGF0aDEubGluZVRvKCh4KzEwKSwoeS1yLzIrMTApKQ0KICAgICAgICAgICAgICBwYXRoMS5saW5lVG8oKHgtKHIgKyBpbnRlciArIGgpKk1hdGguY29zKGFuZykpLCh5LXIvMi0ociArIGludGVyICsgaCkqTWF0aC5zaW4oYW5nKSkpDQogICAgICAgICAgICAgIF90aGlzLmRyYXdUaW1lTGluZShzdmcsIHBhdGgxLCAicmdiKDIwMCwyMDAsMjAwKSIsIDIsICc5LDUnLCAnbW0gJywgJ21tICcpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICBhcmMgPSBfdGhpcy5kcmF3QXJjKHN2ZywgeCwgeSAtIHIgLyAyLCBwYXRoQXJjLCBzZWxmWydjb2xvciddLCBzZWxmWydjb2xvciddLCBgdGltZUF4aXNGb3IgZiR7ZW50RGF0YVsnaWQnXX0gJHtzZWxmWydpZCddfWAsICcwJywgMCwgMSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgLy8gcGF0aDEubGluZVRvKDAsMCkgDQogICAgICAgICAgICAgIGFyYyA9IF90aGlzLmRyYXdBcmMoc3ZnLCB4LCB5IC0gciAvIDIsIHBhdGhBcmMsICJ3aGl0ZSIsIHNlbGZbJ2NvbG9yJ10sIGB0aW1lQXhpc0ZvciBmJHtlbnREYXRhWydpZCddfSAke3NlbGZbJ2lkJ119YCwgJzAnLCAwLjAsIDAuNCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgfQ0KICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgYXJjID0gX3RoaXMuZHJhd0FyYyhzdmcsIHgsIHkgLSByIC8gMiwgcGF0aEFyYywgc2VsZlsnY29sb3InXSwgc2VsZlsnY29sb3InXSwgYHRpbWVBeGlzRm9yIGYke2VudERhdGFbJ2lkJ119ICR7c2VsZlsnaWQnXX1gLCAnMCcsIDAsIDAuMik7DQoNCiAgICAgICAgICB9DQogICAgICAgICAgaWYoZGFJZCA9PSBzZWxmWydpZCddKXsNCiAgICAgICAgICAgIGxldCBjb2xvciA9IGQzLnNlbGVjdChgI2VudENpcmNsZV8ke3NlbGZbJ2lkJ119YCkuYXR0cigiZmlsbCIpDQogICAgICAgICAgICBsZXQgZGEgPSB0b29scy5kZWVwQ2xvbmUoZGF0YXNldCk7DQogICAgICAgICAgICBkYS5zdGFydEFuZ2xlID0gKGRhdGFzZXQuZW5kQW5nbGUrZGF0YXNldC5zdGFydEFuZ2xlKS8yLTAuMDAxOw0KICAgICAgICAgICAgZGEuZW5kQW5nbGUgPSAoZGF0YXNldC5lbmRBbmdsZStkYXRhc2V0LnN0YXJ0QW5nbGUpLzIrMC4wMDAxOw0KICAgICAgICAgICAgbGV0IGFyY1BhID0gZDMuYXJjKCkNCiAgICAgICAgICAgIC5pbm5lclJhZGl1cyhyICsgaW50ZXIgKyAobmgraCkvMikNCiAgICAgICAgICAgIC5vdXRlclJhZGl1cyhyICsgaW50ZXIgKyAobmgraCkvMik7DQogICAgICAgICAgICBsZXQgcGF0aEEgPSBhcmNQYShkYSk7DQogICAgICAgICAgICBpZigoY29weSE9MCkgJiYoamcyPT0wKSl7DQogICAgICAgICAgICAgIGpnMj0xDQogICAgICAgICAgICAgIHBhdGgyLm1vdmVUbyg0MDAsIDEyNSkNCiAgICAgICAgICAgICAgcGF0aDIubGluZVRvKDI5MCwxMjUpDQogICAgICAgICAgICAgIGxldCBhbmcgPSBkYS5zdGFydEFuZ2xlKzAuMDAxK01hdGguUEkvMg0KICAgICAgICAgICAgICBfdGhpcy5kcmF3VHh0KHN2ZywgMzUwLCAxMjAsIDEwMCwgWyJDdXJyZW50IENvbmNlcHQiXSwgImdyZXkiLCAxNSwgYHRleHRzXzFgKTsNCiAgICAgICAgICAgICAgLy8gcGF0aDEubGluZVRvKCh4KzEwKSwoeS1yLzIrMTApKQ0KICAgICAgICAgICAgICBwYXRoMi5saW5lVG8oKHgtKHIgKyBpbnRlciArIGgpKk1hdGguY29zKGFuZykpLCh5LXIvMi0ociArIGludGVyICsgaCkqTWF0aC5zaW4oYW5nKSkpDQogICAgICAgICAgICAgIF90aGlzLmRyYXdUaW1lTGluZShzdmcsIHBhdGgyLCAicmdiKDIwMCwyMDAsMjAwKSIsIDIsICc5LDUnLCAnbW0gJywgJ21tICcpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgX3RoaXMuZHJhd0FyYyhzdmcsIHgsIHkgLSByIC8gMiwgcGF0aEEsIGNvbG9yLCBzZWxmWydjb2xvciddLCBgdGltZUF4aXNzZWxmIGYke3NlbGZbJ2lkJ119YCwgJzAnLCA2LCAxKTsNCiAgICAgICAgICB9DQogICAgICAgICAgICBpZihjb3B5IT0wKXsNCiAgICAgICAgICAgICAgLy8gX3RoaXMuZHJhd1RpbWVMaW5lKHN2ZywgcGF0aDEsICJyZ2IoMjAwLDIwMCwyMDApIiwgMywgJzksNScsICdtbSAnLCAnbW0gJyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgYXJjLm9uKCJtb3VzZW92ZXIiLCBmdW5jdGlvbiAoZCkgew0KICAgICAgICAgICAgbGV0IGNsYXNzTiA9IGQzLnNlbGVjdCh0aGlzKS5hdHRyKCJjbGFzcyIpOw0KICAgICAgICAgICAgbGV0IHNJZCA9IChjbGFzc04uc3BsaXQoIiAiKVsxXSArICIiKS5zbGljZSgxKTsNCiAgICAgICAgICAgIGxldCB0SWQgPSBjbGFzc04uc3BsaXQoIiAiKVsyXTsNCiAgICAgICAgICAgIF90aGlzLnNob3dFbnRpdHlSZWxJZExpc3QgPSBbc0lkXQ0KICAgICAgICAgICAgX3RoaXMub3ZlckVudGl0eUlkID0gc0lkOw0KICAgICAgICAgICAgX3RoaXMub3ZlclRhcmdldEVudGl0eUlkID0gdElkOw0KICAgICAgICAgIH0pDQogICAgICAgICAgDQogICAgICAgICAgYXJjLm9uKCJtb3VzZWxlYXZlIiwgZnVuY3Rpb24gKGQpIHsNCiAgICAgICAgICAgIGxldCBjbGFzc04gPSBkMy5zZWxlY3QodGhpcykuYXR0cigiY2xhc3MiKTsNCiAgICAgICAgICAgIGxldCBzSWQgPSAoY2xhc3NOLnNwbGl0KCIgIilbMV0gKyAiIikuc2xpY2UoMSk7DQogICAgICAgICAgICBsZXQgc2hvd1JlbCA9IF90aGlzLnNob3dFbnRpdHlSZWxJZExpc3Q7DQogICAgICAgICAgICBfdGhpcy5vdmVyVGFyZ2V0RW50aXR5SWQgPSAnJzsNCiAgICAgICAgICAgIF90aGlzLm92ZXJFbnRpdHlJZCA9ICIiLy9fdGhpcy5jdXJFbnRJZDsNCiAgICAgICAgICAgIGlmIChfdGhpcy5zaG93RW50aXR5UmVsSWRPdmVyU3RhdGUgPT0gMSkgew0KICAgICAgICAgICAgICBzaG93UmVsLnB1c2gocGFyc2VJbnQoc0lkKSkNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICBzaG93UmVsLnNwbGljZShzaG93UmVsLmluZGV4T2YocGFyc2VJbnQoc0lkKSksIDEpDQogICAgICAgICAgICB9DQogICAgICAgICAgfSkNCiAgICAgICAgfQ0KICAgICAgfSkNCiAgICB9LA0KICAgIGRyYXdFbnRpdHkoc3ZnLCB4LCB5LCByLCBkYXRhLGNvcHk9MCkgew0KICAgICAgY29uc3QgX3RoaXMgPSB0aGlzOw0KICAgICAgbGV0IGNvbG9yX2xpbmVhciA9IF90aGlzLmltcG9ydGFuY2VDb2xvcl9saW5lYXI7DQogICAgICBsZXQgY29tcHV0ZV9jb2xvciA9IF90aGlzLmltcG9ydGFuY2VDb21wdXRlX2NvbG9yOw0KICAgICAgbGV0IHJTY2FsZSA9IF90aGlzLnJlbGV2YW5jZVNjYWxlX2xpbmVhcjsNCiAgICAgIGxldCBvRGF0YSA9IF90aGlzLmRhdGE7DQogICAgICBsZXQgcGF0aDEgPSBkMy5wYXRoKCk7DQogICAgICBsZXQgcGF0aDIgPSBkMy5wYXRoKCk7DQogICAgICBsZXQgamcyPTA7DQogICAgICBsZXQgYW5nMj0wOw0KICAgICAgbGV0IHBhdGgzID0gZDMucGF0aCgpOw0KICAgICAgbGV0IGpnMz0wOw0KICAgICAgbGV0IGFuZzM9MDsNCiAgICAgIGxldCBpbXBvcnRhbmNlVmFsdWUgPSBkYXRhWydhdHRyaWJ1dGUnXVsnaW1wb3J0YW5jZSddOw0KICAgICAgLy8gbGV0IHJlbGV2YW5jZVZhbHVhbGUocmVsZXZhbmNlVmFsdWUpDQogICAgICAvLyB7ICdpZCc6IGRhZSA9IGRhdGFbJ2F0dHJpYnV0ZSddWydyZWxldmFuY2UnXTsNCiAgICAgIC8vIGxldCByID0gclNjdGFbaV1bJ2lkJ10sICJ4IjogeCwgInIiOiByLCAibGF5b3V0IjogbGF5LCAieSI6IHksICJzb25GbGFnIjogc29uRmxhZyB9DQoNCg0KICAgICAgaWYgKGRhdGFbJ3R5cGUnXSA9PSAnMScpIHsNCiAgICAgICAgbGV0IGFyZWEgPSB0b29scy5jYWxjVHJpYW5nbGUoeCwgeSwgcik7DQogICAgICAgIF90aGlzLmRyYXdUcmlhbmdsZShzdmcsICJyZ2IoMjUwLCAxOTksIDg4KSIsIGFyZWEsICJyZ2IoMjUwLCAxOTksIDg4KSIsMSwxNSwiZW50VCIsYGVudFRfJHtkYXRhWydpZCddfWApOw0KDQogICAgICAgIF90aGlzLmRyYXdUeHQoc3ZnLCB4LCB5ICsgOCwgMjAsIFsiVCJdLCAnd2hpdGUnLCAyOCwgIlQiKQ0KICAgICAgfQ0KICAgICAgZWxzZSBpZiAoZGF0YVsndHlwZSddID09ICcyJykgew0KICAgICAgICBsZXQgYXJlYSA9IHRvb2xzLmNhbGNUcmlhbmdsZSh4LCB5LCByKTsNCiAgICAgICAgX3RoaXMuZHJhd1RyaWFuZ2xlKHN2ZywgInJnYigyNTAsIDE5OSwgODgpIiwgYXJlYSwgInJnYigyNTAsIDE5OSwgODgpIiwxLDE1LCJlbnRFIixgZW50RV8ke2RhdGFbJ2lkJ119YCk7DQoNCiAgICAgICAgX3RoaXMuZHJhd1R4dChzdmcsIHgsIHkgKyA4LCAyMCwgWyJFIl0sICd3aGl0ZScsIDI4LCAiRSIpDQogICAgICB9DQogICAgICBlbHNlIHsNCg0KICAgICAgICBsZXQgY3kgPSB5Ow0KICAgICAgICBsZXQgdG90YWxEdXJhdGlvbiA9IF90aGlzLnRvdGFsRHVyYXRpb247DQogICAgICAgIGxldCB0aW1lTGluZVNjYWxlX2xpbmVhciA9IGQzLnNjYWxlTGluZWFyKFswLCB0b3RhbER1cmF0aW9uXSwgW3ggLSByICogTWF0aC5zcXJ0KDMpIC8gMiwgeCArIHIgKiBNYXRoLnNxcnQoMykgLyAyXSkNCiAgICAgICAgbGV0IHRpbWVMaW5lSGlnaFNjYWxlX2xpbmVhciA9IGQzLnNjYWxlTGluZWFyKFswLCBfdGhpcy5tYXhUb3RhbER1cmF0aW9uIC0gNTBdLCBbciAvIDIsIHIgKiAoMSArIE1hdGguc3FydCgzKSAvIDMgKiAyKV0pDQogICAgICAgIGxldCBjaXJjbGVDb2xvciA9IGNvbXB1dGVfY29sb3IoY29sb3JfbGluZWFyKGltcG9ydGFuY2VWYWx1ZSkpOw0KICAgICAgICBfdGhpcy5kcmF3Q2lyY2xlKHN2ZywgeCwgY3ksIHIsIGNpcmNsZUNvbG9yLCBkYXRhLCAxLCAiZW50Q2lyY2xlIiwgImVudENpcmNsZV8iICsgZGF0YVsnaWQnXSk7DQoNCiAgICAgICAgciA9IHIgKiBNYXRoLnNxcnQoMykgLyAyOw0KICAgICAgICB5ICs9IHIgLyAyOw0KICAgICAgICBsZXQgcGF0aCA9IGQzLnBhdGgoKTsNCg0KDQogICAgICAgIHBhdGgubW92ZVRvKHggLSByLCB5KTsNCiAgICAgICAgbGV0IGxpbmVMaSA9IFtkYXRhXTsNCiAgICAgICAgbGV0IGxpbmVQb2ludCA9IFt7ICdpZCc6IGRhdGFbJ2lkJ10sICd0aW1lJzogZGF0YVsndGltZSddLCAneCc6IDAsICd5JzogMCB9XTsNCiAgICAgICAgbGV0IGpnaWRMID0gW2RhdGFbJ2lkJ11dOw0KICAgICAgICBsZXQgc2ltaWxhcml0eVJlbHNsaSA9IFtkYXRhWyJzaW1pbGFyaXR5UmVsIl1dOw0KICAgICAgICB3aGlsZSAoc2ltaWxhcml0eVJlbHNsaS5sZW5ndGggPiAwKSB7DQogICAgICAgICAgbGV0IHNpbWlsYXJpdHlSZWxzID0gc2ltaWxhcml0eVJlbHNsaVswXTsNCiAgICAgICAgICBzaW1pbGFyaXR5UmVsc2xpLnNwbGljZSgwLCAxKTsNCiAgICAgICAgICBsZXQgamcgPSAwOw0KICAgICAgICAgIGZvciAobGV0IHNyZWwgaW4gc2ltaWxhcml0eVJlbHMpIHsNCiAgICAgICAgICAgIGxldCBjZGF0YSA9IG9EYXRhLmZpbmQoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGRbJ2lkJ10gPT0gc2ltaWxhcml0eVJlbHNbc3JlbF0gfSk7DQogICAgICAgICAgICBpZiAoamdpZEwuaW5kZXhPZihjZGF0YVsnaWQnXSkgPT0gLTEpIHsNCiAgICAgICAgICAgICAgc2ltaWxhcml0eVJlbHNsaS5wdXNoKGNkYXRhWyJzaW1pbGFyaXR5UmVsIl0pDQogICAgICAgICAgICAgIGpnID0gMTsNCiAgICAgICAgICAgICAgbGluZUxpLnB1c2goY2RhdGEpDQogICAgICAgICAgICAgIGpnaWRMLnB1c2goY2RhdGFbJ2lkJ10pDQogICAgICAgICAgICAgIGxpbmVQb2ludC5wdXNoKHsgJ2lkJzogY2RhdGFbJ2lkJ10sICd0aW1lJzogY2RhdGFbJ3RpbWUnXSwgJ3gnOiAwLCAneSc6IDAgfSkNCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9DQogICAgICAgICAgLy8gaWYoamc9PTApew0KICAgICAgICAgIC8vIGJyZWFrOw0KICAgICAgICAgIC8vIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGNvbnN0IHNvcnRtdCA9IChhLCBiKSA9PiB7DQogICAgICAgICAgcmV0dXJuIHRvb2xzLnRpbWUyc2Vjb25kcyhhWzBdKSAtIHRvb2xzLnRpbWUyc2Vjb25kcyhiWzBdKTsNCiAgICAgICAgfQ0KICAgICAgICBjb25zdCBzb3J0bHAgPSAoYSwgYikgPT4gew0KICAgICAgICAgIHJldHVybiB0b29scy50aW1lMnNlY29uZHMoYVsndGltZSddWzBdKSAtIHRvb2xzLnRpbWUyc2Vjb25kcyhiWyd0aW1lJ11bMF0pOw0KICAgICAgICB9DQoNCiAgICAgICAgbGluZUxpID0gbGluZUxpLnNvcnQoc29ydGxwKTsNCiAgICAgICAgbGluZVBvaW50ID0gbGluZVBvaW50LnNvcnQoc29ydGxwKTsNCiAgICAgICAgbGV0IGxpbmVEYXRhID0gW1t4IC0gciAqIE1hdGguc3FydCgzKSAvIDIgLSA0LCB5XV07DQogICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgbGluZUxpLmxlbmd0aDsgdCsrKSB7DQogICAgICAgICAgbGV0IHN0YXJ0VCA9IGxpbmVMaVt0XVsndGltZSddWzBdOw0KICAgICAgICAgIGxldCBkdXJhdGlvbiA9IGxpbmVMaVt0XVsndG90YWxEdXJhdGlvbiddDQogICAgICAgICAgLy8gbGV0IGVuZFQgPSBsaW5lTGlbdF1bJ3RpbWUnXVsxXTsNCiAgICAgICAgICBsZXQgc3RhcnRTID0gdG9vbHMudGltZTJzZWNvbmRzKHN0YXJ0VCk7DQogICAgICAgICAgbGV0IGVuZFMgPSBzdGFydFMgKyBkdXJhdGlvbjsNCiAgICAgICAgICAvLyBsZXQgc3RhcnR4ID0gdGltZUxpbmVTY2FsZV9saW5lYXIoKHN0YXJ0UyAtIGR1cmF0aW9uICogMTApKTsNCiAgICAgICAgICAvLyBsZXQgZW5keCA9IHRpbWVMaW5lU2NhbGVfbGluZWFyKChlbmRTICsgZHVyYXRpb24gKiAxMCkpOw0KICAgICAgICAgIGxldCBsaW1zdCA9ICh4IC0gciAqIE1hdGguc3FydCgzKSAvIDIpOw0KICAgICAgICAgIGxldCBsaW1lZCA9ICh4ICsgciAqIE1hdGguc3FydCgzKSAvIDIpOw0KICAgICAgICAgIGxldCBzdGFydHggPSAobGltc3QgPCB0aW1lTGluZVNjYWxlX2xpbmVhcigoc3RhcnRTKSkpID8gKHRpbWVMaW5lU2NhbGVfbGluZWFyKChzdGFydFMpKSkgOiAobGltc3QpOw0KICAgICAgICAgIGxldCBlbmR4ID0gKGxpbWVkID4gdGltZUxpbmVTY2FsZV9saW5lYXIoKGVuZFMpKSkgPyAodGltZUxpbmVTY2FsZV9saW5lYXIoKGVuZFMpKSkgOiAobGltZWQpOw0KICAgICAgICAgIC8vIGxldCBtaWR4ID0gdGltZUxpbmVTY2FsZV9saW5lYXIoKGVuZFMgKyBzdGFydFMpIC8gMik7DQogICAgICAgICAgbGV0IG1pZHggPSAoc3RhcnR4ICsgZW5keCkgLyAyOw0KICAgICAgICAgIGxldCB5cyA9IHk7DQogICAgICAgICAgbGV0IHl6ID0geSAtIHRpbWVMaW5lSGlnaFNjYWxlX2xpbmVhcigoZHVyYXRpb24pKTsNCiAgICAgICAgICBsaW5lUG9pbnRbdF1bJ3gnXSA9IG1pZHg7DQogICAgICAgICAgbGluZVBvaW50W3RdWyd5J10gPSB5IC0gdGltZUxpbmVIaWdoU2NhbGVfbGluZWFyKGR1cmF0aW9uKSAvIDEuNzsNCiAgICAgICAgICAvLyBpZiAoc3RhcnR4IDwgKGxpbmVEYXRhW2xpbmVEYXRhLmxlbmd0aCAtIDFdWzBdKSkgew0KICAgICAgICAgIGlmICh0ID4gMCkgew0KICAgICAgICAgICAgbGluZURhdGEuc3BsaWNlKGxpbmVEYXRhLmxlbmd0aCAtIDEsIDEpOw0KICAgICAgICAgICAgbWlkeCArPSB0ICogNTsNCiAgICAgICAgICAgIHN0YXJ0eCA9IG1pZHggLSAoKG1pZHggLSAobGluZURhdGFbbGluZURhdGEubGVuZ3RoIC0gMV1bMF0gKyBtaWR4KSAvIDIpKSAvIDI7DQogICAgICAgICAgICBlbmR4ICs9IHQgKiA1Ow0KICAgICAgICAgICAgeXMgPSB5ICsgKHkgLSBsaW5lRGF0YVtsaW5lRGF0YS5sZW5ndGggLSAxXVsxXSkgLyAzDQogICAgICAgICAgfQ0KICAgICAgICAgIC8vIH0NCiAgICAgICAgICBsaW5lRGF0YS5wdXNoKFtzdGFydHgsIHlzXSwgW21pZHgsIHl6XSwgW2VuZHgsIHldKQ0KICAgICAgICAgIC8vIGxldCBzdGFydHggPSB0aW1lTGluZVNjYWxlX2xpbmVhcigoc3RhcnRTIC0gZHVyYXRpb24gKiAxMCkpOw0KICAgICAgICAgIC8vIGxldCBlbmR4ID0gdGltZUxpbmVTY2FsZV9saW5lYXIoKGVuZFMgKyBkdXJhdGlvbiAqIDEwKSk7DQoNCiAgICAgICAgICAvLyBsZXQgc3RhcnR5ZiA9IHkgKyB0aW1lTGluZUhpZ2hTY2FsZV9saW5lYXIoKGR1cmF0aW9uKSkgLyA4Ow0KICAgICAgICAgIC8vIGxldCBzdGFydHlmMSA9IHkgKyB0aW1lTGluZUhpZ2hTY2FsZV9saW5lYXIoKGR1cmF0aW9uKSkgLyA4Ow0KICAgICAgICAgIC8vIGxldCBlbmR5ZiA9IHkgKyB0aW1lTGluZUhpZ2hTY2FsZV9saW5lYXIoKGR1cmF0aW9uKSkgLyA4Ow0KICAgICAgICAgIC8vIGxldCBlbmR5ZjEgPSB5ICsgdGltZUxpbmVIaWdoU2NhbGVfbGluZWFyKChkdXJhdGlvbikpIC8gODsNCiAgICAgICAgICAvLyBsZXQgeXogPSB5IC0gdGltZUxpbmVIaWdoU2NhbGVfbGluZWFyKChkdXJhdGlvbikpOw0KICAgICAgICAgIC8vIGxldCBtaWR4ID0gdGltZUxpbmVTY2FsZV9saW5lYXIoKGVuZFMgKyBzdGFydFMpIC8gMik7DQogICAgICAgICAgLy8gbGluZVBvaW50W3RdWyd4J10gPSBtaWR4Ow0KICAgICAgICAgIC8vIGxpbmVQb2ludFt0XVsneSddID0geSAtIHRpbWVMaW5lSGlnaFNjYWxlX2xpbmVhcihkdXJhdGlvbikgLyAxLjc7DQogICAgICAgICAgLy8gbGV0IHkxID0geTsNCiAgICAgICAgICAvLyBpZiAoc3RhcnR4IDwgKGxpbmVEYXRhW2xpbmVEYXRhLmxlbmd0aCAtIDFdWzBdKSkgew0KICAgICAgICAgIC8vICAgaWYgKHQgPiAwKSB7DQogICAgICAgICAgLy8gICAgIGxpbmVEYXRhLnNwbGljZShsaW5lRGF0YS5sZW5ndGggLSAzLCAzKTsNCiAgICAgICAgICAvLyAgICAgc3RhcnR4ID0gKGxpbmVEYXRhW2xpbmVEYXRhLmxlbmd0aCAtIDFdWzBdICsgbWlkeCkgLyAyOw0KICAgICAgICAgIC8vICAgICB5MSA9IGxpbmVEYXRhW2xpbmVEYXRhLmxlbmd0aCAtIDFdWzFdICsgdGltZUxpbmVIaWdoU2NhbGVfbGluZWFyKChkdXJhdGlvbikpIC8gMjsNCiAgICAgICAgICAvLyAgICAgc3RhcnR5ZiA9IGxpbmVEYXRhW2xpbmVEYXRhLmxlbmd0aCAtIDFdWzFdICsgdGltZUxpbmVIaWdoU2NhbGVfbGluZWFyKChkdXJhdGlvbikpIC8gMjsNCiAgICAgICAgICAvLyAgICAgc3RhcnR5ZjEgPSBsaW5lRGF0YVtsaW5lRGF0YS5sZW5ndGggLSAxXVsxXSArIHRpbWVMaW5lSGlnaFNjYWxlX2xpbmVhcigoZHVyYXRpb24pKSAvIDI7DQogICAgICAgICAgLy8gICB9DQogICAgICAgICAgLy8gfQ0KICAgICAgICAgIC8vIGxldCBzdGFydHgxID0gc3RhcnR4ICsgKHRpbWVMaW5lU2NhbGVfbGluZWFyKChzdGFydFMgKyBkdXJhdGlvbikpIC0gdGltZUxpbmVTY2FsZV9saW5lYXIoKHN0YXJ0UykpKTsNCiAgICAgICAgICAvLyBsZXQgZW5keDEgPSBlbmR4IC0gKHRpbWVMaW5lU2NhbGVfbGluZWFyKChzdGFydFMgKyBkdXJhdGlvbikpIC0gdGltZUxpbmVTY2FsZV9saW5lYXIoKHN0YXJ0UykpKTsNCiAgICAgICAgICAvLyBsZXQgc3RhcnR4MiA9IHN0YXJ0eDEgKyAodGltZUxpbmVTY2FsZV9saW5lYXIoKHN0YXJ0UyArIGR1cmF0aW9uKSkgLSB0aW1lTGluZVNjYWxlX2xpbmVhcigoc3RhcnRTKSkpOw0KICAgICAgICAgIC8vIGxldCBlbmR4MiA9IGVuZHgxIC0gKHRpbWVMaW5lU2NhbGVfbGluZWFyKChzdGFydFMgKyBkdXJhdGlvbikpIC0gdGltZUxpbmVTY2FsZV9saW5lYXIoKHN0YXJ0UykpKTsNCiAgICAgICAgICAvLyBpZiAoZW5keCA+IChyICsgeCkpIGVuZHggPSByICsgeDsNCiAgICAgICAgICAvLyBpZiAoc3RhcnR4MSA8IChsaW5lRGF0YVtsaW5lRGF0YS5sZW5ndGggLSAxXVswXSkpIHN0YXJ0eDEgPSBsaW5lRGF0YVtsaW5lRGF0YS5sZW5ndGggLSAxXVswXTsNCiAgICAgICAgICAvLyBpZiAoZW5keDEgPiAociArIHgpKSBlbmR4MSA9IHIgKyB4Ow0KICAgICAgICAgIC8vIGlmIChzdGFydHgyIDwgKGxpbmVEYXRhW2xpbmVEYXRhLmxlbmd0aCAtIDFdWzBdKSkgc3RhcnR4MiA9IGxpbmVEYXRhW2xpbmVEYXRhLmxlbmd0aCAtIDFdWzBdOw0KICAgICAgICAgIC8vIGlmIChlbmR4MiA+IChyICsgeCkpIGVuZHgyID0gciArIHg7DQogICAgICAgICAgLy8gbGluZURhdGEucHVzaChbc3RhcnR4LCB5MV0sIFtzdGFydHgxLCBzdGFydHlmMV0sIFtzdGFydHgyLCBzdGFydHlmXSwgW21pZHgsIHl6XSwgW2VuZHgyLCBlbmR5Zl0sIFtlbmR4MSwgZW5keWYxXSwgW2VuZHgsIHldKQ0KICAgICAgICB9DQogICAgICAgIGxpbmVEYXRhLnB1c2goW3ggKyByLCB5XSkNCiAgICAgICAgbGV0IGN1cnZlX2dlbmVyYXRvciA9IGQzLmxpbmUoKQ0KICAgICAgICAgIC54KChkKSA9PiBkWzBdKQ0KICAgICAgICAgIC55KChkKSA9PiB7DQogICAgICAgICAgICBsZXQgaCA9IE1hdGguc3FydChNYXRoLnBvdyhyLCAyKSAtIE1hdGgucG93KChkWzBdIC0gKHggLSByKSksIDIpKTsNCiAgICAgICAgICAgIGlmICgoeSAtIGRbMV0pID4gKGggKyByICogTWF0aC5zcXJ0KDMpIC8gMikpDQogICAgICAgICAgICAgIHJldHVybiB5IC0gKGggKyByICogTWF0aC5zcXJ0KDMpIC8gMikgKyAyOw0KICAgICAgICAgICAgcmV0dXJuIGRbMV07DQogICAgICAgICAgfSkNCiAgICAgICAgICAuY3VydmUoZDMuY3VydmVCdW5kbGUpDQogICAgICAgIC8vIC5jdXJ2ZShkMy5jdXJ2ZUNhdG11bGxSb20gICkNCiAgICAgICAgLy8gLmN1cnZlKGQzLmN1cnZlQmFzaXMpDQogICAgICAgIF90aGlzLmRyYXdUaW1lTGluZShzdmcsIGN1cnZlX2dlbmVyYXRvcihsaW5lRGF0YSksICJ3aGl0ZSIsIDIsICcwJywgJ3NvbkxpbmUgJywgJ3NvbkxpbmUgJyk7DQoNCiAgICAgICAgZm9yIChsZXQgcCA9IDA7IHAgPCBsaW5lUG9pbnQubGVuZ3RoOyBwKyspIHsNCiAgICAgICAgICBfdGhpcy5kcmF3Q2lyY2xlKHN2ZywgbGluZVBvaW50W3BdWyd4J10sIGxpbmVQb2ludFtwXVsneSddLCA1LCAicmVkIiwgbGluZVBvaW50W3BdLCAwLCAibGluZVBvaW50IiwgImxpbmVQb2ludF8iICsgbGluZVBvaW50W3BdWydpZCddKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vICIxIjogInJnYigxNDUsIDIwNCwgMTE3KSIsDQogICAgICAgIC8vICAgIjIiOiAicmdiKDg0LCAxMTIsIDE5OCkiLA0KICAgICAgICAvLyAgICIzIjogInJnYigyMzgsIDEwMiwgMTAyKSIsDQogICAgICAgIGxldCB0eXBlQ29sb3IgPSB7DQogICAgICAgICAgIjEiOiAiI2ZmOWM5YyIsDQogICAgICAgICAgIjIiOiAiI2Y0ZjRkMCIsDQogICAgICAgICAgIjMiOiAiIzZmOGJlMCIsDQogICAgICAgIH07DQogICAgICAgIGxldCBkdXJhdGlvbiA9IHRvb2xzLnRpbWUyc2Vjb25kcyhkYXRhWyd0aW1lJ11bMF0pIC0gdG9vbHMudGltZTJzZWNvbmRzKGRhdGFbJ3RpbWUnXVsxXSk7DQogICAgICAgIGxldCB0eXBlRGF0YSA9IGRhdGFbJ2F0dHJpYnV0ZSddWydleHByZXNzaW9ucyddOw0KICAgICAgICBsZXQgc29uTGlzdCA9IGRhdGFbJ3NvbiddOw0KICAgICAgICBsZXQgc29ucyA9IFtzb25MaXN0XTsNCiAgICAgICAgd2hpbGUgKHNvbnMubGVuZ3RoID4gMCkgew0KICAgICAgICAgIGxldCBjdXJTb25MaXN0ID0gc29uc1swXTsNCiAgICAgICAgICBzb25zLnNwbGljZSgwLCAxKTsNCiAgICAgICAgICBpZiAoY3VyU29uTGlzdC5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICBmb3IgKGxldCBzIGluIGN1clNvbkxpc3QpIHsNCiAgICAgICAgICAgICAgbGV0IHNvbkRhdGEgPSBvRGF0YS5maW5kKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkWydpZCddID09IGN1clNvbkxpc3Rbc10gfSk7DQogICAgICAgICAgICAgIGxldCBzb25UeXBlRGF0YSA9IHNvbkRhdGFbJ2F0dHJpYnV0ZSddWydleHByZXNzaW9ucyddOw0KDQogICAgICAgICAgICAgIGZvciAobGV0IHQgaW4gc29uVHlwZURhdGEpIHsNCiAgICAgICAgICAgICAgICBsZXQgdHlwZUR1cml0aW9uID0gc29uVHlwZURhdGFbdF07DQogICAgICAgICAgICAgICAgZm9yIChsZXQgZCBpbiB0eXBlRHVyaXRpb24pIHsNCiAgICAgICAgICAgICAgICAgIHR5cGVEYXRhW3RdLnB1c2godHlwZUR1cml0aW9uW2RdKQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICBzb25zLnB1c2goc29uRGF0YVsnc29uJ10pOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICB2YXIgdHlwZVN0YXJ0UiA9IDAvL01hdGguUEkvNDsNCg0KICAgICAgICB2YXIgdHlwZVN0ZXBSID0gTWF0aC5QSSAvIDE7DQoNCiAgICAgICAgaWYgKHNvbkxpc3QubGVuZ3RoID4gMCkgew0KICAgICAgICAgIGxldCB0eXBlVG90YWxEdXIgPSAwOw0KICAgICAgICAgIGZvciAobGV0IHQgaW4gdHlwZURhdGEpIHsNCiAgICAgICAgICAgIGxldCB0eXBlRHVyaXRpb24gPSB0eXBlRGF0YVt0XTsNCiAgICAgICAgICAgIGZvciAobGV0IGQgaW4gdHlwZUR1cml0aW9uKSB7DQogICAgICAgICAgICAgIHR5cGVUb3RhbER1ciArPSAodG9vbHMudGltZTJzZWNvbmRzKHR5cGVEdXJpdGlvbltkXVsxXSkgLSB0b29scy50aW1lMnNlY29uZHModHlwZUR1cml0aW9uW2RdWzBdKSkNCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9DQogICAgICAgICAgbGV0IHR5cGVBcmNTY2FsZV9saW5lYXIgPSBkMy5zY2FsZUxpbmVhcihbMCwgdHlwZVRvdGFsRHVyXSwgWzAsIE1hdGguUEkgKiAyXSk7DQogICAgICAgICAgZm9yIChsZXQgaSBpbiB0eXBlRGF0YSkgew0KICAgICAgICAgICAgbGV0IGNvbG9yID0gdHlwZUNvbG9yW2ldOw0KICAgICAgICAgICAgbGV0IHR5cGVEdXJpdGlvbiA9IHR5cGVEYXRhW2ldOw0KICAgICAgICAgICAgbGV0IHRvdGFsVHlwZVNlY29uZHMgPSAwOw0KICAgICAgICAgICAgZm9yIChsZXQgZCBpbiB0eXBlRHVyaXRpb24pIHsNCiAgICAgICAgICAgICAgdG90YWxUeXBlU2Vjb25kcyArPSAodG9vbHMudGltZTJzZWNvbmRzKHR5cGVEdXJpdGlvbltkXVsxXSkgLSB0b29scy50aW1lMnNlY29uZHModHlwZUR1cml0aW9uW2RdWzBdKSkNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmICh0b3RhbFR5cGVTZWNvbmRzID4gMCkgew0KICAgICAgICAgICAgICBsZXQgdHlwZVN0ZXBSID0gdHlwZUFyY1NjYWxlX2xpbmVhcih0b3RhbFR5cGVTZWNvbmRzKS8vTWF0aC5QSS8yOw0KDQogICAgICAgICAgICAgIGxldCBlbmRBbmdsZXQgPSB0eXBlU3RhcnRSICsgMSAqIHR5cGVTdGVwUg0KICAgICAgICAgICAgICB2YXIgZGF0YXNldCA9IHsgc3RhcnRBbmdsZTogdHlwZVN0YXJ0UiwgZW5kQW5nbGU6IGVuZEFuZ2xldCB9OyAvL+WIm+W7uuS4gOS4quW8p+eUn+aIkOWZqA0KICAgICAgICAgICAgICB0eXBlU3RhcnRSID0gZW5kQW5nbGV0Ow0KICAgICAgICAgICAgICB2YXIgYXJjUGF0aCA9IGQzLmFyYygpDQogICAgICAgICAgICAgICAgLmlubmVyUmFkaXVzKHIgKyAxMCkNCiAgICAgICAgICAgICAgICAub3V0ZXJSYWRpdXMociArIDI1KTsNCiAgICAgICAgICAgICAgdmFyIHBhdGhBcmMgPSBhcmNQYXRoKGRhdGFzZXQpOw0KICAgICAgICAgICAgICBfdGhpcy5kcmF3QXJjKHN2ZywgeCwgeSAtIHIgLyAyLCBwYXRoQXJjLCBjb2xvciwgY29sb3IsICd0eXBlIGYnICsgZGF0YVsnaWQnXSArICIgdCIgKyBpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICBpZigoY29weSE9MCkmJihqZzI9PTApKXsNCiAgICAgICAgICAgIGpnMj0xOw0KICAgICAgICAgICAgICBhbmcyID0gZGF0YXNldC5zdGFydEFuZ2xlK01hdGguUEkvMg0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0NCiAgICAgICAgICBsZXQgc29uVG90YWwgPSAwOw0KICAgICAgICAgIGxldCBzb25OdW0gPSAwDQogICAgICAgICAgZm9yIChsZXQgcyBpbiBzb25MaXN0KSB7DQogICAgICAgICAgICBsZXQgc29uRGF0YSA9IG9EYXRhLmZpbmQoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGRbJ2lkJ10gPT0gc29uTGlzdFtzXSB9KTsNCiAgICAgICAgICAgIGxldCBzb25EdXIgPSBzb25EYXRhWyd0b3RhbER1cmF0aW9uJ107DQogICAgICAgICAgICBzb25Ub3RhbCArPSBzb25EdXI7DQogICAgICAgICAgICBzb25OdW0gKz0gMTsNCiAgICAgICAgICB9DQogICAgICAgICAgbGV0IHNraXBBcmMgPSBNYXRoLlBJIC8gKHNvbk51bSArIDIpOw0KICAgICAgICAgIGxldCB0aW1lU29uTGluZWFyID0gZDMuc2NhbGVMaW5lYXIoWzAsIHNvblRvdGFsXSwgWzAsIE1hdGguUEkgLSBza2lwQXJjICogKHNvbk51bSAtIDEpXSk7DQogICAgICAgICAgbGV0IHRpbWVTb25IZWlnaExpbmVhciA9IGQzLnNjYWxlTGluZWFyKFswLCBzb25Ub3RhbF0sIFs0MCwgNDBdKTsNCg0KICAgICAgICAgIGxldCB0aW1lU29uQ29sb3JfbGluZWFyID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWzAsIHNvblRvdGFsXSkucmFuZ2UoWzAsIDFdKTsNCiAgICAgICAgICBsZXQgdGltZVNvbkNvbXB1dGVfY29sb3IgPSBkMy5pbnRlcnBvbGF0ZSgid2hpdGUiLCBjaXJjbGVDb2xvcik7DQogICAgICAgICAgdmFyIHNvblN0YXJ0UiA9IE1hdGguUEkgLyAyOw0KDQogICAgICAgICAgbGV0IHJlbExpc3QgPSBbXTsNCiAgICAgICAgICBsZXQgcmVsUm9vdExpc3QgPSBbXTsNCiAgICAgICAgICBsZXQgcHNOdW0gPSAwLjE7DQogICAgICAgICAgbGV0IGRhSWQgPSBkYXRhWydpZCddDQogICAgICAgICAgbGV0IHJlbERhdGEgPSBfdGhpcy5yZWxEYXRhOw0KICAgICAgICAgIGxldCBvZERhdGEgPSBfdGhpcy5kYXRhOw0KICAgICAgICAgIGxldCBiYXNpY1JlbCA9IHJlbERhdGFbJ2Jhc2ljUmVsJ107DQogICAgICAgICAgZm9yIChsZXQgcmUgPSAwOyByZSA8IGJhc2ljUmVsLmxlbmd0aDsgcmUrKykgew0KDQogICAgICAgICAgICBsZXQgc29yY2VJZCA9IGJhc2ljUmVsW3JlXVswXTsNCiAgICAgICAgICAgIGxldCB0YXJnZXRJZCA9IGJhc2ljUmVsW3JlXVsxXTsNCiAgICAgICAgICAgIGxldCBjTm9kZSA9ICcnOw0KICAgICAgICAgICAgaWYgKHNvcmNlSWQgPT0gZGFJZCkgew0KICAgICAgICAgICAgICBjTm9kZSA9IG9kRGF0YS5maW5kKGZ1bmN0aW9uIChkKSB7IHJldHVybiBwYXJzZUludChkWydpZCddKSA9PSBwYXJzZUludCh0YXJnZXRJZCkgfSk7DQogICAgICAgICAgICAgIHJlbExpc3QucHVzaCh0YXJnZXRJZCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmICh0YXJnZXRJZCA9PSBkYUlkKSB7DQogICAgICAgICAgICAgIGNOb2RlID0gb2REYXRhLmZpbmQoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIHBhcnNlSW50KGRbJ2lkJ10pID09IHBhcnNlSW50KHNvcmNlSWQpIH0pOw0KICAgICAgICAgICAgICByZWxMaXN0LnB1c2goc29yY2VJZCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgfTsNCiAgICAgICAgICBpZiAocmVsTGlzdC5sZW5ndGggPT0gMCkgew0KICAgICAgICAgICAgc29uU3RhcnRSID0gMDsNCiAgICAgICAgICAgIHRpbWVTb25MaW5lYXIgPSBkMy5zY2FsZUxpbmVhcihbMCwgc29uVG90YWxdLCBbMCwgTWF0aC5QSSAqIDIgLSBza2lwQXJjICogKHNvbk51bSldKTsNCiAgICAgICAgICB9DQoNCiAgICAgICAgICBmb3IgKGxldCBzIGluIHNvbkxpc3QpIHsNCiAgICAgICAgICAgIGxldCBzb25EYXRhID0gb0RhdGEuZmluZChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZFsnaWQnXSA9PSBzb25MaXN0W3NdIH0pOw0KICAgICAgICAgICAgbGV0IHNvbkR1ciA9IHNvbkRhdGFbJ3RvdGFsRHVyYXRpb24nXTsNCg0KICAgICAgICAgICAgbGV0IHNvblN0ZXBSID0gdGltZVNvbkxpbmVhcihzb25EdXIpLy9NYXRoLlBJLzI7DQoNCiAgICAgICAgICAgIGxldCBlbmRBbmdsZXQgPSBzb25TdGFydFIgKyBzb25TdGVwUjsNCiAgICAgICAgICAgIHZhciBkYXRhc2V0ID0geyBzdGFydEFuZ2xlOiBzb25TdGFydFIsIGVuZEFuZ2xlOiBlbmRBbmdsZXQgfTsgLy/liJvlu7rkuIDkuKrlvKfnlJ/miJDlmagNCiAgICAgICAgICAgIHNvblN0YXJ0UiA9IGVuZEFuZ2xldDsNCiAgICAgICAgICAgIGxldCBjb2xvciA9ICdibHVlJzsNCiAgICAgICAgICAgIHZhciBhcmNQYXRoID0gZDMuYXJjKCkNCiAgICAgICAgICAgICAgLmlubmVyUmFkaXVzKHIgKyAyOCkNCiAgICAgICAgICAgICAgLm91dGVyUmFkaXVzKHIgKyB0aW1lU29uSGVpZ2hMaW5lYXIoc29uRHVyKSk7DQogICAgICAgICAgICB2YXIgYXJjTWlkUGF0aCA9IGQzLmFyYygpDQogICAgICAgICAgICAgIC5pbm5lclJhZGl1cygwKQ0KICAgICAgICAgICAgICAub3V0ZXJSYWRpdXMociArIDMyKTsNCiAgICAgICAgICAgIHZhciBwYXRoQXJjID0gYXJjUGF0aChkYXRhc2V0KTsNCg0KICAgICAgICAgICAgZW5kQW5nbGV0ID0gc29uU3RhcnRSICsgc2tpcEFyYzsNCiAgICAgICAgICAgIHZhciBtaWREYXRhc2V0ID0geyBzdGFydEFuZ2xlOiBzb25TdGFydFIsIGVuZEFuZ2xlOiBlbmRBbmdsZXQgfTsgLy/liJvlu7rkuIDkuKrlvKfnlJ/miJDlmagNCg0KICAgICAgICAgICAgbGV0IGppYW50b3VQYXRoID0gZDMucGF0aCgpOw0KICAgICAgICAgICAgamlhbnRvdVBhdGguYXJjKHgsIHkgLSByIC8gMiwgciArIDMyLCBzb25TdGFydFIgLSBNYXRoLlBJIC8gMiwgZW5kQW5nbGV0IC0gTWF0aC5QSSAvIDIpOw0KDQogICAgICAgICAgICBzb25TdGFydFIgKz0gc2tpcEFyYzsNCiAgICAgICAgICAgIHZhciBwYXRoTWlkQXJjID0gYXJjTWlkUGF0aChtaWREYXRhc2V0KTsNCiAgICAgICAgICAgIGxldCB0aW1lU29uQ29sb3IgPSBjb21wdXRlX2NvbG9yKGNvbG9yX2xpbmVhcihzb25EYXRhWydhdHRyaWJ1dGUnXVsnaW1wb3J0YW5jZSddKSk7DQogICAgICAgICAgICBfdGhpcy5kcmF3QXJjKHN2ZywgeCwgeSAtIHIgLyAyLCBwYXRoQXJjLCB0aW1lU29uQ29sb3IsIHRpbWVTb25Db2xvciwgJ3NvbiBmJyArIGRhdGFbJ2lkJ10gKyAiIHMiICsgc29uTGlzdFtzXSwgJzAnKTsNCiAgICAgICAgICAgIGlmIChzICE9IHNvbkxpc3QubGVuZ3RoIC0gMSkgew0KDQogICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nDQogICAgICAgICAgICAgIF90aGlzLmRyYXdUaW1lTGluZShzdmcsIGppYW50b3VQYXRoLCAicmdiKDIwMCwyMDAsMjAwKSIsIDMsICc5LDUnLCAnbWlkQXJjICcsICdtaWRBcmMgJyk7DQogICAgICAgICAgICAgIC8vIF90aGlzLmRyYXdUaW1lTGluZShfdGhpcy5hcmNHLCBwYXRoLCAid2hpdGUiLCAyLCcwJywgJ3NvbkxpbmUgJywgJ3NvbkxpbmUgJyk7DQogICAgICAgICAgICAgIC8vIF90aGlzLmRyYXdBcmMoX3RoaXMuYXJjRywgeCwgeSAtIHIgLyAyLCBwYXRoTWlkQXJjLCAicmdiKDIwMCwyMDAsMjAwKSIsICJ3aGl0ZSIsICdzb24gZicgKyBkYXRhWydpZCddLCAiOSw1IiwgMyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICBpZigoY29weSE9MCkpew0KICAgICAgICAgICAgamczPTE7DQogICAgICAgICAgICAgIGFuZzMgPSAoZGF0YXNldC5lbmRBbmdsZStkYXRhc2V0LnN0YXJ0QW5nbGUpLzIrTWF0aC5QSS8yDQogICAgICAgICAgICB9DQogICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgICAgICANCiAgICAgICAgaWYoKGNvcHkhPTApKXsNCiAgICAgICAgICAgICAgLy8gamcyPTENCiAgICAgICAgICAgICAgcGF0aDEubW92ZVRvKDEwLCAxNTUpDQogICAgICAgICAgICAgIHBhdGgxLmxpbmVUbygxMjAsMTU1KQ0KICAgICAgICAgICAgICAvLyBsZXQgYW5nID0gZGEuc3RhcnRBbmdsZSswLjAwMStNYXRoLlBJLzINCiAgICAgICAgICAgICAgX3RoaXMuZHJhd1R4dChzdmcsIDYwLCAxMjAsIDgwLCBbIkNvbmNlcHQiLCJUaW1lIiwiRGlzdHJpYnV0aW9uIl0sICJncmV5IiwgMTUsIGB0ZXh0c18xYCk7DQogICAgICAgICAgICAgIHBhdGgxLmxpbmVUbyhsaW5lRGF0YVswXVswXSxsaW5lRGF0YVswXVsxXSkNCiAgICAgICAgICAgICAgLy8gcGF0aDIubGluZVRvKCh4LShyICsgaW50ZXIgKyBoKSpNYXRoLmNvcyhhbmcpKSwoeS1yLzItKHIgKyBpbnRlciArIGgpKk1hdGguc2luKGFuZykpKQ0KICAgICAgICAgICAgICBfdGhpcy5kcmF3VGltZUxpbmUoc3ZnLCBwYXRoMSwgInJnYigyMDAsMjAwLDIwMCkiLCAyLCAnOSw1JywgJ21tICcsICdtbSAnKTsNCiAgICAgICAgICAgICAgaWYoamcyPT0xKXsNCiAgICAgICAgICAgICAgcGF0aDIubW92ZVRvKDU1MCwgMzUpDQogICAgICAgICAgICAgIHBhdGgyLmxpbmVUbygzMjAsMzUpDQogICAgICAgICAgICAgIF90aGlzLmRyYXdUeHQoc3ZnLCAzNjAsIDIwLCA4MCwgWyJDb3Vyc2UgU3R5bGUiXSwgImdyZXkiLCAxNSwgYHRleHRzXzFgKTsNCiAgICAgICAgICAgICAgcGF0aDIubGluZVRvKCh4LShyICsyNSkqTWF0aC5jb3MoYW5nMikpLCh5LXIvMi0ociArMjUpKk1hdGguc2luKGFuZzIpKSkNCiAgICAgICAgICAgICAgX3RoaXMuZHJhd1RpbWVMaW5lKHN2ZywgcGF0aDIsICJyZ2IoMjAwLDIwMCwyMDApIiwgMiwgJzksNScsICdtbSAnLCAnbW0gJyk7fQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICBpZihqZzM9PTEpew0KICAgICAgICAgICAgICBwYXRoMy5tb3ZlVG8oNTUwLCAyMzUpDQogICAgICAgICAgICAgIHBhdGgzLmxpbmVUbygzMjAsMjM1KQ0KICAgICAgICAgICAgICBsZXQgYW5nMyA9IE1hdGguUEkqKDEvMisxLTAuMDUpDQogICAgICAgICAgICAgIF90aGlzLmRyYXdUeHQoc3ZnLCAzNjAsIDIwMCwgODAsIFsiU3ViY29uY2VwdCIsIkRpc3RyaWJ1dGlvbiJdLCAiZ3JleSIsIDE1LCBgdGV4dHNfMWApOw0KICAgICAgICAgICAgICBwYXRoMy5saW5lVG8oKHgtKHIgKzMyKSpNYXRoLmNvcyhhbmczKSksKHktci8yLShyICszMikqTWF0aC5zaW4oYW5nMykpKQ0KICAgICAgICAgICAgICBfdGhpcy5kcmF3VGltZUxpbmUoc3ZnLCBwYXRoMywgInJnYigyMDAsMjAwLDIwMCkiLCAyLCAnOSw1JywgJ21tICcsICdtbSAnKTsNCiAgICAgICAgICAgIH0NCiAgICAgIH0NCiAgICAgIGxldCB0eHRzID0gZGF0YVsnbmFtZSddLnNwbGl0KCIgIikNCiAgICAgIGxldCB0eCA9IHggLSByIC0gMzA7DQogICAgICBsZXQgdHkgPSB5ICsgciArIDYwOw0KICAgICAgbGV0IHR3ID0gciAqIDI7DQogICAgICB0eCA9IHg7DQogICAgICBpZiAoZGF0YVsnc29uJ10ubGVuZ3RoID09IDApIHsNCiAgICAgICAgdHggPSB4Ly8tci0xMDsNCiAgICAgICAgdHkgPSB5ICsgciAqIDI7DQogICAgICB9DQogICAgICAvLyBpZiAoZGF0YVsnaWQnXSA9PSAiMyIpIHsNCiAgICAgIC8vICAgdHggPSB4IC0gMTA7DQogICAgICAvLyAgIHR5ID0geSArIHIgKiAyOw0KICAgICAgLy8gfQ0KICAgICAgLy8gaWYgKGRhdGFbJ2lkJ10gPT0gIjQiKSB7DQogICAgICAvLyAgIHR4ID0geCArIDEwOw0KICAgICAgLy8gICB0eSA9IHkgKyByICogMjsNCiAgICAgIC8vIH0NCiAgICAgIC8vIGlmKGRhdGFbJ3R5cGUnXT09JzEnKXsNCiAgICAgIC8vICAgdHggPSB4LXIvMjsNCiAgICAgIC8vICAgdHkgPSB5K3IqMjsNCiAgICAgIC8vIH0NCg0KICAgICAgX3RoaXMuZHJhd1R4dChzdmcsIHR4LCB0eSwgdHcsIHR4dHMsICJncmV5IiwgMTYsIGB0ZXh0XyR7ZGF0YVsnaWQnXX1gKTsNCiAgICB9LA0KICAgIGRyYXdBcmMoc3ZnLCB4LCB5LCBhcmNQYXRoLCBzdHJva2UsIGZpbGwsIGNsYXNzTmFtZSwgc3Ryb2tlX2Rhc2hhcnJheSA9ICIwIiwgd2lkdGggPSAzLCBvcGFjaXR5ID0gMSkgew0KICAgICAgbGV0IGFyYyA9IHN2Zy5hcHBlbmQoInBhdGgiKQ0KICAgICAgICAuYXR0cigiZCIsIGFyY1BhdGgpDQogICAgICAgIC5hdHRyKCJjbGFzcyIsIGNsYXNzTmFtZSkNCiAgICAgICAgLmF0dHIoInRyYW5zZm9ybSIsICJ0cmFuc2xhdGUoIiArIHggKyAiLCIgKyB5ICsgIikiKQ0KICAgICAgICAuYXR0cigic3Ryb2tlIiwgc3Ryb2tlKQ0KICAgICAgICAuYXR0cignc3Ryb2tlLXdpZHRoJywgd2lkdGgpDQogICAgICAgIC5hdHRyKCJzdHJva2UtZGFzaGFycmF5Iiwgc3Ryb2tlX2Rhc2hhcnJheSkNCiAgICAgICAgLmF0dHIoInN0cm9rZS1saW5lam9pbiIsICJyb3VuZCIpDQogICAgICAgIC5hdHRyKCJmaWxsIiwgZmlsbCkNCiAgICAgICAgLmF0dHIoIm9wYWNpdHkiLCBvcGFjaXR5KTsNCiAgICAgIHJldHVybiBhcmM7DQogICAgfSwNCiAgICBkcmF3Q2lyY2xlKHN2ZywgeCwgeSwgciwgZmlsbCwgZGF0YSwgb3BhY2l0eSwgY2xhc3NOYW1lLCBpZE5hbWUpIHsNCiAgICAgIGNvbnN0IF90aGlzID0gdGhpczsNCiAgICAgIGNvbnN0IG9EYXRhID0gX3RoaXMuZGF0YQ0KICAgICAgc3ZnLmFwcGVuZCgiY2lyY2xlIikNCiAgICAgICAgLmF0dHIoImlkIiwgaWROYW1lKQ0KICAgICAgICAuYXR0cigiY2xhc3MiLCBjbGFzc05hbWUpDQogICAgICAgIC5hdHRyKCJvcGFjaXR5Iiwgb3BhY2l0eSkNCiAgICAgICAgLmF0dHIoImN4IiwgeCkNCiAgICAgICAgLmF0dHIoImN5IiwgeSkNCiAgICAgICAgLmF0dHIoInIiLCByKQ0KICAgICAgICAuYXR0cigiZmlsbCIsIGZpbGwpDQogICAgICAgIC5vbigibW91c2VvdmVyIiwgZnVuY3Rpb24gKGQpIHsNCiAgICAgICAgICBkMy5zZWxlY3QodGhpcykuYXR0cigiciIsIHIgKiAxLjEpDQogICAgICAgICAgbGV0IGNsYXNzTiA9IGQzLnNlbGVjdCh0aGlzKS5hdHRyKCJjbGFzcyIpOw0KICAgICAgICAgIGxldCBpZE4gPSBkMy5zZWxlY3QodGhpcykuYXR0cigiaWQiKS5zcGxpdCgiXyIpWzFdDQogICAgICAgICAgX3RoaXMub3ZlckVudGl0eUlkID0gaWRODQogICAgICAgICAgbGV0IHNob3dSZWwgPSBfdGhpcy5zaG93RW50aXR5UmVsSWRMaXN0DQogICAgICAgICAgaWYgKCFzaG93UmVsLmluY2x1ZGVzKHBhcnNlSW50KGlkTikpKSB7DQogICAgICAgICAgICBzaG93UmVsLnB1c2gocGFyc2VJbnQoaWROKSkNCiAgICAgICAgICAgIF90aGlzLnNob3dFbnRpdHlSZWxJZE92ZXJTdGF0ZSA9IDA7DQogICAgICAgICAgfQ0KICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgX3RoaXMuc2hvd0VudGl0eVJlbElkT3ZlclN0YXRlID0gMTsNCiAgICAgICAgICB9DQogICAgICAgICAgX3RoaXMuc2hvd0VudGl0eVJlbElkTGlzdCA9IHNob3dSZWw7DQogICAgICAgICAgaWYgKGNsYXNzTiA9PSAnbGluZVBvaW50Jykgew0KICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmF0dHIoIm9wYWNpdHkiLCAxKS5hdHRyKCJyIiwgNSkNCiAgICAgICAgICB9DQogICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICBkMy5zZWxlY3RBbGwoIi5mIiArIGRhdGFbJ2lkJ10pDQogICAgICAgICAgICAgIC5hdHRyKCJ0cmFuc2Zvcm0iLCBmdW5jdGlvbiAoZCkgew0KICAgICAgICAgICAgICAgIGxldCB0cmFuc2Zvcm1kID0gZDMuc2VsZWN0KHRoaXMpLmF0dHIoInRyYW5zZm9ybSIpDQogICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybWQuc3BsaXQoIiAiKVswXSArICIgc2NhbGUoMS4xKSINCiAgICAgICAgICAgICAgfSkNCg0KICAgICAgICAgICAgZDMuc2VsZWN0QWxsKCIuYmFzaWNSZWwiKQ0KICAgICAgICAgICAgICAuYXR0cigiY2xhc3MiLCBmdW5jdGlvbiAoZCkgew0KICAgICAgICAgICAgICAgIGxldCBjbGFzc04gPSBkMy5zZWxlY3QodGhpcykuYXR0cigiY2xhc3MiKTsNCiAgICAgICAgICAgICAgICBsZXQgY2xhc3NOTGlzdCA9IGNsYXNzTi5zcGxpdCgiICIpOw0KICAgICAgICAgICAgICAgIGxldCBqZyA9IDA7DQogICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjbGFzc05MaXN0Lmxlbmd0aCAtIDE7IGkrKykgew0KICAgICAgICAgICAgICAgICAgaWYgKCdzb3VyY2UnICsgZGF0YVsnaWQnXSA9PSBjbGFzc05MaXN0W2ldKSB7IGpnID0gMTsgfQ0KICAgICAgICAgICAgICAgICAgaWYgKCd0YXJnZXQnICsgZGF0YVsnaWQnXSA9PSBjbGFzc05MaXN0W2ldKSB7IGpnID0gMTsgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoamcgPT0gMSkgew0KICAgICAgICAgICAgICAgICAgLy8gY2xhc3NOICs9ICIgYWN0aXZlUyI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBjbGFzc047DQogICAgICAgICAgICAgIH0pDQogICAgICAgICAgfQ0KICAgICAgICB9KQ0KICAgICAgICAub24oIm1vdXNlbGVhdmUiLCBmdW5jdGlvbiAoZCkgew0KICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hdHRyKCJyIiwgcikNCg0KICAgICAgICAgIF90aGlzLm92ZXJFbnRpdHlJZCA9ICIiLy9fdGhpcy5jdXJFbnRJZDsNCiAgICAgICAgICBsZXQgY2xhc3NOID0gZDMuc2VsZWN0KHRoaXMpLmF0dHIoImNsYXNzIik7DQoNCiAgICAgICAgICBsZXQgaWROID0gZDMuc2VsZWN0KHRoaXMpLmF0dHIoImlkIikuc3BsaXQoIl8iKVsxXQ0KICAgICAgICAgIGxldCBzaG93UmVsID0gX3RoaXMuc2hvd0VudGl0eVJlbElkTGlzdA0KICAgICAgICAgIGlmIChfdGhpcy5zaG93RW50aXR5UmVsSWRPdmVyU3RhdGUgPT0gMSkgew0KICAgICAgICAgICAgc2hvd1JlbC5wdXNoKHBhcnNlSW50KGlkTikpDQogICAgICAgICAgfQ0KICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgc2hvd1JlbC5zcGxpY2Uoc2hvd1JlbC5pbmRleE9mKHBhcnNlSW50KGlkTikpLCAxKQ0KICAgICAgICAgIH0NCiAgICAgICAgICBfdGhpcy5zaG93RW50aXR5UmVsSWRMaXN0ID0gc2hvd1JlbDsNCg0KICAgICAgICAgIGlmIChjbGFzc04gPT0gJ2xpbmVQb2ludCcpIHsNCiAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hdHRyKCJvcGFjaXR5IiwgMCkuYXR0cigiciIsIDUpDQogICAgICAgICAgfQ0KICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgZDMuc2VsZWN0QWxsKCIuZiIgKyBkYXRhWydpZCddKQ0KICAgICAgICAgICAgICAuYXR0cigidHJhbnNmb3JtIiwgZnVuY3Rpb24gKGQpIHsNCiAgICAgICAgICAgICAgICBsZXQgdHJhbnNmb3JtZCA9IGQzLnNlbGVjdCh0aGlzKS5hdHRyKCJ0cmFuc2Zvcm0iKQ0KICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1kLnNwbGl0KCIgIilbMF0gKyAiIHNjYWxlKDEpIg0KICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgZDMuc2VsZWN0KCIjZ3JhcGhQYW5lbCIpLnNlbGVjdEFsbCgicGF0aCIpDQogICAgICAgICAgICAgIC5hdHRyKCJjbGFzcyIsIGZ1bmN0aW9uIChkKSB7DQogICAgICAgICAgICAgICAgbGV0IHRoaXNTZWxlY3QgPSBkMy5zZWxlY3QodGhpcykNCiAgICAgICAgICAgICAgICBsZXQgY2xhc3NOID0gdGhpc1NlbGVjdC5hdHRyKCJjbGFzcyIpOw0KICAgICAgICAgICAgICAgIGxldCBjbGFzc05MaXN0ID0gY2xhc3NOLnNwbGl0KCIgIikNCiAgICAgICAgICAgICAgICBpZiAoY2xhc3NOTGlzdFtjbGFzc05MaXN0Lmxlbmd0aCAtIDFdID09ICJhY3RpdmVTIikgew0KICAgICAgICAgICAgICAgICAgY2xhc3NOID0gIiI7DQogICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNsYXNzTkxpc3QubGVuZ3RoIC0gMTsgaSsrKSB7DQogICAgICAgICAgICAgICAgICAgIGNsYXNzTiArPSAiICIgKyBjbGFzc05MaXN0W2ldOw0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gY2xhc3NODQogICAgICAgICAgICAgIH0pDQogICAgICAgICAgfQ0KICAgICAgICB9KQ0KICAgICAgICAub24oImNsaWNrIiwgZnVuY3Rpb24gKGQpIHsNCg0KICAgICAgICAgIGxldCBpZE4gPSBkMy5zZWxlY3QodGhpcykuYXR0cigiaWQiKS5zcGxpdCgiXyIpWzFdDQogICAgICAgICAgbGV0IHNob3dSZWwgPSBfdGhpcy5zaG93RW50aXR5UmVsSWRMaXN0Ow0KICAgICAgICAgIC8vICAtIF90aGlzLnNob3dFbnRpdHlSZWxJZE92ZXJTdGF0ZTsNCiAgICAgICAgICBpZiAoIXNob3dSZWwuaW5jbHVkZXMocGFyc2VJbnQoaWROKSkpIHsNCiAgICAgICAgICAgIHNob3dSZWwgPSBbKHBhcnNlSW50KGlkTikpXQ0KICAgICAgICAgICAgX3RoaXMuc2hvd0VudGl0eVJlbElkT3ZlclN0YXRlID0gMTsNCiAgICAgICAgICB9DQogICAgICAgICAgZWxzZSBpZiAoc2hvd1JlbC5pbmNsdWRlcyhwYXJzZUludChpZE4pKSkgew0KICAgICAgICAgICAgLy8gc2hvd1JlbC5maWx0ZXIoaXRlbT0+e3JldHVybiBpdGVtPT1wYXJzZUludChpZE4pfSkNCiAgICAgICAgICAgIF90aGlzLnNob3dFbnRpdHlSZWxJZE92ZXJTdGF0ZSA9IDA7DQogICAgICAgICAgICBzaG93UmVsLnNwbGljZShzaG93UmVsLmluZGV4T2YocGFyc2VJbnQoaWROKSksIDEpDQogICAgICAgICAgfQ0KICAgICAgICAgIF90aGlzLnNob3dFbnRpdHlSZWxJZExpc3QgPSBzaG93UmVsOw0KDQogICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmF0dHIoInIiLCByKTsNCiAgICAgICAgICBkMy5zZWxlY3RBbGwoIi5mIiArIGRhdGFbJ2lkJ10pDQogICAgICAgICAgICAuYXR0cigidHJhbnNmb3JtIiwgZnVuY3Rpb24gKGQpIHsNCiAgICAgICAgICAgICAgbGV0IHRyYW5zZm9ybWQgPSBkMy5zZWxlY3QodGhpcykuYXR0cigidHJhbnNmb3JtIikNCiAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybWQuc3BsaXQoIiAiKVswXSArICIgc2NhbGUoMSkiDQogICAgICAgICAgICB9KQ0KICAgICAgICAgIGxldCB0aGlzSWQgPSB0aGlzLmlkLnNwbGl0KCJfIilbMV07DQogICAgICAgICAgX3RoaXMuY3VyRW50SWQgPSB0aGlzSWQ7DQogICAgICAgICAgbGV0IHRoaXNEYXRhID0gX3RoaXMuZHJhd0VudGl0eUxvY2F0aW9uLmZpbmQoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGFbJ2lkJ10gPT0gdGhpc0lkIH0pDQogICAgICAgICAgbGV0IHRoaXNUaW1lID0gdGhpc0RhdGFbJ3RpbWUnXTsNCiAgICAgICAgICBfdGhpcy5jbGlja19FbnQodGhpc1RpbWUpOw0KICAgICAgICAgIGxldCBwc3ZnID0gZDMuc2VsZWN0KCIjZW50RyIpOw0KICAgICAgICAgIGxldCBkdyA9IHBzdmcuYXR0cigid2lkdGgiKTsNCiAgICAgICAgICBsZXQgZGggPSBwc3ZnLmF0dHIoImhlaWdodCIpOw0KICAgICAgICAgIHBzdmcucmVtb3ZlKCk7DQogICAgICAgICAgbGV0IHN2ZyA9IGQzLnNlbGVjdCgnI2VkaXRFbnQnKS5hcHBlbmQoImciKS5hdHRyKCJpZCIsICJlbnRHIikuYXR0cigid2lkdGgiLCBkdykuYXR0cigiaGVpZ2h0IiwgZGgpOw0KICAgICAgICAgIF90aGlzLmRyYXdFbnRpdHkoc3ZnLCBkdy8yLCAxMDAsIHIsIHRoaXNEYXRhLDEpDQogICAgICAgICAgLy8gaWYgKHRoaXNEYXRhWyd0eXBlJ10gPT0gMCApIHsNCiAgICAgICAgICAgIF90aGlzLmRyYXdFbnRpdHlUaW1lQXhpcyhzdmcsdGhpc0RhdGEsW2R3LzIsMTAwLHJdKTsNCiAgICAgICAgLy8gfQ0KICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXNUaW1lLHRoaXNJZCx0aGlzRGF0YSkNCiAgICAgICAgfSkNCiAgICAgICAgLm9uKCJjb250ZXh0bWVudSIsIGZ1bmN0aW9uIChkLCBpKSB7DQogICAgICAgICAgZC5wcmV2ZW50RGVmYXVsdCgpOw0KDQogICAgICAgICAgaWYgKF90aGlzLmJ0bkVkaSkgew0KICAgICAgICAgICAgX3RoaXMuZWRpdERpdlNob3cgPSB0cnVlOw0KICAgICAgICAgICAgX3RoaXMuJHJlZnMuZWRpdERpdi5zdHlsZS50b3AgPSBgJHtkLmNsaWVudFl9cHhgOw0KICAgICAgICAgICAgX3RoaXMuJHJlZnMuZWRpdERpdi5zdHlsZS5sZWZ0ID0gYCR7ZC5jbGllbnRYfXB4YDsNCiAgICAgICAgICB9DQogICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICBsZXQgdGhpc0lkID0gdGhpcy5pZC5zcGxpdCgiXyIpWzFdOw0KICAgICAgICAgICAgbGV0IHRoaXNTaG93RW50aXR5RGF0YSA9IF90aGlzLnNob3dFbnRpdHlMaXN0LmZpbmQoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGRbJ2lkJ10gPT0gdGhpc0lkIH0pOw0KICAgICAgICAgICAgbGV0IHRoaXNTb25zID0gdGhpc1Nob3dFbnRpdHlEYXRhWydzb24nXTsNCiAgICAgICAgICAgIGlmICh0aGlzU29ucy5sZW5ndGggIT0gMCkgew0KICAgICAgICAgICAgICBsZXQgc29ucyA9IHRvb2xzLmRlZXBDbG9uZSh0aGlzU29ucyk7DQogICAgICAgICAgICAgIGxldCBzaG93SmFnZSA9IGZhbHNlOw0KICAgICAgICAgICAgICBsZXQgaSA9IDANCiAgICAgICAgICAgICAgd2hpbGUgKChzb25zLmxlbmd0aCA+IDApKSB7DQogICAgICAgICAgICAgICAgbGV0IHMgPSBzb25zWzBdOw0KICAgICAgICAgICAgICAgIHNvbnMuc3BsaWNlKDAsIDEpOw0KICAgICAgICAgICAgICAgIGxldCBjdXJzb24gPSBfdGhpcy5zaG93RW50aXR5TGlzdC5maW5kKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkWydpZCddID09IHMgKyAnJyB9KQ0KICAgICAgICAgICAgICAgIGlmIChpID09IDApIHsNCiAgICAgICAgICAgICAgICAgIGkrKzsNCiAgICAgICAgICAgICAgICAgIHNob3dKYWdlID0gIWN1cnNvblsnc2hvdyddDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIC8vIFsnc2hvdyddID0gIV90aGlzLnNob3dFbnRpdHlMaXN0LmZpbmQoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGRbJ2lkJ10gPT0gdGhpc1NvbnNbc10gfSlbJ3Nob3cnXQ0KICAgICAgICAgICAgICAgIGN1cnNvblsnc2hvdyddID0gc2hvd0phZ2U7DQogICAgICAgICAgICAgICAgbGV0IGN1cmdzb24gPSBjdXJzb25bJ3NvbiddOw0KICAgICAgICAgICAgICAgIGlmICghc2hvd0phZ2UpIHsNCiAgICAgICAgICAgICAgICAgIGZvciAobGV0IGdzID0gMDsgZ3MgPCBjdXJnc29uLmxlbmd0aDsgZ3MrKykgew0KICAgICAgICAgICAgICAgICAgICBzb25zLnB1c2goY3VyZ3Nvbltnc10pOw0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0NCiAgICAgICAgICBfdGhpcy51cGRhdGFHcmFwaCgpDQogICAgICAgIH0pOw0KICAgICAgLy8gLm9uKCIiKQ0KICAgIH0sDQogICAgZHJhd1JlY3Qoc3ZnLCB4LCB5LCB3LCBoLCByeCwgcnksIGZpbGwsIG9wYWNpdHksIHN0cm9rZSwgaWQgPSAncmVjdCcsIHN0cm9rZVcgPSAxLjUsIGNsYXNzTiA9ICdyZWN0Jykgew0KICAgICAgZDMuc2VsZWN0KGAjJHtpZH1gKS5yZW1vdmUoKQ0KICAgICAgbGV0IHJlY3QgPSBzdmcuYXBwZW5kKCJyZWN0IikNCiAgICAgICAgLmF0dHIoImlkIiwgaWQpDQogICAgICAgIC5hdHRyKCJjbGFzcyIsIGNsYXNzTikNCiAgICAgICAgLmF0dHIoIngiLCB4KQ0KICAgICAgICAuYXR0cigieSIsIHkpDQogICAgICAgIC5hdHRyKCJyeCIsIHJ4KQ0KICAgICAgICAuYXR0cigicnkiLCByeSkNCiAgICAgICAgLmF0dHIoImhlaWdodCIsIGgpDQogICAgICAgIC5hdHRyKCJ3aWR0aCIsIHcpIC8v5Yia5omN6K6+572u55qE5Z2X55qE5a695bqmDQogICAgICAgIC5hdHRyKCJmaWxsIiwgZmlsbCkNCiAgICAgICAgLmF0dHIoIm9wYWNpdHkiLCBvcGFjaXR5KQ0KICAgICAgICAuYXR0cigic3Ryb2tlIiwgc3Ryb2tlKQ0KICAgICAgICAuYXR0cigic3Ryb2tlLXdpZHRoIiwgYCR7c3Ryb2tlV31weGApOw0KICAgICAgcmV0dXJuIHJlY3Q7DQogICAgfSwNCiAgICBkcmF3VHh0KHN2ZywgeCwgeSwgd2lkdGgsIHR4dHMsIGZpbGwsIGZvbnRzaXplID0gMTIsIGlkTiwgY2xhc3NOID0gInRleHQiKSB7DQogICAgICBsZXQgdHggPSB4Ow0KICAgICAgbGV0IHR5ID0geTsNCiAgICAgIGxldCBwcmVXaWR0aCA9IDA7DQogICAgICBsZXQgcHJlSWROID0gMDsNCiAgICAgIGxldCBwcmV0ZXh0ID0gJycNCiAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgdHh0cy5sZW5ndGg7IHQrKykgew0KICAgICAgICBwcmV0ZXh0ICs9ICIgIiArIHR4dHNbdF07DQogICAgICAgIGxldCB0eHQgPSBzdmcuYXBwZW5kKCJ0ZXh0IikNCiAgICAgICAgICAuYXR0cigieSIsIHR5KQ0KICAgICAgICAgIC5hdHRyKCJ4IiwgdHgpDQogICAgICAgICAgLmF0dHIoImlkIiwgYCR7aWROfV8ke3R9YCkNCiAgICAgICAgICAuYXR0cigiY2xhc3MiLCBgJHtjbGFzc059YCkNCiAgICAgICAgICAuYXR0cigiZmlsbCIsIGZpbGwpDQogICAgICAgICAgLmF0dHIoImZvbnQtc2l6ZSIsIGZvbnRzaXplKQ0KICAgICAgICAgIC5zdHlsZSgidGV4dC1hbmNob3IiLCAibWlkZGxlIikNCiAgICAgICAgICAudGV4dChwcmV0ZXh0KQ0KICAgICAgICBsZXQgdGV4dFdpZHRoID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7aWROfV8ke3R9YCkuZ2V0QkJveCgpLndpZHRoOw0KICAgICAgICBpZiAoKHRleHRXaWR0aCA+IHdpZHRoKSB8fCAodCA9PSB0eHRzLmxlbmd0aCAtIDEpKSB7DQogICAgICAgICAgcHJldGV4dCA9ICcnOw0KICAgICAgICAgIHR4ID0geDsNCiAgICAgICAgICB0eSArPSAyNTsNCiAgICAgICAgfQ0KICAgICAgICBlbHNlIHsNCiAgICAgICAgICB0eHQucmVtb3ZlKCkNCiAgICAgICAgfQ0KICAgICAgICBwcmVXaWR0aCArPSB0ZXh0V2lkdGg7DQogICAgICB9DQogICAgfSwNCiAgICBkcmF3VGltZUxpbmUoc3ZnLCBwYXRoLCBzdHJva2UsIHdpZHRoLCBzdHJva2VfZGFzaGFycmF5ID0gIjAiLCBpZE5hbWUsIGNsYXNzTmFtZSkgew0KICAgICAgc3ZnLmFwcGVuZCgncGF0aCcpDQogICAgICAgIC5hdHRyKCdkJywgcGF0aC50b1N0cmluZygpKQ0KICAgICAgICAuYXR0cignc3Ryb2tlJywgc3Ryb2tlKQ0KICAgICAgICAuYXR0cignY2xhc3MnLCBjbGFzc05hbWUpDQogICAgICAgIC5hdHRyKCdpZCcsIGlkTmFtZSkNCiAgICAgICAgLmF0dHIoInN0cm9rZS1kYXNoYXJyYXkiLCBzdHJva2VfZGFzaGFycmF5KQ0KICAgICAgICAuYXR0cignc3Ryb2tlLXdpZHRoJywgd2lkdGgpDQogICAgICAgIC5hdHRyKCdmaWxsJywgJ25vbmUnKQ0KICAgICAgICAub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uIChkKSB7DQogICAgICAgICAgbGV0IHRoaXNTZWxlY3QgPSBkMy5zZWxlY3QodGhpcykNCiAgICAgICAgICBsZXQgY2xhc3NOID0gdGhpc1NlbGVjdC5hdHRyKCJjbGFzcyIpOw0KICAgICAgICAgIGxldCBpZE4gPSB0aGlzU2VsZWN0LmF0dHIoImlkIik7DQogICAgICAgICAgaWYgKGNsYXNzTi5zcGxpdCgiICIpWzBdID09ICJiYXNpY1JlbCIpIHsNCiAgICAgICAgICAgIC8vIGQzLnNlbGVjdCh0aGlzKS5hdHRyKCJjbGFzcyIsIGNsYXNzTiArICIgYWN0aXZlUyIpOw0KICAgICAgICAgIH0NCiAgICAgICAgfSkNCiAgICAgICAgLm9uKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKGQpIHsNCiAgICAgICAgICBsZXQgdGhpc1NlbGVjdCA9IGQzLnNlbGVjdCh0aGlzKQ0KICAgICAgICAgIGxldCBjbGFzc04gPSB0aGlzU2VsZWN0LmF0dHIoImNsYXNzIik7DQogICAgICAgICAgbGV0IGNsYXNzTkxpc3QgPSBjbGFzc04uc3BsaXQoIiAiKQ0KICAgICAgICAgIGlmIChjbGFzc05MaXN0W2NsYXNzTkxpc3QubGVuZ3RoIC0gMV0gPT0gImFjdGl2ZVMiKSB7DQogICAgICAgICAgICBjbGFzc04gPSAiIjsNCiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2xhc3NOTGlzdC5sZW5ndGggLSAxOyBpKyspIHsNCiAgICAgICAgICAgICAgY2xhc3NOICs9IGNsYXNzTkxpc3RbaV0gKyAiICI7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuYXR0cigiY2xhc3MiLCBjbGFzc04pOw0KICAgICAgICAgIH0NCiAgICAgICAgfSkNCiAgICB9LA0KICAgIHRyYW5zZm9ybUdyYXBoU3ZnKGZsYWcpIHsNCiAgICAgIGNvbnN0IF90aGlzID0gdGhpczsNCiAgICAgIGxldCBncm91cHMgPSBfdGhpcy5ncm91cHNTdmc7DQoNCiAgICAgIGxldCBzY2FsZVByZSA9IF90aGlzLmdyYXBoU3ZnU2NhbGU7DQoNCiAgICAgIGxldCBtYXJnaW4gPSBfdGhpcy5tYXJnaW47DQogICAgICBpZiAoZmxhZyA9PSAnbGVmdCcpIHsNCiAgICAgICAgX3RoaXMuZ3JhcGhHVHJhbnNmb3JtWCArPSAxMDsNCiAgICAgIH0NCiAgICAgIGlmIChmbGFnID09ICdyaWdodCcpIHsNCiAgICAgICAgX3RoaXMuZ3JhcGhHVHJhbnNmb3JtWCAtPSAxMDsNCiAgICAgIH0NCiAgICAgIC8vIGdyb3Vwcy5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyAoX3RoaXMuZ3JhcGhHVHJhbnNmb3JtWCkgKyAnLCcgKyAobWFyZ2luLnRvcCkgKyAnKSBzY2FsZSgnICsgKHNjYWxlUHJlKSArICcpJykNCiAgICB9LA0KICAgIHVwZGF0YUFzc2lzdEdyYXBoUGFuZWwoKSB7DQogICAgICBjb25zdCBfdGhpcyA9IHRoaXM7DQogICAgICB2YXIgY29udGVudCA9IHRoaXMuZ3JvdXBzU3ZnLmh0bWwoKTsNCiAgICAgIGxldCBoZWlnaHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYXNzaXN0R3JhcGhQYW5lbCIpLmNsaWVudEhlaWdodDsNCiAgICAgIGxldCB3aWR0aCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhc3Npc3RHcmFwaFBhbmVsIikuY2xpZW50V2lkdGg7DQogICAgICBkMy5zZWxlY3QoJyNhc3Npc3RHcmFwaFBhbmVsJykuc2VsZWN0KCdzdmcnKS5yZW1vdmUoKTsNCiAgICAgIGxldCB0cmFuc1ggPSBfdGhpcy5hc3Npc3RHVHJhbnNmb3JtWDsNCiAgICAgIGxldCB0cmFuc1kgPSBfdGhpcy5hc3Npc3RHVHJhbnNmb3JtWTsNCiAgICAgIHZhciBkaXYgPSBkMy5zZWxlY3QoJyNhc3Npc3RHcmFwaFBhbmVsJykNCiAgICAgICAgLmFwcGVuZCgnc3ZnJykNCiAgICAgICAgLmF0dHIoIndpZHRoIiwgd2lkdGgpDQogICAgICAgIC5hdHRyKCJoZWlnaHQiLCBoZWlnaHQpDQogICAgICAgIC5hcHBlbmQoImciKQ0KICAgICAgICAuYXR0cigidHJhbnNmb3JtIiwgYHRyYW5zbGF0ZSgke3RyYW5zWH0sJHt0cmFuc1l9KWApDQogICAgICAgIC5odG1sKGNvbnRlbnQpOw0KICAgIH0sDQogICAgbW92ZUdyYXBoTGVmdChlKSB7DQogICAgICBjb25zdCBfdGhpcyA9IHRoaXM7DQogICAgICBfdGhpcy5tb3ZlRmxhZyA9PSB0cnVlOw0KICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLm1vdmVUaW1lcikvLyDmuIXpmaTlrprml7blmagNCiAgICAgIHRoaXMubW92ZVRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4geyBfdGhpcy50cmFuc2Zvcm1HcmFwaFN2ZygibGVmdCIpIH0sIDEwKS8vX3RoaXMudHJhbnNmb3JtR3JhcGhTdmcoJ2xlZnQnKSwgMTAwKTsNCiAgICB9LA0KICAgIG1vdmVHcmFwaFJpZ2h0KGUpIHsNCiAgICAgIGNvbnN0IF90aGlzID0gdGhpczsNCiAgICAgIC8vIGNvbnNvbGUubG9nKCLimqHwn5Cy8J+rp+KdhO+4j/CfkYHvuI8iLGUpDQogICAgICBjbGVhckludGVydmFsKHRoaXMubW92ZVRpbWVyKS8vIOa4hemZpOWumuaXtuWZqA0KICAgICAgX3RoaXMubW92ZUZsYWcgPT0gdHJ1ZTsNCiAgICAgIHRoaXMubW92ZVRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4geyBfdGhpcy50cmFuc2Zvcm1HcmFwaFN2ZygicmlnaHQiKSB9LCAxMCkvL190aGlzLnRyYW5zZm9ybUdyYXBoU3ZnKCdsZWZ0JyksIDEwMCk7DQogICAgfSwNCiAgICBsZWF2ZUdyYXBoTW92ZSgpIHsNCiAgICAgIC8vIHRoaXMubW92ZUZsYWcgPT0gZmFsc2U7DQogICAgICBjbGVhckludGVydmFsKHRoaXMubW92ZVRpbWVyKS8vIOa4hemZpOWumuaXtuWZqA0KICAgICAgLy8gdGhpcy5ncmFwaEdUcmFuc2Zvcm1YID0gMDsNCiAgICB9LA0KICAgIHVwZGF0YUdyYXBoKCkgew0KICAgICAgdmFyIF90aGlzID0gdGhpczsNCiAgICAgIGxldCBtYXJnaW4gPSBfdGhpcy5tYXJnaW4NCiAgICAgIGxldCB3aWR0aCA9IF90aGlzLiRyZWZzLmdyYXBoRGl2Lm9mZnNldFdpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7DQogICAgICBsZXQgaGVpZ2h0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImdyYXBoUGFuZWwiKS5jbGllbnRIZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTsNCiAgICAgIGxldCBoZWlnaHRUaW1lQXhpcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJncmFwaFRpbWVBeGlzUGFuZWwiKS5jbGllbnRIZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTsNCiAgICAgIF90aGlzLndpZHRoID0gd2lkdGg7DQogICAgICBfdGhpcy5oZWlnaHQgPSBoZWlnaHQ7DQogICAgICBkMy5zZWxlY3QoIiNncmFwaFBhbmVsIikuc2VsZWN0KCJzdmciKS5yZW1vdmUoKQ0KICAgICAgdmFyIHN2ZyA9IGQzLnNlbGVjdCgiI2dyYXBoUGFuZWwiKS5hcHBlbmQoInN2ZyIpDQogICAgICAgIC5hdHRyKCJ3aWR0aCIsIHdpZHRoKQ0KICAgICAgICAuYXR0cigiaGVpZ2h0IiwgaGVpZ2h0KTsNCiAgICAgIF90aGlzLnJvb3RTdmcgPSBzdmc7DQogICAgICBkMy5zZWxlY3QoIiNncmFwaFRpbWVBeGlzUGFuZWwiKS5zZWxlY3QoInN2ZyIpLnJlbW92ZSgpDQogICAgICB2YXIgVGltZUF4aXNTdmcgPSBkMy5zZWxlY3QoIiNncmFwaFRpbWVBeGlzUGFuZWwiKS5hcHBlbmQoInN2ZyIpDQogICAgICAgIC5hdHRyKCJ3aWR0aCIsIHdpZHRoKQ0KICAgICAgICAuYXR0cigiaGVpZ2h0IiwgaGVpZ2h0KTsNCiAgICAgIF90aGlzLlRpbWVBeGlzU3ZnID0gVGltZUF4aXNTdmc7DQogICAgICBsZXQgZGF0YSA9IF90aGlzLmRhdGE7DQoNCiAgICAgIGxldCBtYXhESW1wb3J0YW5jZSA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIGRhdGEubWFwKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkWydhdHRyaWJ1dGUnXVsnaW1wb3J0YW5jZSddOyB9KSkNCiAgICAgIGxldCBtaW5ESW1wb3J0YW5jZSA9IE1hdGgubWluLmFwcGx5KE1hdGgsIGRhdGEubWFwKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkWydhdHRyaWJ1dGUnXVsnaW1wb3J0YW5jZSddOyB9KSkNCiAgICAgIGxldCBtYXhEUmVsZXZhbmNlID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgZGF0YS5tYXAoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGRbJ2F0dHJpYnV0ZSddWydyZWxldmFuY2UnXTsgfSkpDQogICAgICBsZXQgbWluRFJlbGV2YW5jZSA9IE1hdGgubWluLmFwcGx5KE1hdGgsIGRhdGEubWFwKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkWydhdHRyaWJ1dGUnXVsncmVsZXZhbmNlJ107IH0pKQ0KICAgICAgbGV0IG1heEREdXJhdGlvbiA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIGRhdGEubWFwKGZ1bmN0aW9uIChkKSB7IHJldHVybiB0b29scy50aW1lMnNlY29uZHMoZFsndGltZSddWzFdKSAtIHRvb2xzLnRpbWUyc2Vjb25kcyhkWyd0aW1lJ11bMF0pOyB9KSkNCiAgICAgIGxldCBtYXhUb3RhbER1cmF0aW9uID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgZGF0YS5tYXAoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGRbJ3RvdGFsRHVyYXRpb24nXTsgfSkpDQogICAgICBfdGhpcy5kcmF3RW50aXR5TG9jYXRpb24gPSBbXTsNCiAgICAgIF90aGlzLm1pbkRJbXBvcnRhbmNlID0gbWluREltcG9ydGFuY2U7DQogICAgICBfdGhpcy5tYXhESW1wb3J0YW5jZSA9IG1heERJbXBvcnRhbmNlOw0KICAgICAgX3RoaXMubWluRFJlbGV2YW5jZSA9IG1pbkRSZWxldmFuY2U7DQogICAgICBfdGhpcy5tYXhEUmVsZXZhbmNlID0gbWF4RFJlbGV2YW5jZTsNCiAgICAgIF90aGlzLm1heEREdXJhdGlvbiA9IG1heEREdXJhdGlvbjsNCiAgICAgIF90aGlzLm1heFRvdGFsRHVyYXRpb24gPSBtYXhUb3RhbER1cmF0aW9uOw0KDQogICAgICBsZXQgY3VycmVudE1heENvbG9yID0gX3RoaXMuaW1wb3J0YW5jZU1heENvbG9yOw0KICAgICAgbGV0IGN1cnJlbnRNaW5Db2xvciA9IF90aGlzLmltcG9ydGFuY2VNaW5Db2xvcjsNCiAgICAgIF90aGlzLmltcG9ydGFuY2VDb2xvcl9saW5lYXIgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbbWluREltcG9ydGFuY2UsIG1heERJbXBvcnRhbmNlXSkucmFuZ2UoWzAsIDFdKTsNCiAgICAgIF90aGlzLiRidXMuJGVtaXQoImltcG9ydGFuY2VMaW5lYXIiLCBbbWluREltcG9ydGFuY2UsIG1heERJbXBvcnRhbmNlXSk7DQogICAgICBfdGhpcy5pbXBvcnRhbmNlQ29tcHV0ZV9jb2xvciA9IGQzLmludGVycG9sYXRlKGN1cnJlbnRNaW5Db2xvciwgY3VycmVudE1heENvbG9yKTsNCiAgICAgIF90aGlzLnJlbGV2YW5jZVNjYWxlX2xpbmVhciA9IGQzLnNjYWxlTGluZWFyKFttaW5EUmVsZXZhbmNlLCBtYXhEUmVsZXZhbmNlXSwgWzIwLCA1MF0pDQogICAgICBfdGhpcy50b3RhbER1cmF0aW9uU2NhbGVfbGluZWFyID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWzAsIG1heFRvdGFsRHVyYXRpb25dKS5yYW5nZShbMjAsIDYwXSk7DQoNCiAgICAgIF90aGlzLmRyYXdNYWluKHN2Zyk7DQogICAgICAvLyB9KTsNCiAgICB9LA0KICAgIHpvb21JbkxheW91dENsaygpIHsNCiAgICAgIGNvbnN0IF90aGlzID0gdGhpczsNCiAgICAgIF90aGlzLmxheW91dFNob3cgKz0gMTsNCiAgICAgIGlmIChfdGhpcy5sYXlvdXRTaG93ID4gMykgew0KICAgICAgICBfdGhpcy5sYXlvdXRTaG93ID0gMzsNCiAgICAgIH0NCiAgICAgIC8vIF90aGlzLnVwZGF0YUdyYXBoKCk7DQogICAgfSwNCiAgICB6b29tT3V0TGF5b3V0Q2xrKCkgew0KICAgICAgY29uc3QgX3RoaXMgPSB0aGlzOw0KICAgICAgX3RoaXMubGF5b3V0U2hvdyAtPSAxOw0KICAgICAgaWYgKF90aGlzLmxheW91dFNob3cgPCAwKSB7DQogICAgICAgIF90aGlzLmxheW91dFNob3cgPSAwOw0KICAgICAgfQ0KICAgICAgLy8gX3RoaXMudXBkYXRhR3JhcGgoKTsNCg0KICAgIH0sDQogICAgY2xpY2tfRW50KHRpbWUpIHsNCiAgICAgIHRoaXMuJGVtaXQoInRpbWVEdXIiLCB0aW1lKTsNCiAgICB9LA0KICB9LA0KICBjcmVhdGVkKCkgew0KICAgIHZhciBfdGhpcyA9IHRoaXM7DQogICAgbGV0IG1hcmdpbiA9IF90aGlzLm1hcmdpbg0KICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsNCiAgICAgIF90aGlzLnVwZGF0YUdyYXBoKCk7DQogICAgICBfdGhpcy51cGRhdGFBc3Npc3RHcmFwaFBhbmVsKCk7DQogICAgfSk7DQogIH0sDQogIG1vdW50ZWQoKSB7DQogICAgY29uc3QgX3RoaXMgPSB0aGlzOw0KICAgIGxldCB3aWR0aCA9IF90aGlzLiRyZWZzLmdyYXBoRGl2Lm9mZnNldFdpZHRoOw0KICAgIGxldCBoZWlnaHQgPSBfdGhpcy5oZWlnaHQ7DQogICAgbGV0IHNob3dFbnRpdHlMaXN0ID0gdG9vbHMuZGVlcENsb25lKF90aGlzLmRhdGEpOw0KICAgIGZvciAobGV0IGUgaW4gc2hvd0VudGl0eUxpc3QpIHsNCiAgICAgIHNob3dFbnRpdHlMaXN0W2VdWydzaG93J10gPSB0cnVlOw0KICAgIH0NCiAgICBfdGhpcy5zaG93RW50aXR5TGlzdCA9IHNob3dFbnRpdHlMaXN0Ow0KICAgIC8vIGxldCB3aWR0aCA9IF90aGlzLndpZHRoOw0KICAgIHRoaXMuJGJ1cy4kb24oJ2dyYXBoRGF0YScsICh2YWwpID0+IHsNCiAgICAgIF90aGlzLmRhdGEgPSB2YWw7DQogICAgICBsZXQgc2hvd0VudGl0eUxpc3QgPSB0b29scy5kZWVwQ2xvbmUoX3RoaXMuZGF0YSk7DQogICAgICBmb3IgKGxldCBlIGluIHNob3dFbnRpdHlMaXN0KSB7DQogICAgICAgIHNob3dFbnRpdHlMaXN0W2VdWydzaG93J10gPSB0cnVlOw0KICAgICAgfQ0KICAgICAgX3RoaXMuc2hvd0VudGl0eUxpc3QgPSBzaG93RW50aXR5TGlzdDsNCiAgICAgIF90aGlzLnVwZGF0YUdyYXBoKCk7DQogICAgfSk7DQogICAgdGhpcy4kYnVzLiRvbigndG9waWNSZWN0dXAnLCAodmFsKSA9PiB7DQogICAgICBfdGhpcy5lZGl0Q29uZmlybSgpOw0KICAgIH0pOw0KICAgIHRoaXMuJGJ1cy4kb24oJ3N3aXRjaEwnLCAodmFsKSA9PiB7DQogICAgICBfdGhpcy5zd2l0Y2hMID0gdmFsOw0KICAgIH0pOw0KDQogICAgLy8gdGhpcy4kcmVmcy5tb3ZlR3JhcGhMZWZ0LmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlb3ZlciIsIF90aGlzLm1vdmVHcmFwaExlZnQpOyAvLyDnm5HlkKzngrnlh7vkuovku7YNCiAgICAvLyB0aGlzLiRyZWZzLm1vdmVHcmFwaFJpZ2h0LmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlbW92ZSIsIF90aGlzLm1vdmVHcmFwaFJpZ2h0KTsgLy8g55uR5ZCs54K55Ye75LqL5Lu2DQogICAgLy8gdGhpcy4kcmVmcy5tb3ZlR3JhcGhMZWZ0LmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlbGVhdmUiLCBfdGhpcy5sZWF2ZUdyYXBoTW92ZSk7IC8vIOebkeWQrOeCueWHu+S6i+S7tg0KICAgIC8vIHRoaXMuJHJlZnMubW92ZUdyYXBoUmlnaHQuYWRkRXZlbnRMaXN0ZW5lcigibW91c2VsZWF2ZSIsIF90aGlzLmxlYXZlR3JhcGhNb3ZlKTsgLy8g55uR5ZCs54K55Ye75LqL5Lu2DQoNCiAgfSwNCiAgYmVmb3JlRGVzdHJveSgpIHsNCiAgICBjbGVhckludGVydmFsKHRoaXMubW92ZVRpbWVyKTsNCiAgfSwNCn0gDQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"index.vue","sourceRoot":"src/components/Graph","sourcesContent":["<!-- eslint-disable no-unused-vars -->\r\n<!-- eslint-disable no-unused-vars -->\r\n\r\n<template>\r\n  <div class=\"graph\" ref=\"graphDiv\" >\r\n    <!-- <div class=\"panelHead\">ConceptMap</div> -->\r\n    <div id=\"loadLoadingPanel\" class=\"\" v-loading=\"loadLoading\" v-show=\"loadLoading\">\r\n    </div>    \r\n    <div id=\"graphTimeAxisPanel\" class=\"\">\r\n    </div>\r\n    <div id=\"editConfirm\" v-show=\"editConfirmShow\" @click=\"editConfirm\">\r\n      <img class=\"editConfirm\" :src=\"editConfirmUrl\" @click=\"editConfirm\">\r\n    </div>\r\n    <div id=\"graphPanel\" class=\"panelBody\">\r\n    </div>\r\n    <!-- <div id=\"moveLeft\" ref=\"moveGraphLeft\"></div>\r\n                    <div id=\"moveRight\" ref=\"moveGraphRight\"></div> -->\r\n    <div id=\"assistGraphPanel\" class=\"panel\">\r\n      <div class=\"panelHead\"></div>\r\n    </div>\r\n\r\n    <div v-show=\"editDivShow\" ref=\"editDiv\" id=\"editDiv\" class=\"panel\">\r\n      <div id=\"editAdd\" @click=\"addNode\">\r\n        <img class=\"editIcons1\" :src=\"editAddUrl\" @click=\"addNode\">\r\n        Add sibling\r\n      </div>\r\n      <div id=\"editAddN\" @click=\"addNodeN\">\r\n        <img class=\"editIcons2\" :src=\"editAddNUrl\" @click=\"addNodeN\">\r\n        Add in next level\r\n      </div>\r\n      <div id=\"editDel\" @click=\"delNode\">\r\n        <img class=\"editIcons editDelIcons\" :src=\"editDelUrl\" @click=\"delNode\">\r\n        Delete\r\n      </div>\r\n    </div>\r\n\r\n    <div id=\"tipDiv\">\r\n      <img class=\"tip\" :src=\"tipUrl\">\r\n    </div>\r\n    <div id=\"zoomInDiv\" @click=\"zoomInLayoutClk\">\r\n    </div>\r\n    <div id=\"zoomOutDiv\" @click=\"zoomOutLayoutClk\">\r\n      <img class=\"icons\" :src=\"zoomOutUrl\">\r\n    </div>\r\n    <div id=\"editToolDiv\" @click=\"editToolClk\">\r\n      <img class=\"icons\" :src=\"editToolUrl\">\r\n    </div>\r\n    <div id=\"VideoEditPanel\" ref=\"VideoEditPanel\" class=\"\" v-show=\"VideoEditPanelShow\">\r\n    </div>\r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nimport * as d3 from 'd3'\r\nimport { Loading } from 'element-ui'\r\nimport { onMounted, ref } from 'vue';\r\nimport filenames from \"@/utils/fileName\";\r\nimport domtoimage from 'dom-to-image';\r\nimport TestJson from \"@/assets/json/case1_1_fin.json\";\r\nimport TestRelJson from \"@/assets/json/case1_fin_rel.json\";\r\nimport tools from \"@/utils/tools.js\";\r\nimport ocrad from \"@/utils/ocrad.js\";\r\nimport {createWorker} from \"@/utils/tesseract.min.js\";\r\nimport Tesseract from '@/utils/tesseract.min.js';\r\n// let worker= createWorker({\r\n//     // langPath:\"@/assets/data\"\r\n//     workerPath: '/uti/worker.min.js',\r\n//     // corePath: './tesseract-core.wasm.js',\r\n//     // langPath: 'D:/Cailibuhong/video2Graph/video2Graph/src/utils/tesseract'\r\n//   });;\r\n// console.log(worker)\r\n// worker.load()\r\n// worker.loadLanguage('eng')\r\n// worker.initialize('eng')\r\nexport default {\r\n  props: [\"videoTime\"],\r\n  data() {\r\n    return {\r\n      data: TestJson,\r\n      editConfirmShow:false,\r\n      gData: \"TestJson\",\r\n      relData: TestRelJson,\r\n      assistGTransformX: 10,\r\n      assistGTransformY: 100,\r\n      recognizeText:\"\",\r\n      loadLoading: false,\r\n      drawEntityLocation: [],\r\n      VideoEditPanelShow:false,\r\n      showEntityList: [],\r\n      switchL: [],\r\n      overEntityId: '',\r\n      overTargetEntityId: '',\r\n      showEntityRelIdList: [],\r\n      showEntityRelIdOverState: '',\r\n      rootEntityList: [],\r\n      rootSvg: null,\r\n      TimeAxisSvg: null,\r\n      groupsSvg: null,\r\n      arcG: null,\r\n      curEntId: '',\r\n      insertEntId: '',\r\n      editDivShow: false,\r\n      minDImportance: 0,\r\n      maxDImportance: 0,\r\n      minDRelevance: 0,\r\n      maxDRelevance: 0,\r\n      maxDDuration: 0,\r\n      timeAxisX: 0,\r\n      timeAxisW: 200,\r\n      timeAxisDropFlag: 0,\r\n      timeAxisDownX: 0,\r\n      timeAxisDownW: 60,\r\n      maxTotalDuration: 0,\r\n      videoDuration: 668,\r\n      totalDuration: 1000,\r\n      importanceColor_linear: null,\r\n      importanceCompute_color: null,\r\n      relevanceScale_linear: null,\r\n      totalDurationScale_linear: null,\r\n      sumTotalDuration: 0,\r\n      // importanceMinColor: \"rgb(1, 164, 183)\",\r\n      // importanceMaxColor: \"rgb(106, 52, 127)\",\r\n      zoomInUrl: require(\"@/assets/img/zoomIn.png\"),\r\n      zoomOutUrl: require(\"@/assets/img/zoomOut.png\"),\r\n      editToolUrl: require(\"@/assets/img/edit.png\"),\r\n      tipUrl: require(\"@/assets/img/tip.png\"),\r\n      editAddUrl: require(\"@/assets/img/edit_Add.png\"),\r\n      editAddNUrl: require(\"@/assets/img/edit_AddN.png\"),\r\n      editDelUrl: require(\"@/assets/img/edit_Delete.png\"),\r\n      editConfirmUrl: require(\"@/assets/img/已看.png\"),\r\n      layoutShow: 2,\r\n      graphGTransformK: 1,\r\n      graphGTransformX: 10,\r\n      graphGTransformY: 100,\r\n      graphGMoveX: 10,\r\n      graphSvgScale: 1,\r\n      moveTimer: null,\r\n      moveFlag: false,\r\n      importanceMinColor: \"rgb(203, 230, 209)\",\r\n      importanceMaxColor: \"rgb(22, 144, 207)\",\r\n      stepX: 150,\r\n      stepY: 100,\r\n      btnRel: false,\r\n      btnSim: false,\r\n      btnAso: false,\r\n      btnEdi: false,\r\n      circleInterval: 55,\r\n      width: 0,\r\n      height: 0,\r\n      curToolState: 'unEdit',\r\n      margin: { top: 80, right: 20, bottom: 0, left: 20 },\r\n      color: [\r\n        \"rgb(255,60,60)\",\r\n        \"rgb(0, 178, 171)\",\r\n        // \"rgb(255,83,255)\",\r\n        \"rgb(235,135,162)\",\r\n        \"rgb(255,178,101)\",\r\n        \"rgb(63,151,134)\",\r\n        \"rgb(83,255,255)\",\r\n        \"rgb(0,122,244)\",\r\n        \"rgb(168,168,255)\",\r\n        \"rgb(200,200,200)\",\r\n      ],\r\n      mcolor: [\r\n        \"rgb(125, 66, 206)\",\r\n        \"rgb(248, 134, 124)\",\r\n        \"rgb(50, 198, 191)\",\r\n        \"rgb(135, 126, 253)\",\r\n        \"rgb(198, 121, 123)\",\r\n        \"rgb(252, 177, 49)\",\r\n        \"rgb(112, 202, 229)\",\r\n      ],\r\n      // mcolor: [\r\n      //   \"rgb(91, 107, 255)\",\r\n      //   \"rgb(0, 178, 171)\",\r\n      //   // \"rgb(6, 214, 160)\",\r\n      //   \"rgb(255, 120, 90)\",\r\n      //   \"rgb(125, 98, 211)\",\r\n      //   \"rgb(255, 113, 212)\",\r\n      //   \"rgb(112, 214, 255)\",\r\n      //   \"rgb(255, 159, 28)\",\r\n      //   \"rgb(255, 77, 109)\",\r\n      // ],\r\n      mDarkcolor: [\r\n        \"rgb(95, 39, 179)\",\r\n        \"rgb(221, 83, 72)\",\r\n        \"rgb(0, 158, 148)\",\r\n        \"rgb(93, 88, 202)\",\r\n        \"rgb(180, 72, 79)\",\r\n        \"rgb(202, 134, 32)\",\r\n        \"rgb(46, 174, 202)\",\r\n      ],\r\n      mLigntcolor: [\r\n        \"#ff9c9c\",\r\n        \"#cc88b0\",\r\n        \"#ffa8ff\",\r\n        \"#e3b097\",\r\n        \"#f4c3d0\",\r\n        \"#f4f4d0\",\r\n        \"#ffd8b1\",\r\n        \"#9ecac2\",\r\n        \"#a8ccff\",\r\n        \"#97e3ba\",\r\n        \"#6f8be0\",\r\n        \"rgb(0,122,244)\",\r\n        \"#b6a2f7\",\r\n        \"rgb(168,168,255)\",\r\n        \"rgb(200,200,200)\",\r\n      ],\r\n      editVideoJage:false,\r\n      editVideoSP:[],\r\n      editVideoEP:[],\r\n    };\r\n  },\r\n\r\n  watch: {\r\n    type(val) {\r\n    },\r\n    switchL: {\r\n      deep: true,\r\n      handler(val) {\r\n        this.btnRel = val[0];\r\n        this.btnSim = val[1];\r\n        this.btnAso = val[2];\r\n        this.btnEdi = val[3];\r\n        this.updataRel()\r\n      }\r\n    },\r\n    recognizeText(val){\r\n      const _this =this;\r\n      _this.$bus.$emit(\"recognizeText\", [1,val]);\r\n    },\r\n    timeAxisX(val) {\r\n      const _this = this;\r\n      _this.updataTimeAxisDur(_this.TimeAxisSvg, _this.timeAxisX, _this.timeAxisW);\r\n    },\r\n    curEntId(val) {\r\n      const _this = this;\r\n      _this.overEntityId = val;\r\n      console.log(val)\r\n      _this.$bus.$emit(\"selectE\", val);\r\n      let entityLocationData = _this.drawEntityLocation;\r\n\r\n      let relData = _this.relData;\r\n      let showJageData = _this.showEntityList;\r\n      let basicRel = relData['basicRel'];\r\n      for (let r = 0; r < basicRel.length; r++) {\r\n        let sorceId = basicRel[r][0];\r\n        let targetId = basicRel[r][1];\r\n        let sorceJage = showJageData.find(function (d) { return d['id'] == sorceId })['show'];\r\n        let targetJage = showJageData.find(function (d) { return d['id'] == targetId })['show'];\r\n        if (sorceJage && targetJage) {\r\n          let trnId = '-1';\r\n          if (sorceId == parseInt(val)) {\r\n            trnId = targetId;\r\n          }\r\n          else if (targetId == parseInt(val)) {\r\n            trnId = sorceId;\r\n          }\r\n          if (trnId != '-1') {\r\n            let curEnt = entityLocationData.find(function (d) { return parseInt(d['id']) == trnId });\r\n            _this.assistGTransformX = parseInt(-curEnt['x']) + parseFloat(curEnt['r']) + 150;\r\n            _this.assistGTransformY = parseInt(-curEnt['y']) + parseFloat(curEnt['r']) + 300;\r\n            _this.updataAssistGraphPanel();\r\n          }\r\n        }\r\n\r\n      };\r\n      let similarityRel = relData['similarityRel'];\r\n      for (let r = 0; r < similarityRel.length; r++) {\r\n        let sorceId = similarityRel[r][0];\r\n        let targetId = similarityRel[r][1];\r\n        let sorceJage = showJageData.find(function (d) { return d['id'] == sorceId })['show'];\r\n        let targetJage = showJageData.find(function (d) { return d['id'] == targetId })['show'];\r\n        if (sorceJage && targetJage) {\r\n          let trnId = '-1';\r\n          if (sorceId == parseInt(val)) {\r\n            trnId = targetId;\r\n          }\r\n          else if (targetId == parseInt(val)) {\r\n            trnId = sorceId;\r\n          }\r\n          if (trnId != '-1') {\r\n            let curEnt = entityLocationData.find(function (d) { return parseInt(d['id']) == trnId });\r\n            _this.assistGTransformX = parseInt(-curEnt['x']) + parseFloat(curEnt['r']) + 150;\r\n            _this.assistGTransformY = parseInt(-curEnt['y']) + parseFloat(curEnt['r']) + 300;\r\n            _this.updataAssistGraphPanel();\r\n          }\r\n        }\r\n\r\n      };\r\n\r\n\r\n    },\r\n    overEntityId(val) {\r\n      const _this = this;\r\n\r\n      _this.$bus.$emit(\"overEntityId\", val);\r\n      let relList = [];\r\n      let relRootList = [];\r\n      let relData = _this.relData;\r\n      let oData = _this.drawEntityLocation;\r\n      let basicRel = relData['basicRel'];\r\n      d3.selectAll('.timeText').attr(\"opacity\", 0)\r\n      d3.selectAll('.timeAxisEnt').attr(\"stroke-width\", 0).attr(\"opacity\", 0.4).attr(\"stroke\", function () {\r\n        let cid = d3.select(this).attr(\"id\").split(\"_\")[1];\r\n        let nd = oData.find(function (d) { return d['id'] == cid });\r\n        return nd['colorD']\r\n      });\r\n      for (let re = 0; re < basicRel.length; re++) {\r\n\r\n        let sorceId = basicRel[re][0];\r\n        let targetId = basicRel[re][1];\r\n        let cNode = '';\r\n        if (sorceId == val) {\r\n          cNode = oData.find(function (d) { return d['id'] == targetId });\r\n          relList.push(targetId);\r\n          relRootList.push(cNode['rootIndex']);\r\n        }\r\n\r\n        if (targetId == val) {\r\n          cNode = oData.find(function (d) { return d['id'] == sorceId });\r\n          relList.push(sorceId);\r\n          relRootList.push(cNode['rootIndex']);\r\n        }\r\n      };\r\n      relList.forEach((self, indx, arr) => {\r\n\r\n        d3.select(`#timeAxisEnt_${self}`).attr(\"stroke\", 'white').attr(\"stroke-width\", 2).attr(\"opacity\", 1);\r\n        d3.select(`#timeText_${self}_0`).attr(\"opacity\", 1);\r\n      })\r\n      d3.select(`#timeAxisEnt_${val}`).attr(\"stroke-width\", 2).attr(\"opacity\", 1);\r\n      d3.select(`#timeText_${val}_0`).attr(\"opacity\", 1);\r\n    },\r\n    showEntityRelIdList(val) {\r\n      this.updataRel();\r\n    },\r\n    groupsSvg: {\r\n      deep: true,\r\n      handler() {\r\n        this.updataAssistGraphPanel();\r\n      }\r\n    },\r\n    gData(val) {\r\n    },\r\n    layoutShow(val) {\r\n      const _this = this;\r\n      let showEntityList = tools.deepClone(_this.data);\r\n      for (let e in showEntityList) {\r\n        if (parseInt(showEntityList[e]['layout']) < parseInt(val))\r\n          showEntityList[e]['show'] = true;\r\n        else {\r\n          showEntityList[e]['show'] = false;\r\n        }\r\n      }\r\n      _this.showEntityList = showEntityList;\r\n      _this.updataGraph();\r\n    },\r\n    data(val) {\r\n    },\r\n    videoTime(val) {\r\n      const _this = this;\r\n      let entityLocationData = _this.drawEntityLocation;\r\n      for (let e = 0; e < entityLocationData.length; e++) {\r\n        let curD = entityLocationData[e];\r\n        let timeStart = tools.time2seconds(entityLocationData[e]['time'][0]);\r\n        let timeEnd = tools.time2seconds(entityLocationData[e]['time'][1]);\r\n        if ((val > timeStart) && (val < timeEnd)) {\r\n          let entX = entityLocationData[e]['x'];\r\n          let entY = entityLocationData[e]['y'];\r\n          let entR = entityLocationData[e]['r'];\r\n          let moveLinear = d3.scaleLinear([timeStart, timeEnd], [entX - entR, entX + entR])\r\n          _this.graphGTransformX = -moveLinear((val));\r\n        }\r\n      }\r\n    },\r\n    graphGMoveX(val) {\r\n      const _this = this;\r\n      let data = _this.drawEntityLocation;\r\n      let stjg = 0;\r\n      let enjg = 0;\r\n      let snode = '';\r\n      let enode = '';\r\n      let width = 1590\r\n      data.forEach((self, indx, arr) => {\r\n        let entx = self['x'] * _this.graphGTransformK;\r\n        let transformX = entx + val;\r\n        if ((transformX > 0) && (transformX < width)) {\r\n          stjg++;\r\n        }\r\n        else {\r\n          if ((stjg > 0) && enjg == 0) {\r\n            enode = self;\r\n            enjg = 1\r\n          }\r\n        }\r\n        if (stjg == 1) {\r\n          snode = self\r\n        }\r\n      })\r\n      let ew = enode['timeW'];\r\n      if (snode == '') {\r\n        _this.timeAxisX = 0\r\n      }\r\n      else\r\n        _this.timeAxisX = snode['timeX'];\r\n      _this.timeAxisW = enode['timeX'] - snode['timeX'] + enode['timeW']\r\n      if (ew == undefined) {\r\n        _this.timeAxisW = width - snode['timeX']\r\n      }\r\n    },\r\n    graphGTransformX(val) {\r\n      const _this = this;\r\n      let groups = _this.groupsSvg;\r\n      _this.graphGMoveX = _this.graphGTransformX;\r\n      let graphGTransformX = _this.graphGTransformX;\r\n      let graphGTransformY = _this.graphGTransformY;\r\n      let graphGTransformK = _this.graphGTransformK;\r\n      groups.attr(\"transform\", \"translate(\" + graphGTransformX + ',' + graphGTransformY + \") scale(\" + graphGTransformK + \")\");\r\n    }\r\n  },\r\n  methods: {\r\n    addNode() {\r\n      const _this = this;\r\n      _this.editConfirmShow = true,\r\n      _this.VideoEditPanelShow = true,\r\n      _this.editDivShow = false;\r\n      _this.$bus.$emit(\"recognizeText\", [1,\"Please select on the video\"]);\r\n      d3.select(\"#VideoEditPanel\").select(\"svg\").remove()\r\n      var svg = d3.select(\"#VideoEditPanel\").append(\"svg\")\r\n        .attr(\"width\", \"946\")\r\n        .attr(\"height\", \"553\");\r\n      svg.on(\"mousedown\",function(d){\r\n        _this.editVideoSP = [d.layerX,d.layerY];\r\n        _this.editVideoJage = true;\r\n      }).on(\"mousemove\",function(d){\r\n        if(_this.editVideoJage){\r\n        let sP = _this.editVideoSP;\r\n        _this.editVideoEP = [d.layerX,d.layerY];\r\n        let eP =  [d.layerX,d.layerY];\r\n        let eX  = sP[0]>eP[0]?sP[0]:eP[0];\r\n        let eY  = sP[1]>eP[1]?sP[1]:eP[1];\r\n        let sX  = sP[0]<eP[0]?sP[0]:eP[0];\r\n        let sY  = sP[1]<eP[1]?sP[1]:eP[1];\r\n        _this.drawRect(svg,sX , sY, Math.abs(eX-sX), Math.abs(eY - sY), 0,0,\"rgba(0,0,0,0)\",1, \"red\", `videoRect`)}\r\n      }).on(\"mouseup\",function(d){\r\n        _this.editVideoJage = false;\r\n        \r\n        let sP = _this.editVideoSP;\r\n        let eP = [d.layerX,d.layerY];;\r\n\r\n        let eX  = sP[0]>eP[0]?sP[0]:eP[0];\r\n        let eY  = sP[1]>eP[1]?sP[1]:eP[1];\r\n        let sX  = sP[0]<eP[0]?sP[0]:eP[0];\r\n        let sY  = sP[1]<eP[1]?sP[1]:eP[1];\r\n        \r\n        var player = document.getElementById(\"playVideo\");   //获取video的Dom节点\r\n        player.setAttribute(\"crossOrigin\", \"anonymous\");  //添加srossOrigin属性，解决跨域问题\r\n        var canvas = document.createElement(\"canvas\");\r\n        \r\n        canvas.width = player.clientWidth;\r\n        canvas.height = player.clientHeight;\r\n        // canvas = canvas.getContext(\"2d\")\r\n        canvas.getContext(\"2d\").drawImage(player , 0, 0, canvas.width, canvas.height);//截\r\n        const data = canvas.getContext(\"2d\").getImageData(sX , sY,eX-sX, eY-sY);\r\n        // const data = canvas.getContext(\"2d\").getImageData(0, 0, canvas.width, canvas.height);\r\n        var canvass = document.createElement(\"canvas\");\r\n        canvass.width =eX-sX;\r\n        canvass.height = eY-sY;\r\n        canvass.getContext(\"2d\").putImageData(data, 0,0)\r\n        var dataURL = canvass.toDataURL(\"image/png\");  //将图片转成base64格式\r\n        var img = document.createElement('img');\r\n        img.src = dataURL\r\n        Tesseract.recognize(\r\n          canvass,\r\n          'eng',\r\n          { logger: m => console.log(m) }\r\n        ).then((d) => {\r\n          console.log(d.data.text);\r\n          _this.$bus.$emit(\"recognizeText\", [1,d.data.text]);\r\n        })\r\n        \r\n        // document.getElementById(\"VideoEditPanel\").appendChild(img);   //显示在页面中\r\n        // var string = ocrad(canvass);\r\n        // console.log(string)\r\n        // alert(string);\r\n      })\r\n    },\r\n    // VideoEditPanelShow(val) {\r\n    //   const _this = this;\r\n    //   if (val) {\r\n    //     let width = _this.$refs.VideoEditPanel.offsetWidth;\r\n    //     let height = document.getElementById(\"VideoEditPanel\").clientHeight;\r\n    //     d3.select(\"#VideoEditPanel\").select(\"svg\").remove()\r\n    //     var svg = d3.select(\"#VideoEditPanel\").append(\"svg\")\r\n    //       .attr(\"width\", width)\r\n    //       .attr(\"height\", height);\r\n    //   }\r\n    // },\r\n    addNodeN() {\r\n      const _this = this;\r\n      _this.editDivShow = false;\r\n\r\n    },\r\n    delNode() {\r\n      const _this = this;\r\n      _this.editDivShow = false;\r\n    },\r\n    editToolClk() {\r\n      const _this = this;\r\n      if (_this.curToolState == 'edit') _this.curToolState = 'unEdit';\r\n      else if (_this.curToolState != 'edit') _this.curToolState = 'edit';\r\n      this.$emit(\"toolState\", this.curToolState);\r\n    },\r\n    editConfirm(){\r\n      console.log(\"confirm\")\r\n      const _this = this;\r\n      _this.loadLoading = true;\r\n      setTimeout(() => {\r\n        _this.loadLoading = false;\r\n        }, 2000);\r\n      _this.editDivShow = false;\r\n      _this.editConfirmShow = false;\r\n      _this.VideoEditPanelShow = false;\r\n      _this.$bus.$emit(\"recognizeText\", [0,\"\"]);\r\n    },\r\n    updataRel() {\r\n      const _this = this;\r\n      let relData = _this.relData;\r\n      let oData = _this.drawEntityLocation;\r\n      let showJageData = _this.showEntityList;\r\n      let showRel = _this.showEntityRelIdList;\r\n      let basicRel = relData['basicRel'];\r\n\r\n      if (_this.btnRel) {\r\n        if (_this.btnSim) {\r\n          d3.selectAll('.similarityRel').attr('opacity', 1);\r\n        }\r\n        else if (!_this.btnSim) {\r\n          d3.selectAll('.similarityRel').attr('opacity', 0);\r\n        }\r\n        if (_this.btnAso) {\r\n          d3.selectAll('.basicRel').attr('opacity', 1);\r\n        }\r\n        else if (!_this.btnAso) {\r\n          d3.selectAll('.basicRel').attr('opacity', 0);\r\n        }\r\n        // d3.selectAll('.similarityRel').attr('opacity', 1);\r\n        // d3.selectAll('.basicRel').attr('opacity', 1);\r\n      }\r\n      else if (!_this.btnRel) {\r\n        d3.selectAll('.similarityRel').attr('opacity', 0);\r\n        d3.selectAll('.basicRel').attr('opacity', 0);\r\n      }\r\n      if (!_this.btnRel || !_this.btnAso) {\r\n        for (let r = 0; r < basicRel.length; r++) {\r\n          let sorceId = basicRel[r][0];\r\n          let targetId = basicRel[r][1];\r\n          let idN = \"basicRel\" + sorceId + \"_\" + targetId;\r\n          if (_this.overTargetEntityId == '') {\r\n            if ((showRel.includes(sorceId)) || (showRel.includes(targetId))) {\r\n              d3.select(`#${idN}`).attr('opacity', 1).attr('stroke', 'grey')\r\n            }\r\n            else {\r\n              d3.select(`#${idN}`).attr('opacity', 0)\r\n            }\r\n          }\r\n          else {\r\n\r\n            if ((showRel.includes(sorceId + '')) || (showRel.includes(targetId + ''))) {\r\n              d3.select(`#${idN}`).attr('opacity', 1).attr('stroke', 'grey')\r\n            }\r\n            else {\r\n              d3.select(`#${idN}`).attr('opacity', 0)\r\n            }\r\n            if ((showRel.includes(sorceId + '')) && (targetId == _this.overTargetEntityId)) {\r\n              d3.select(`#${idN}`).attr('opacity', 1).attr('stroke', 'darkslateblue')\r\n            }\r\n            else if ((showRel.includes(targetId + '')) && (sorceId == _this.overTargetEntityId)) {\r\n              d3.select(`#${idN}`).attr('opacity', 1).attr('stroke', 'darkslateblue')\r\n            }\r\n          }\r\n        };\r\n      }\r\n    },\r\n    drawRelationshipLine(svg) {\r\n      const _this = this;\r\n      let relData = _this.relData;\r\n      let oData = _this.drawEntityLocation;\r\n      let showJageData = _this.showEntityList;\r\n      let margin = _this.margin;\r\n      let height = svg.attr('height');\r\n      let basicRel = relData['basicRel'];\r\n      for (let r = 0; r < basicRel.length; r++) {\r\n\r\n        let sorceId = basicRel[r][0];\r\n        let targetId = basicRel[r][1];\r\n        let idN = \"basicRel\" + sorceId + \"_\" + targetId;\r\n        let classN = \"basicRel source\" + sorceId + \" target\" + targetId;\r\n        let sorceNode = oData.find(function (d) { return d['id'] == sorceId });\r\n        let targetNode = oData.find(function (d) { return d['id'] == targetId });\r\n        let sorceJage = showJageData.find(function (d) { return d['id'] == sorceId })['show'];\r\n        let targetJage = showJageData.find(function (d) { return d['id'] == targetId })['show'];\r\n        if (sorceJage && targetJage) {\r\n          if (sorceNode['x'] > targetNode['x']) {\r\n            let tp = sorceNode;\r\n            sorceNode = targetNode;\r\n            targetNode = tp;\r\n          }\r\n          const path = d3.path();\r\n\r\n          let startX = sorceNode['x'];\r\n          let endX = targetNode['x'];\r\n          let midX = (startX + endX) / 2;\r\n          let flag = ((sorceNode['sonFlag']) || (targetNode['sonFlag']));\r\n          // if((targetNode['id'] == \"4\")||((sorceNode['id']==\"1\")&&(targetNode['id']==\"6\"))||((sorceNode['id']==\"2\")&&(targetNode['id']==\"7\"))||((sorceNode['id']==\"3\")&&(targetNode['id']==\"8\"))){\r\n          //   flag = true;\r\n          // }\r\n          if (targetNode['id'] == \"4\") {\r\n            flag = true;\r\n          }\r\n          // if(targetNode['id'] == \"30\"){\r\n          //   flag = true;\r\n          // }\r\n          let rsourceint = (sorceNode['sonFlag']) ? (49) : (2);\r\n          let rtargetint = (targetNode['sonFlag']) ? (49) : (2);\r\n          let startY = (flag) ? (sorceNode['y'] - sorceNode['r'] - rsourceint) : (sorceNode['y'] + sorceNode['r'] + rsourceint);\r\n          let endY = (flag) ? (targetNode['y'] - targetNode['r'] - rtargetint) : (targetNode['y'] + targetNode['r'] + rtargetint);\r\n\r\n          let cnx1 = startX - 50;\r\n          let cnx2 = endX + 50;\r\n          let midY = (startY + endY) / 2;\r\n          // if(((sorceNode['id']==\"1\")&&(targetNode['id']==\"6\"))||((sorceNode['id']==\"2\")&&(targetNode['id']==\"7\"))||((sorceNode['id']==\"3\")&&(targetNode['id']==\"8\"))){\r\n          //   midY-=140\r\n          // }\r\n          let h = (((endX - startX) / 5) > (parseInt(height) + 100)) ? (parseInt(height) + 100) : ((endX - startX) / 5);\r\n          let cny = (flag) ? (midY - h) : (midY + h);\r\n\r\n          let cny1 = cny;\r\n          let cny2 = cny;\r\n\r\n          if (((sorceNode['layout'] == 2) && (cny < 0)) || ((sorceNode['layout'] == 0) && (cny > 0))) {\r\n            cnx1 -= 250;\r\n            cny1 = cny * 1.3;\r\n          }\r\n          if (((targetNode['layout'] == 2) && (cny < 0)) || ((targetNode['layout'] == 0) && (cny > 0))) {\r\n            cnx2 += 250;\r\n            cny2 = cny * 1.3;\r\n          }\r\n          if((sorceId == '14')&&(targetId == '7')){\r\n            cny*=1.4}\r\n          // let midP = [(startP[0]+endP[0])/2,(startP[1])>(endP[1])?(startP[1]-100):(endP[1]-100)];\r\n          path.moveTo(startX, startY);\r\n          path.bezierCurveTo(midX, cny, midX, cny, endX, endY);\r\n          _this.drawTimeLine(svg, path, \"rgb(200,200,200)\", 5, \"9,9\", idN, classN);\r\n        }\r\n\r\n      };\r\n      let similarityRel = relData['similarityRel'];\r\n      // let basicRel = relData['basicRel'];\r\n      for (let r = 0; r < similarityRel.length; r++) {\r\n\r\n        let sorceId = similarityRel[r][0];\r\n        let targetId = similarityRel[r][1];\r\n\r\n        let idN = \"similarityRel\" + sorceId + \"_\" + targetId;\r\n\r\n        let classN = \"similarityRel source\" + sorceId + \" target\" + targetId;\r\n        let sorceNode = oData.find(function (d) { return d['id'] == sorceId });\r\n        let targetNode = oData.find(function (d) { return d['id'] == targetId });\r\n        let sorceJage = showJageData.find(function (d) { return d['id'] == sorceId })['show'];\r\n        let targetJage = showJageData.find(function (d) { return d['id'] == targetId })['show'];\r\n        if (sorceJage && targetJage) {\r\n\r\n          if (sorceNode['x'] > targetNode['x']) {\r\n            let tp = sorceNode;\r\n            sorceNode = targetNode;\r\n            targetNode = tp;\r\n          }\r\n          const path = d3.path();\r\n\r\n          let startX = sorceNode['x'] + sorceNode['r'] / 2;\r\n          let endX = targetNode['x'] - targetNode['r'] / 2;\r\n          let midX = (startX + endX) / 2;\r\n          let flag = ((sorceNode['sonFlag']) || (targetNode['sonFlag']));\r\n          let rsourceint = (sorceNode['sonFlag']) ? (20) : (2);\r\n          let rtargetint = (targetNode['sonFlag']) ? (20) : (2);\r\n          let startY = (flag) ? (sorceNode['y'] - sorceNode['r'] - rsourceint) : (sorceNode['y'] + sorceNode['r'] + rsourceint);\r\n          let endY = (flag) ? (targetNode['y'] - targetNode['r'] - rtargetint) : (targetNode['y'] + targetNode['r'] + rtargetint);\r\n\r\n          let midY = (startY + endY) / 2;\r\n\r\n          // let h1Scale_linear = d3.scaleLinear([0, _this.width], [(sorceNode['y']>targetNode['y'])?(sorceNode['y']*2):(targetNode['y']*2),parseInt(height)])\r\n          let h = (((endX - startX) / 14) > (parseInt(height) - 10)) ? (parseInt(height) - 10) : ((endX - startX) / 14);\r\n          let hScale_linear = d3.scaleLinear([0, _this.width / 2], [0, (h-80) / 3 * 2])\r\n          let cny = (flag) ? (midY - hScale_linear(endX)) : (midY + hScale_linear(endX));\r\n          // if (sorceNode['id'] == '7') { cny -= 20 }\r\n          if (cny < -150) {\r\n            startY = sorceNode['y'] + sorceNode['r'] + rsourceint\r\n            endY = targetNode['y'] + targetNode['r'] + rtargetint\r\n            cny = height - cny - 300;\r\n          }\r\n          if(targetId==\"5\"||sorceId==\"5\"){cny+=250}\r\n          if(targetId==\"6\"||sorceId==\"6\"){cny+=150}\r\n          path.moveTo(startX, startY);\r\n          path.lineTo(startX, cny);\r\n          path.lineTo(endX, cny);\r\n          path.lineTo(endX, endY);\r\n          _this.drawTimeLine(svg, path, \"rgb(200,200,200)\", 5, \"0\", idN, classN);\r\n        }\r\n\r\n\r\n      };\r\n      _this.updataRel()\r\n    },\r\n    drawMain(svg) {\r\n      let _this = this;\r\n      let data = _this.data;\r\n      let margin = _this.margin;\r\n\r\n      let width = _this.width - margin.left - margin.right;\r\n      let height = _this.height - margin.top - margin.bottom;\r\n\r\n      let graphGTransformX = _this.graphGTransformX;\r\n      let graphGTransformY = _this.graphGTransformY;\r\n      let graphGTransformK = _this.graphGTransformK;\r\n      let axisGroups = svg.append(\"g\").attr(\"id\", \"axisGroups\").attr(\"width\", width).attr(\"height\", height)\r\n      // .attr(\"transform\", \"translate(\" + graphGTransformX + ',' + graphGTransformY + \") scale(\" + graphGTransformK + \")\");\r\n      let groups = svg.append(\"g\").attr(\"id\", \"groups\").attr(\"width\", width).attr(\"height\", height)\r\n        .attr(\"transform\", \"translate(\" + graphGTransformX + ',' + graphGTransformY + \") scale(\" + graphGTransformK + \")\");\r\n      this.groupsSvg = groups;\r\n\r\n      let backG = groups.append(\"g\").attr(\"id\", \"backG\").attr(\"width\", width).attr(\"height\", height);\r\n      let arcG = groups.append(\"g\").attr(\"id\", \"arcG\").attr(\"width\", width).attr(\"height\", height);\r\n      let timeLineG = groups.append(\"g\").attr(\"id\", \"timeLineG\").attr(\"width\", width).attr(\"height\", height);\r\n      let circleG = groups.append(\"g\").attr(\"id\", \"circleG\").attr(\"width\", width).attr(\"height\", height);\r\n\r\n      _this.arcG = arcG;\r\n      let stepX = _this.stepX;\r\n      let stepY = _this.stepY;\r\n      let interval = _this.circleInterval;\r\n\r\n\r\n      let scalePre = _this.graphSvgScale;\r\n      let stx = 0;\r\n      let sty = 0;\r\n      let stk = 1;\r\n      var graphZoom = d3.zoom()\r\n        .scaleExtent([0, 10])\r\n        .on(\"start\", (e) => {\r\n          sty = e.transform.y;\r\n          stx = e.transform.x;\r\n          stk = e.transform.k;\r\n        })\r\n        .on('zoom', (e) => {\r\n          graphGTransformX = _this.graphGTransformX + e.transform.x - stx;\r\n          graphGTransformY = _this.graphGTransformY + e.transform.y - sty;\r\n          graphGTransformK = _this.graphGTransformK + e.transform.k - stk;\r\n          _this.graphGMoveX = graphGTransformX;\r\n\r\n          groups.attr('transform', 'translate(' + (graphGTransformX) + ',' + (graphGTransformY) + ') scale(' + (graphGTransformK) + ')')\r\n        })\r\n        .on('end', (e) => {\r\n          _this.graphGTransformX = graphGTransformX;\r\n          _this.graphGTransformY = graphGTransformY;\r\n          _this.graphGTransformK = graphGTransformK;\r\n          groups.attr('transform', 'translate(' + (graphGTransformX) + ',' + (graphGTransformY) + ') scale(' + (graphGTransformK) + ')')\r\n        });\r\n\r\n\r\n      svg.call(graphZoom)\r\n      // .call(graphZoom.transform, d3.zoomIdentity.scale(1))\r\n      const path = d3.path()\r\n      path.moveTo(margin.left, margin.top)\r\n      let x = margin.left;\r\n      let prex = margin.left;\r\n      let prey = margin.top;\r\n      let prer = 0;\r\n      let preSonLen = 0;\r\n      let layoutShow = _this.layoutShow;\r\n      let sumTotalDuration = 0;\r\n      let rootIndex = -1;\r\n      for (let i = 0; i < data.length; i++) {\r\n        let lay = parseInt(data[i]['layout']);\r\n\r\n        let colors = _this.mcolor;\r\n        let colorsD = _this.mDarkcolor;\r\n        let entityLocationData = tools.deepClone(data[i]);\r\n        if (lay == 0) {\r\n          rootIndex++;\r\n        }\r\n        entityLocationData['rootIndex'] = rootIndex;\r\n        entityLocationData['color'] = colors[rootIndex % colors.length];\r\n        entityLocationData['colorD'] = colorsD[rootIndex % colorsD.length];\r\n        let timeList = data[i]['time'];\r\n        let duration = tools.time2seconds(timeList[1]) - tools.time2seconds(timeList[0]);\r\n        sumTotalDuration += duration;\r\n        let showEntity = _this.showEntityList.find(function (d) { return d['id'] == data[i]['id'] });\r\n        if ((showEntity['show'] == true)) {\r\n          let y = margin.top + lay * stepY\r\n          let relevanceValue = data[i]['attribute']['relevance'];\r\n          let totalDurationValue = data[i]['totalDuration'];\r\n          let rScale = _this.totalDurationScale_linear;\r\n\r\n\r\n          let r = rScale(totalDurationValue);\r\n          let stepL = r + stepX / 2 + interval / 10;\r\n          let controlP1x = prex + interval / 1;\r\n          let controlP2x = x - interval / 1;\r\n          let curLinex = x - r - interval;\r\n\r\n          let relData = _this.relData;\r\n          let oData = _this.drawEntityLocation;\r\n          let basicRel = relData['basicRel'];\r\n          let daId = data[(i)]['id'];\r\n          let jg = 0;\r\n          for (let re = 0; re < basicRel.length; re++) {\r\n\r\n            let sorceId = basicRel[re][0];\r\n            let targetId = basicRel[re][1];\r\n            let cNode = '';\r\n            if ((sorceId == daId) || (targetId == daId)) {\r\n              jg = 1;\r\n            }\r\n          };\r\n          let sonFlag = 1;\r\n          if (((i > 0) && (preSonLen == 0)) && (data[(i)]['son'].length == 0)) {\r\n            sonFlag = 0;\r\n            stepL = r + stepX / 1.2 + interval / 10;\r\n            x += stepL;\r\n            controlP1x = prex + interval / 1;\r\n            controlP2x = x - r - interval / 2 - interval / 1;\r\n            curLinex = r + interval / 10;\r\n          }\r\n          else if (((i > 0) && (preSonLen != 0)) && (data[(i)]['son'].length == 0)) {\r\n            sonFlag = 0;\r\n            stepL = r + stepX + interval + 30;\r\n            x += stepL;\r\n            controlP1x = prex + interval / 1;\r\n            controlP2x = x - r - interval / 1 - interval / 1;\r\n            curLinex = r + interval / 10;\r\n          }\r\n          else {\r\n            stepL = r + stepX + interval + 10;\r\n            x += stepL;\r\n            controlP1x = prex + interval / 1;\r\n            controlP2x = x - r - interval - interval / 1;\r\n            curLinex = r + interval;\r\n          }\r\n\r\n          if ((jg == 1) && (data[i]['type'] == 0) && (data[(i)]['son'].length == 0)) {\r\n            curLinex += r * 1.5\r\n          }\r\n          _this.drawEntity(circleG, x, y, r, data[i])\r\n          path.bezierCurveTo(controlP1x, prey, controlP2x, y, x - curLinex, y)\r\n          // path.lineTo(controlP1x, prey)\r\n          // path.lineTo(controlP2x, y)\r\n          // path.lineTo(x - curLinex, y)\r\n          path.moveTo(x + curLinex, y);\r\n          prex = x + curLinex;\r\n          prey = y;\r\n          prer = r;\r\n          preSonLen = data[(i)]['son'].length;\r\n          entityLocationData['x'] = x;\r\n          entityLocationData['y'] = y;\r\n          entityLocationData['r'] = r;\r\n        }\r\n        else {\r\n          entityLocationData['x'] = prex;\r\n          entityLocationData['y'] = prey;\r\n          entityLocationData['r'] = prer;\r\n        }\r\n        entityLocationData['sonFlag'] = (entityLocationData['son'].length > 0) ? (1) : (0);\r\n        // entityLocationData['showRel'] = false;\r\n        _this.drawEntityLocation.push(entityLocationData);\r\n      }\r\n      let entityLocationData = _this.drawEntityLocation;\r\n      let colors = _this.mcolor;\r\n      let colorIndex = 0;\r\n      let colorrootIndex = 0;\r\n\r\n      _this.sumTotalDuration = sumTotalDuration;\r\n      for (let i = 0; i < entityLocationData.length; i++) {\r\n        let x = entityLocationData[i]['x'];\r\n        let y = entityLocationData[i]['y'];\r\n        let r = entityLocationData[i]['r'];\r\n\r\n        let showEntity = _this.showEntityList.find(function (d) { return d['id'] == entityLocationData[i]['id'] });\r\n        if (entityLocationData[i]['type'] == 0 && (showEntity['show'] == true)) {\r\n          _this.drawEntityTimeAxis(circleG, entityLocationData[i]);\r\n        }\r\n        if ((entityLocationData[i]['layout'] == '0' && (entityLocationData[i]['name'] != 'Test'))) {\r\n          colorIndex = colorrootIndex;\r\n          colorrootIndex++;\r\n\r\n        }\r\n        if ((entityLocationData[i]['son'].length != 0) && (_this.showEntityList.find(function (d) { return d['id'] == entityLocationData[i]['son'][0] })['show'])) {\r\n          let maxxs = entityLocationData[i]['x'] - entityLocationData[i]['r'] - 40;\r\n          let maxys = entityLocationData[i]['y'] - entityLocationData[i]['r'] - 40;\r\n          let minxs = tools.deepClone(maxxs);\r\n          let minys = tools.deepClone(maxys);\r\n          let rectPoints = [[maxxs, maxys]];\r\n          let sons = tools.deepClone(data[i]['son']);\r\n          while ((sons.length > 0)) {\r\n            let s = sons[0];\r\n            sons.splice(0, 1);\r\n            let curson = entityLocationData.find(function (d) { return d['id'] == s; });\r\n            let curgson = curson['son'];\r\n            let curx = curson['x'] + curson['r'] * 2;\r\n            let cury = curson['y'] + curson['r'] * 2;\r\n            if (curx > maxxs) { maxxs = curx; }\r\n            // if(curson['y']<maxys)maxys = curson['y'];\r\n            if (cury < minys) minys = cury;\r\n            if (cury > maxys) maxys = cury;\r\n            for (let gs = 0; gs < curgson.length; gs++) {\r\n              sons.push(curgson[gs]);\r\n            }\r\n          }\r\n          rectPoints = [[minxs, minys], [minxs, maxys], [maxxs, maxys], [maxxs, minys]];\r\n          // _this.drawpolygon(backG, colors[colorIndex], rectPoints, \"rgb(255,255,255)\",0.3);\r\n          _this.drawRect(backG, minxs, minys, Math.abs(maxxs - minxs), Math.abs(maxys - minys), 20, 20, colors[colorIndex], 0.1, \"white\", `backRect${i}`)\r\n\r\n          colorIndex++;\r\n          colorIndex %= colors.length\r\n        }\r\n        // entityLocationData[i]['color'] = colors[colorIndex - 1];\r\n        // if ((entityLocationData[i]['layout'] == '0') && ((entityLocationData[i]['name'] == 'Test') || (entityLocationData[i]['name'] == 'Example'))) {\r\n        //   entityLocationData[i]['color'] = colors[colorIndex]\r\n        // }\r\n      }\r\n      _this.drawTimeLine(timeLineG, path, \"rgb(200,200,200)\", 5, '0', 'timeLine ', 'timeLine ');\r\n      _this.drawRelationshipLine(timeLineG);\r\n      _this.drawTimeAxis(_this.TimeAxisSvg);\r\n      _this.drawTypeRiver(_this.TimeAxisSvg);\r\n      _this.updataTimeAxisDur(_this.TimeAxisSvg, _this.timeAxisX, _this.timeAxisW);\r\n    },\r\n    updataTimeAxisDur(svg, x, width) {\r\n      const _this = this;\r\n      let margin = _this.margin;\r\n      let totalWidth = _this.width //margin.left - margin.right;\r\n      let y = 0;\r\n      let h = 200;\r\n      _this.drawRect(svg, 0, y, x, h, 3, 3, 'white', 0.3, '', \"timeAxisRect1\")\r\n      let curRect = _this.drawRect(svg, x, y - 0, width, h - 5, 3, 3, 'rgba(0,0,0,0)', 1, 'rgb(145, 180, 189)', 'winRect', 2);\r\n      // --------------------------------------\r\n      // curRect.on('mousemove', function (e) {\r\n      //   d3.select(this).attr(\"cursor\", 'pointer');\r\n      //   if (_this.timeAxisDropFlag == 1) {\r\n      //     let mx = e.clientX - _this.timeAxisDownX;\r\n      //     _this.timeAxisX = e.layerX - 450 - _this.timeAxisW / 2;\r\n      //   }\r\n      // })\r\n      // curRect.on('mousedown', function (e) {\r\n      //   _this.timeAxisDownX = e.clientX;\r\n      //   _this.timeAxisDropFlag = 1;\r\n      // })\r\n      // curRect.on('mouseup', function (e) {\r\n      //   _this.timeAxisDownX = e.clientX;\r\n      //   _this.timeAxisDropFlag = 0;\r\n      // })\r\n      // ----------------------------------------\r\n\r\n      _this.drawRect(svg, x + width, y, totalWidth - width, h, 3, 3, 'white', 0.3, '', \"timeAxisRect2\")\r\n    },\r\n    drawTypeRiver(svg) {\r\n      const _this = this;\r\n      let oriData = _this.data;\r\n      let resData = [];\r\n      let triLi = [];\r\n      let exeLi = [];\r\n      var defs = svg.append(\"defs\");\r\n\r\n      var filter = defs\r\n        .append(\"filter\")\r\n        .attr(\"id\", \"coolShadow\")\r\n        .attr(\"x\", \"-100%\")\r\n        .attr(\"y\", \"-100%\") //\r\n        .attr(\"width\", \"300%\")\r\n        .attr(\"height\", \"300%\"); //\r\n\r\n      filter\r\n        .append(\"feMorphology\")\r\n        .attr(\"in\", \"SourceGraphic\")\r\n        .attr(\"result\", \"upperLayer\")\r\n        .attr(\"operator\", \"dilate\")\r\n        .attr(\"radius\", \"0.2 0.2\");\r\n\r\n      filter\r\n        .append(\"feMorphology\")\r\n        .attr(\"in\", \"SourceAlpha\")\r\n        .attr(\"result\", \"enlargedAlpha\")\r\n        .attr(\"operator\", \"dilate\")\r\n        .attr(\"radius\", \"0.2 0.2\");\r\n\r\n      filter\r\n        .append(\"feGaussianBlur\")\r\n        .attr(\"in\", \"enlargedAlpha\")\r\n        .attr(\"result\", \"bluredAlpha\")\r\n        .attr(\"stdDeviation\", \"3\");\r\n\r\n      filter\r\n        .append(\"feOffset\")\r\n        .attr(\"in\", \"bluredAlpha\")\r\n        .attr(\"result\", \"lowerLayer\")\r\n        .attr(\"dy\", \"1\"); //\r\n\r\n      var feMerge = filter.append(\"feMerge\");\r\n      feMerge.append(\"feMergeNode\").attr(\"in\", \"lowerLayer\");\r\n      feMerge.append(\"feMergeNode\").attr(\"in\", \"upperLayer\");\r\n      let total = 0\r\n      for (let i = 0; i < oriData.length; i++) {\r\n        let curEnt = oriData[i];\r\n        let tp = {}\r\n        tp['od'] = i;\r\n        tp['du'] =total;\r\n        total+=curEnt['totalDuration'];\r\n        console.log(curEnt)\r\n        if ((curEnt['type'] == \"1\")) {\r\n          triLi.push(tp);\r\n        }\r\n        if (curEnt['type'] == \"2\") {\r\n          exeLi.push(tp);\r\n        }\r\n        let typeData = curEnt[\"attribute\"][\"expressions\"];\r\n        let totalDur = 0;\r\n\r\n        for (let t in typeData) {\r\n          // let color = typeColor[i];\r\n          let typeDurition = typeData[t];\r\n          let totalTypeSeconds = 0;\r\n          for (let d in typeDurition) {\r\n            totalTypeSeconds += (tools.time2seconds(typeDurition[d][1]) - tools.time2seconds(typeDurition[d][0]))\r\n          }\r\n          totalDur += totalTypeSeconds;\r\n          tp[t] = totalTypeSeconds;\r\n        }\r\n        for (let t in tp) {\r\n          if ((t != 'od')&&(t!='du')) {\r\n            tp[t] /= totalDur;\r\n            if (totalDur == 0) {\r\n              tp[t] = 0;\r\n            }\r\n          }\r\n        }\r\n        resData.push(tp)\r\n      }\r\n      let data = resData;\r\n      var stack = d3.stack()\r\n        .keys(['1', '2', '3'])\r\n        .order(d3.stackOrderInsideOut)\r\n        .offset(d3.stackOffsetWiggle);\r\n\r\n      let yRangeWidth = 70;\r\n      let w = parseInt(svg.attr(\"width\")) + 30\r\n      let xStep = (w) / oriData.length;\r\n      let xScale = d3.scaleLinear().domain([0,total]).range([0,w])\r\n      let yScale = d3.scaleLinear().domain([-1, 1]).range([0, 70]);\r\n      var area = d3.area()\r\n        .curve(d3.curveBasis)\r\n        .x(function (d) {\r\n          return 15+xScale(d.data.du)+d.data.od * 10//xStep + 15;\r\n        })\r\n        .y0(function (d) {\r\n          return 153 + yRangeWidth - yScale(d[0]);\r\n        })\r\n        .y1(function (d) {\r\n          return 153 + yRangeWidth - yScale(d[1]);\r\n        });\r\n      let stackData = stack(data)\r\n      console.log(\"stack\",resData,stackData)\r\n      let lenThreshold = 0.4;\r\n      let iconLi = {}\r\n      for (let s in stackData) {\r\n        iconLi[s] = []\r\n        for (let i in stackData[s]) {\r\n          let lenArea = stackData[s][i]\r\n          if ((lenArea[1] - lenArea[0]) > 0.4) {\r\n            iconLi[s].push([i, lenArea]);\r\n          }\r\n          for (let li in iconLi[s]) {\r\n            if (i < (iconLi[s][li][0] + 2)) {\r\n              let selectArea = iconLi[s][li][1]\r\n              if (((selectArea[1] - lenArea[1]) - (selectArea[0] - lenArea[0])) < 0.2) {\r\n                iconLi[s].splice(s, 1);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // let areaG = svg.append(\"g\")\r\n      let typeColor = {\r\n        \"1\": \"#ff9c9c\",\r\n        \"2\": \"#f4f4d0\",\r\n        \"3\": \"#6f8be0\",\r\n      };\r\n      let colorLi = _this.mcolor;\r\n      svg.selectAll(\"path\")\r\n        .data(stackData)\r\n        .join(\"path\")\r\n        .attr(\"id\", function (d) { return d.key })\r\n        .attr(\"class\", \"river\")\r\n        .attr(\"d\", function (d) {\r\n          return area(d)\r\n        })\r\n        .attr(\"fill\", function (d, i) {\r\n          return typeColor[d.key]\r\n        })\r\n        .on(\"mouseover\", function (d) {\r\n          d3.selectAll(\".river\").style(\"filter\", \"url()\")\r\n          d3.select(this).style(\"filter\", \"url(#coolShadow)\")\r\n        })\r\n\r\n      for (let t in triLi) {\r\n        let area = tools.calcTriangle((triLi[t]['od']) * xStep, -30, 14);\r\n        _this.drawTriangle(svg, \"rgb(250, 199, 88)\", area, \"rgb(250, 199, 88)\",1,15,\"entE\",`entE_${data['id']}`);\r\n        _this.drawTxt(svg, (triLi[t]['od']) * xStep, -23, \"T\", \"white\", 0, \"middle\", 18)\r\n      }\r\n      for (let t in exeLi) {\r\n        let area = tools.calcTriangle((exeLi[t]['od']) * xStep, -30, 14);\r\n        _this.drawTriangle(svg, \"rgb(250, 199, 88)\", area, \"rgb(250, 199, 88)\",1,15,\"entE\",`entE_${data['id']}`);\r\n        _this.drawTxt(svg, (exeLi[t]['od']) * xStep, -23, \"E\", \"white\", 0, \"middle\", 18)\r\n      }\r\n    },\r\n    drawTimeAxis(svg) {\r\n      const _this = this;\r\n      let sumTotalDuration = _this.sumTotalDuration;\r\n      let data = _this.drawEntityLocation;\r\n      let addData = tools.deepClone(_this.drawEntityLocation);\r\n      let margin = _this.margin;\r\n      let prex = margin.left;\r\n      let prey = 50;\r\n      let width = svg.attr(\"width\") -20 //margin.left - margin.right;\r\n      let height = _this.height - margin.top - margin.bottom;\r\n      let widthScale = d3.scaleLinear([0, sumTotalDuration], [0, width]);\r\n      data.forEach((self, indx, arr) => {\r\n        let totalDurationValue = self['totalDuration'];\r\n        let timeList = self['time'];\r\n        let id = self['id']\r\n        let duration = tools.time2seconds(timeList[1]) - tools.time2seconds(timeList[0]);\r\n        // console.log(timeList,tools.time2seconds(timeList[0]))\r\n        let evWidth = widthScale(duration) - 4;\r\n\r\n        let evTWidth = widthScale(totalDurationValue);\r\n        let lay = parseInt(self['layout']);\r\n        let evHight = 80 - 20 * lay;\r\n        let x = prex;\r\n        let y = prey + 20 * lay;\r\n        prex += evWidth + 4;\r\n        let cr = 3;\r\n        // if(self['type']==0){\r\n        if (1) {\r\n          if (lay == 0) {\r\n            _this.drawRect(svg, x-1, y - 59, 3, 42, 0, 0, self['color'], 0.4, 'white', `timeAxisEntBl_${indx}`, 0, 'timeAxisEntBl')\r\n\r\n            _this.drawTxt(svg, x+23, y  - 23, 10, [self['time'][0].split(\":\").splice(1).join(\":\")], self['color'], 15, `timeDurText_${id}`, 'timeDuyrText');\r\n            _this.drawRect(svg, x - 2, y - 20, evTWidth, 100, 6, 6, self['color'], 0.3, 'white', `timeAxisEntB_${indx}`, 1.5, 'timeAxisEntB')\r\n          }\r\n          _this.drawRect(svg, x, y, evWidth, evHight, 3, 3, self['color'], 0.4, self['colorD'], `timeAxisEnt_${id}`, 1.5, 'timeAxisEnt')\r\n          _this.drawTxt(svg, x + evWidth / 2, y + evHight + 20, 10, [self['name'].split(\" \").join(\" \")], \"grey\", 16, `timeText_${id}`, 'timeText');\r\n        }\r\n        else {\r\n          if (lay == 0) {\r\n            _this.drawRect(svg, x - 2, y - 20, evTWidth, 100, 6, 6, self['color'], 0.3, 'white', `timeAxisEntB_${id}`, 1.5, 'timeAxisEnt')\r\n          }\r\n          let area = [[x + cr, y + evHight - cr], [x - cr + evWidth, y + evHight - cr], [x + evWidth / 2, y]];\r\n          _this.drawTriangle(svg, self['color'], area, self['color'], 1, cr * 2,\"entE\",`entE_${data['id']}`);\r\n        }\r\n        addData[indx]['timeX'] = x;\r\n        addData[indx]['timeW'] = evWidth\r\n      })\r\n\r\n      d3.selectAll('.timeText').attr(\"opacity\", 0)\r\n      _this.drawEntityLocation = addData;\r\n    },\r\n    drawTriangle(svg, color, points, stroke, opacity = 1, strokeW = 15,classNa,idNa) {\r\n      const _this = this;\r\n      svg.append(\"polygon\")\r\n        .attr(\"points\", points)\r\n        .attr(\"fill\", color)\r\n        .attr(\"id\", idNa)\r\n        .attr(\"class\", classNa)\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"stroke\", stroke)\r\n        .on(\"mouseover\", function (d) {\r\n          // d3.select(this).attr(\"r\", r * 1.1)\r\n          let classN = d3.select(this).attr(\"class\");\r\n          let idN = d3.select(this).attr(\"id\").split(\"_\")[1]\r\n          _this.overEntityId = idN\r\n          let showRel = _this.showEntityRelIdList\r\n          if (!showRel.includes(parseInt(idN))) {\r\n            showRel.push(parseInt(idN))\r\n            _this.showEntityRelIdOverState = 0;\r\n          }\r\n          else {\r\n            _this.showEntityRelIdOverState = 1;\r\n          }\r\n          _this.showEntityRelIdList = showRel;\r\n          if (classN == 'linePoint') {\r\n            d3.select(this).attr(\"opacity\", 1).attr(\"r\", 5)\r\n          }\r\n          // else {\r\n          //   d3.selectAll(\".f\" + data['id'])\r\n          //     .attr(\"transform\", function (d) {\r\n          //       let transformd = d3.select(this).attr(\"transform\")\r\n          //       return transformd.split(\" \")[0] + \" scale(1.1)\"\r\n          //     })\r\n\r\n          //   d3.selectAll(\".basicRel\")\r\n          //     .attr(\"class\", function (d) {\r\n          //       let classN = d3.select(this).attr(\"class\");\r\n          //       let classNList = classN.split(\" \");\r\n          //       let jg = 0;\r\n          //       for (let i = 0; i < classNList.length - 1; i++) {\r\n          //         if ('source' + data['id'] == classNList[i]) { jg = 1; }\r\n          //         if ('target' + data['id'] == classNList[i]) { jg = 1; }\r\n          //       }\r\n          //       if (jg == 1) {\r\n          //         // classN += \" activeS\";\r\n          //       }\r\n          //       return classN;\r\n          //     })\r\n          // }\r\n        })\r\n        .on(\"mouseleave\", function (d) {\r\n          // d3.select(this).attr(\"r\", r)\r\n\r\n          _this.overEntityId = \"\"//_this.curEntId;\r\n          let classN = d3.select(this).attr(\"class\");\r\n\r\n          let idN = d3.select(this).attr(\"id\").split(\"_\")[1]\r\n          let showRel = _this.showEntityRelIdList\r\n          if (_this.showEntityRelIdOverState == 1) {\r\n            showRel.push(parseInt(idN))\r\n          }\r\n          else {\r\n            showRel.splice(showRel.indexOf(parseInt(idN)), 1)\r\n          }\r\n          _this.showEntityRelIdList = showRel;\r\n\r\n          if (classN == 'linePoint') {\r\n            d3.select(this).attr(\"opacity\", 0).attr(\"r\", 5)\r\n          }\r\n          // else {\r\n          //   d3.selectAll(\".f\" + data['id'])\r\n          //     .attr(\"transform\", function (d) {\r\n          //       let transformd = d3.select(this).attr(\"transform\")\r\n          //       return transformd.split(\" \")[0] + \" scale(1)\"\r\n          //     })\r\n          //   d3.select(\"#graphPanel\").selectAll(\"path\")\r\n          //     .attr(\"class\", function (d) {\r\n          //       let thisSelect = d3.select(this)\r\n          //       let classN = thisSelect.attr(\"class\");\r\n          //       let classNList = classN.split(\" \")\r\n          //       if (classNList[classNList.length - 1] == \"activeS\") {\r\n          //         classN = \"\";\r\n          //         for (let i = 0; i < classNList.length - 1; i++) {\r\n          //           classN += \" \" + classNList[i];\r\n          //         }\r\n          //       }\r\n          //       return classN\r\n          //     })\r\n          // }\r\n        })\r\n        .on(\"click\", function (d) {\r\n\r\n          let idN = d3.select(this).attr(\"id\").split(\"_\")[1]\r\n          let showRel = _this.showEntityRelIdList;\r\n          //  - _this.showEntityRelIdOverState;\r\n          if (!showRel.includes(parseInt(idN))) {\r\n            showRel = [(parseInt(idN))]\r\n            _this.showEntityRelIdOverState = 1;\r\n          }\r\n          else if (showRel.includes(parseInt(idN))) {\r\n            // showRel.filter(item=>{return item==parseInt(idN)})\r\n            _this.showEntityRelIdOverState = 0;\r\n            showRel.splice(showRel.indexOf(parseInt(idN)), 1)\r\n          }\r\n          _this.showEntityRelIdList = showRel;\r\n\r\n          // d3.select(this).attr(\"r\", r);\r\n          // d3.selectAll(\".f\" + data['id'])\r\n          //   .attr(\"transform\", function (d) {\r\n          //     let transformd = d3.select(this).attr(\"transform\")\r\n          //     return transformd.split(\" \")[0] + \" scale(1)\"\r\n          //   })\r\n          let thisId = this.id.split(\"_\")[1];\r\n          _this.curEntId = thisId;\r\n          let thisData = _this.drawEntityLocation.find(function (a) { return a['id'] == thisId })\r\n          let thisTime = thisData['time'];\r\n          _this.click_Ent(thisTime);\r\n          let psvg = d3.select(\"#entG\");\r\n          let dw = psvg.attr(\"width\");\r\n          let dh = psvg.attr(\"height\");\r\n          psvg.remove();\r\n          let svg = d3.select('#editEnt').append(\"g\").attr(\"id\", \"entG\").attr(\"width\", dw).attr(\"height\", dh);\r\n          _this.drawEntity(svg, dw/2, 100, 50, thisData,1)\r\n          // if (thisData['type'] == 0 ) {\r\n            // _this.drawEntityTimeAxis(svg,thisData,[dw/2,100,10]);\r\n        // }\r\n          // console.log(thisTime,thisId,thisData)\r\n        })\r\n        .attr(\"stroke-width\", strokeW);\r\n    },\r\n    drawpolygon(svg, color, areas, stroke, opacity = 1) {\r\n      svg.append(\"polygon\")\r\n        .attr(\"points\", areas)\r\n        .attr(\"fill\", color)\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"stroke\", stroke)\r\n        .attr(\"stroke-width\", \"1.5px\");\r\n    },\r\n    drawEntityTimeAxis(svg, entData,copy=0) {\r\n\r\n      const _this = this;\r\n      let x = entData['x'];\r\n      let r = entData['r'];\r\n      let y = entData['y'] + r / 2;\r\n      if(copy!=0){\r\n        x = copy[0];\r\n        r = copy[2];\r\n        y = copy[1]+r/2;\r\n      }\r\n      let path1 = d3.path();\r\n      let jg1 = 0;\r\n      let path2 = d3.path();\r\n      let jg2 = 0;\r\n      let daId = entData['id']\r\n      let entDataO = _this.drawEntityLocation;\r\n      let sumTotalDuration = _this.sumTotalDuration;\r\n      let widthScale = d3.scaleLinear([0, sumTotalDuration], [0, Math.PI]);\r\n      let timeStepR = 0;\r\n      let timeStartR = -Math.PI / 2;\r\n      let inter = 0;\r\n      let sons = tools.deepClone(entData['son']);\r\n      let relList = [];\r\n      let relRootList = [];\r\n      let psNum = 0.5;\r\n      if ((sons.length > 0)) {\r\n        inter = 14\r\n      }\r\n\r\n      let relData = _this.relData;\r\n      let oData = _this.drawEntityLocation;\r\n      let basicRel = relData['basicRel'];\r\n      for (let re = 0; re < basicRel.length; re++) {\r\n\r\n        let sorceId = basicRel[re][0];\r\n        let targetId = basicRel[re][1];\r\n        let cNode = '';\r\n        if (sorceId == daId) {\r\n          cNode = oData.find(function (d) { return d['id'] == targetId });\r\n          relList.push(targetId);\r\n          relRootList.push(cNode['rootIndex']);\r\n        }\r\n\r\n        if (targetId == daId) {\r\n          cNode = oData.find(function (d) { return d['id'] == sorceId });\r\n          relList.push(sorceId);\r\n          relRootList.push(cNode['rootIndex']);\r\n        }\r\n      };\r\n      // if(entData[]) \r\n      let wline = 0;\r\n      let sumTotalDurationF = 0;\r\n      entDataO.forEach((self, indx, arr) => {\r\n        let totalDurationValue = self['totalDuration'];\r\n        let timeList = self['time'];\r\n        let layout = self['layout'];\r\n        let rootIndex = self['rootIndex'];\r\n        let duration = tools.time2seconds(timeList[1]) - tools.time2seconds(timeList[0]);\r\n        timeStepR = widthScale(duration);\r\n        if (!relRootList.includes(rootIndex)) {\r\n          wline += timeStepR * psNum;\r\n          sumTotalDurationF += duration;\r\n        }\r\n      })\r\n      let widthScaleA = d3.scaleLinear([0, sumTotalDuration - sumTotalDurationF], [0, Math.PI - wline]);\r\n      // if(rootEntityList.length==0){\r\n      //   widthScaleA = widthScale\r\n      // }\r\n      // let wline = 0;\r\n      entDataO.forEach((self, indx, arr) => {\r\n        let totalDurationValue = self['totalDuration'];\r\n        let timeList = self['time'];\r\n        let layout = self['layout'];\r\n        let rootIndex = self['rootIndex'];\r\n        let cId = self['id'];\r\n        let duration = tools.time2seconds(timeList[1]) - tools.time2seconds(timeList[0]);\r\n        timeStepR = widthScale(duration);\r\n        if (!relRootList.includes(rootIndex)) {\r\n          if (relRootList.length != 0) {\r\n            timeStepR = psNum * widthScale(duration);\r\n          }\r\n        }\r\n        else {\r\n          timeStepR = widthScaleA(duration)\r\n        }\r\n        let endAnglet = timeStartR + timeStepR;\r\n        var dataset = { startAngle: timeStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n        timeStartR = endAnglet;\r\n        let color = 'blue';\r\n        let rh = 30;\r\n        let h = rh;\r\n        let nh = 0;\r\n        if (relRootList.length != 0) {\r\n          h = rh * 0.32 + rh * 0.6 - 3 * layout;\r\n          nh = rh * 0.3;\r\n        }\r\n        if (!relRootList.includes(self['rootIndex'])) {\r\n          h = rh * 0.7;\r\n          nh = h * 0 + h * 0.6;\r\n        }\r\n        else {\r\n          dataset.startAngle += 0.003;\r\n          dataset.endAngle -= 0.003;\r\n\r\n        }\r\n        var arcPath = d3.arc()\r\n          .innerRadius(r + inter + nh)\r\n          .outerRadius(r + inter + h);\r\n        var pathArc = arcPath(dataset);\r\n        let arc;\r\n        if (relRootList.length != 0) {\r\n          let jiantouPath = d3.path();\r\n          jiantouPath.arc(x, y - r / 2, r + h + inter, - Math.PI, 0);\r\n\r\n          // _this.drawTimeLine(_this.arcG, jiantouPath, \"rgb(200,200,200)\", 1, '9,5', 'timeLayout ', 'timeLayout ');\r\n\r\n          if (relRootList.includes(self['rootIndex'])) {\r\n            if (relList.includes(parseInt(self['id']))) {\r\n            if((copy!=0) &&(jg1==0)){\r\n              jg1=1\r\n              path1.moveTo(2, 25)\r\n              path1.lineTo(150,25)\r\n              let ang = dataset.startAngle+Math.PI/2\r\n              _this.drawTxt(svg, 70, 20, 100, [\"Associated Concept\"], \"grey\", 15, `texts_1`);\r\n              // path1.lineTo((x+10),(y-r/2+10))\r\n              path1.lineTo((x-(r + inter + h)*Math.cos(ang)),(y-r/2-(r + inter + h)*Math.sin(ang)))\r\n              _this.drawTimeLine(svg, path1, \"rgb(200,200,200)\", 2, '9,5', 'mm ', 'mm ');\r\n            }\r\n              arc = _this.drawArc(svg, x, y - r / 2, pathArc, self['color'], self['color'], `timeAxisFor f${entData['id']} ${self['id']}`, '0', 0, 1);\r\n            }\r\n            else {\r\n              // path1.lineTo(0,0) \r\n              arc = _this.drawArc(svg, x, y - r / 2, pathArc, \"white\", self['color'], `timeAxisFor f${entData['id']} ${self['id']}`, '0', 0.0, 0.4);\r\n            }\r\n          }\r\n          else {\r\n            arc = _this.drawArc(svg, x, y - r / 2, pathArc, self['color'], self['color'], `timeAxisFor f${entData['id']} ${self['id']}`, '0', 0, 0.2);\r\n\r\n          }\r\n          if(daId == self['id']){\r\n            let color = d3.select(`#entCircle_${self['id']}`).attr(\"fill\")\r\n            let da = tools.deepClone(dataset);\r\n            da.startAngle = (dataset.endAngle+dataset.startAngle)/2-0.001;\r\n            da.endAngle = (dataset.endAngle+dataset.startAngle)/2+0.0001;\r\n            let arcPa = d3.arc()\r\n            .innerRadius(r + inter + (nh+h)/2)\r\n            .outerRadius(r + inter + (nh+h)/2);\r\n            let pathA = arcPa(da);\r\n            if((copy!=0) &&(jg2==0)){\r\n              jg2=1\r\n              path2.moveTo(400, 125)\r\n              path2.lineTo(290,125)\r\n              let ang = da.startAngle+0.001+Math.PI/2\r\n              _this.drawTxt(svg, 350, 120, 100, [\"Current Concept\"], \"grey\", 15, `texts_1`);\r\n              // path1.lineTo((x+10),(y-r/2+10))\r\n              path2.lineTo((x-(r + inter + h)*Math.cos(ang)),(y-r/2-(r + inter + h)*Math.sin(ang)))\r\n              _this.drawTimeLine(svg, path2, \"rgb(200,200,200)\", 2, '9,5', 'mm ', 'mm ');\r\n            }\r\n            _this.drawArc(svg, x, y - r / 2, pathA, color, self['color'], `timeAxisself f${self['id']}`, '0', 6, 1);\r\n          }\r\n            if(copy!=0){\r\n              // _this.drawTimeLine(svg, path1, \"rgb(200,200,200)\", 3, '9,5', 'mm ', 'mm ');\r\n            }\r\n          arc.on(\"mouseover\", function (d) {\r\n            let classN = d3.select(this).attr(\"class\");\r\n            let sId = (classN.split(\" \")[1] + \"\").slice(1);\r\n            let tId = classN.split(\" \")[2];\r\n            _this.showEntityRelIdList = [sId]\r\n            _this.overEntityId = sId;\r\n            _this.overTargetEntityId = tId;\r\n          })\r\n          \r\n          arc.on(\"mouseleave\", function (d) {\r\n            let classN = d3.select(this).attr(\"class\");\r\n            let sId = (classN.split(\" \")[1] + \"\").slice(1);\r\n            let showRel = _this.showEntityRelIdList;\r\n            _this.overTargetEntityId = '';\r\n            _this.overEntityId = \"\"//_this.curEntId;\r\n            if (_this.showEntityRelIdOverState == 1) {\r\n              showRel.push(parseInt(sId))\r\n            }\r\n            else {\r\n              showRel.splice(showRel.indexOf(parseInt(sId)), 1)\r\n            }\r\n          })\r\n        }\r\n      })\r\n    },\r\n    drawEntity(svg, x, y, r, data,copy=0) {\r\n      const _this = this;\r\n      let color_linear = _this.importanceColor_linear;\r\n      let compute_color = _this.importanceCompute_color;\r\n      let rScale = _this.relevanceScale_linear;\r\n      let oData = _this.data;\r\n      let path1 = d3.path();\r\n      let path2 = d3.path();\r\n      let jg2=0;\r\n      let ang2=0;\r\n      let path3 = d3.path();\r\n      let jg3=0;\r\n      let ang3=0;\r\n      let importanceValue = data['attribute']['importance'];\r\n      // let relevanceValuale(relevanceValue)\r\n      // { 'id': dae = data['attribute']['relevance'];\r\n      // let r = rScta[i]['id'], \"x\": x, \"r\": r, \"layout\": lay, \"y\": y, \"sonFlag\": sonFlag }\r\n\r\n\r\n      if (data['type'] == '1') {\r\n        let area = tools.calcTriangle(x, y, r);\r\n        _this.drawTriangle(svg, \"rgb(250, 199, 88)\", area, \"rgb(250, 199, 88)\",1,15,\"entT\",`entT_${data['id']}`);\r\n\r\n        _this.drawTxt(svg, x, y + 8, 20, [\"T\"], 'white', 28, \"T\")\r\n      }\r\n      else if (data['type'] == '2') {\r\n        let area = tools.calcTriangle(x, y, r);\r\n        _this.drawTriangle(svg, \"rgb(250, 199, 88)\", area, \"rgb(250, 199, 88)\",1,15,\"entE\",`entE_${data['id']}`);\r\n\r\n        _this.drawTxt(svg, x, y + 8, 20, [\"E\"], 'white', 28, \"E\")\r\n      }\r\n      else {\r\n\r\n        let cy = y;\r\n        let totalDuration = _this.totalDuration;\r\n        let timeLineScale_linear = d3.scaleLinear([0, totalDuration], [x - r * Math.sqrt(3) / 2, x + r * Math.sqrt(3) / 2])\r\n        let timeLineHighScale_linear = d3.scaleLinear([0, _this.maxTotalDuration - 50], [r / 2, r * (1 + Math.sqrt(3) / 3 * 2)])\r\n        let circleColor = compute_color(color_linear(importanceValue));\r\n        _this.drawCircle(svg, x, cy, r, circleColor, data, 1, \"entCircle\", \"entCircle_\" + data['id']);\r\n\r\n        r = r * Math.sqrt(3) / 2;\r\n        y += r / 2;\r\n        let path = d3.path();\r\n\r\n\r\n        path.moveTo(x - r, y);\r\n        let lineLi = [data];\r\n        let linePoint = [{ 'id': data['id'], 'time': data['time'], 'x': 0, 'y': 0 }];\r\n        let jgidL = [data['id']];\r\n        let similarityRelsli = [data[\"similarityRel\"]];\r\n        while (similarityRelsli.length > 0) {\r\n          let similarityRels = similarityRelsli[0];\r\n          similarityRelsli.splice(0, 1);\r\n          let jg = 0;\r\n          for (let srel in similarityRels) {\r\n            let cdata = oData.find(function (d) { return d['id'] == similarityRels[srel] });\r\n            if (jgidL.indexOf(cdata['id']) == -1) {\r\n              similarityRelsli.push(cdata[\"similarityRel\"])\r\n              jg = 1;\r\n              lineLi.push(cdata)\r\n              jgidL.push(cdata['id'])\r\n              linePoint.push({ 'id': cdata['id'], 'time': cdata['time'], 'x': 0, 'y': 0 })\r\n            }\r\n          }\r\n          // if(jg==0){\r\n          // break;\r\n          // }\r\n        }\r\n\r\n        const sortmt = (a, b) => {\r\n          return tools.time2seconds(a[0]) - tools.time2seconds(b[0]);\r\n        }\r\n        const sortlp = (a, b) => {\r\n          return tools.time2seconds(a['time'][0]) - tools.time2seconds(b['time'][0]);\r\n        }\r\n\r\n        lineLi = lineLi.sort(sortlp);\r\n        linePoint = linePoint.sort(sortlp);\r\n        let lineData = [[x - r * Math.sqrt(3) / 2 - 4, y]];\r\n        for (let t = 0; t < lineLi.length; t++) {\r\n          let startT = lineLi[t]['time'][0];\r\n          let duration = lineLi[t]['totalDuration']\r\n          // let endT = lineLi[t]['time'][1];\r\n          let startS = tools.time2seconds(startT);\r\n          let endS = startS + duration;\r\n          // let startx = timeLineScale_linear((startS - duration * 10));\r\n          // let endx = timeLineScale_linear((endS + duration * 10));\r\n          let limst = (x - r * Math.sqrt(3) / 2);\r\n          let limed = (x + r * Math.sqrt(3) / 2);\r\n          let startx = (limst < timeLineScale_linear((startS))) ? (timeLineScale_linear((startS))) : (limst);\r\n          let endx = (limed > timeLineScale_linear((endS))) ? (timeLineScale_linear((endS))) : (limed);\r\n          // let midx = timeLineScale_linear((endS + startS) / 2);\r\n          let midx = (startx + endx) / 2;\r\n          let ys = y;\r\n          let yz = y - timeLineHighScale_linear((duration));\r\n          linePoint[t]['x'] = midx;\r\n          linePoint[t]['y'] = y - timeLineHighScale_linear(duration) / 1.7;\r\n          // if (startx < (lineData[lineData.length - 1][0])) {\r\n          if (t > 0) {\r\n            lineData.splice(lineData.length - 1, 1);\r\n            midx += t * 5;\r\n            startx = midx - ((midx - (lineData[lineData.length - 1][0] + midx) / 2)) / 2;\r\n            endx += t * 5;\r\n            ys = y + (y - lineData[lineData.length - 1][1]) / 3\r\n          }\r\n          // }\r\n          lineData.push([startx, ys], [midx, yz], [endx, y])\r\n          // let startx = timeLineScale_linear((startS - duration * 10));\r\n          // let endx = timeLineScale_linear((endS + duration * 10));\r\n\r\n          // let startyf = y + timeLineHighScale_linear((duration)) / 8;\r\n          // let startyf1 = y + timeLineHighScale_linear((duration)) / 8;\r\n          // let endyf = y + timeLineHighScale_linear((duration)) / 8;\r\n          // let endyf1 = y + timeLineHighScale_linear((duration)) / 8;\r\n          // let yz = y - timeLineHighScale_linear((duration));\r\n          // let midx = timeLineScale_linear((endS + startS) / 2);\r\n          // linePoint[t]['x'] = midx;\r\n          // linePoint[t]['y'] = y - timeLineHighScale_linear(duration) / 1.7;\r\n          // let y1 = y;\r\n          // if (startx < (lineData[lineData.length - 1][0])) {\r\n          //   if (t > 0) {\r\n          //     lineData.splice(lineData.length - 3, 3);\r\n          //     startx = (lineData[lineData.length - 1][0] + midx) / 2;\r\n          //     y1 = lineData[lineData.length - 1][1] + timeLineHighScale_linear((duration)) / 2;\r\n          //     startyf = lineData[lineData.length - 1][1] + timeLineHighScale_linear((duration)) / 2;\r\n          //     startyf1 = lineData[lineData.length - 1][1] + timeLineHighScale_linear((duration)) / 2;\r\n          //   }\r\n          // }\r\n          // let startx1 = startx + (timeLineScale_linear((startS + duration)) - timeLineScale_linear((startS)));\r\n          // let endx1 = endx - (timeLineScale_linear((startS + duration)) - timeLineScale_linear((startS)));\r\n          // let startx2 = startx1 + (timeLineScale_linear((startS + duration)) - timeLineScale_linear((startS)));\r\n          // let endx2 = endx1 - (timeLineScale_linear((startS + duration)) - timeLineScale_linear((startS)));\r\n          // if (endx > (r + x)) endx = r + x;\r\n          // if (startx1 < (lineData[lineData.length - 1][0])) startx1 = lineData[lineData.length - 1][0];\r\n          // if (endx1 > (r + x)) endx1 = r + x;\r\n          // if (startx2 < (lineData[lineData.length - 1][0])) startx2 = lineData[lineData.length - 1][0];\r\n          // if (endx2 > (r + x)) endx2 = r + x;\r\n          // lineData.push([startx, y1], [startx1, startyf1], [startx2, startyf], [midx, yz], [endx2, endyf], [endx1, endyf1], [endx, y])\r\n        }\r\n        lineData.push([x + r, y])\r\n        let curve_generator = d3.line()\r\n          .x((d) => d[0])\r\n          .y((d) => {\r\n            let h = Math.sqrt(Math.pow(r, 2) - Math.pow((d[0] - (x - r)), 2));\r\n            if ((y - d[1]) > (h + r * Math.sqrt(3) / 2))\r\n              return y - (h + r * Math.sqrt(3) / 2) + 2;\r\n            return d[1];\r\n          })\r\n          .curve(d3.curveBundle)\r\n        // .curve(d3.curveCatmullRom  )\r\n        // .curve(d3.curveBasis)\r\n        _this.drawTimeLine(svg, curve_generator(lineData), \"white\", 2, '0', 'sonLine ', 'sonLine ');\r\n\r\n        for (let p = 0; p < linePoint.length; p++) {\r\n          _this.drawCircle(svg, linePoint[p]['x'], linePoint[p]['y'], 5, \"red\", linePoint[p], 0, \"linePoint\", \"linePoint_\" + linePoint[p]['id']);\r\n        }\r\n\r\n        // \"1\": \"rgb(145, 204, 117)\",\r\n        //   \"2\": \"rgb(84, 112, 198)\",\r\n        //   \"3\": \"rgb(238, 102, 102)\",\r\n        let typeColor = {\r\n          \"1\": \"#ff9c9c\",\r\n          \"2\": \"#f4f4d0\",\r\n          \"3\": \"#6f8be0\",\r\n        };\r\n        let duration = tools.time2seconds(data['time'][0]) - tools.time2seconds(data['time'][1]);\r\n        let typeData = data['attribute']['expressions'];\r\n        let sonList = data['son'];\r\n        let sons = [sonList];\r\n        while (sons.length > 0) {\r\n          let curSonList = sons[0];\r\n          sons.splice(0, 1);\r\n          if (curSonList.length > 0) {\r\n            for (let s in curSonList) {\r\n              let sonData = oData.find(function (d) { return d['id'] == curSonList[s] });\r\n              let sonTypeData = sonData['attribute']['expressions'];\r\n\r\n              for (let t in sonTypeData) {\r\n                let typeDurition = sonTypeData[t];\r\n                for (let d in typeDurition) {\r\n                  typeData[t].push(typeDurition[d])\r\n                }\r\n              }\r\n              sons.push(sonData['son']);\r\n            }\r\n          }\r\n        }\r\n        var typeStartR = 0//Math.PI/4;\r\n\r\n        var typeStepR = Math.PI / 1;\r\n\r\n        if (sonList.length > 0) {\r\n          let typeTotalDur = 0;\r\n          for (let t in typeData) {\r\n            let typeDurition = typeData[t];\r\n            for (let d in typeDurition) {\r\n              typeTotalDur += (tools.time2seconds(typeDurition[d][1]) - tools.time2seconds(typeDurition[d][0]))\r\n            }\r\n          }\r\n          let typeArcScale_linear = d3.scaleLinear([0, typeTotalDur], [0, Math.PI * 2]);\r\n          for (let i in typeData) {\r\n            let color = typeColor[i];\r\n            let typeDurition = typeData[i];\r\n            let totalTypeSeconds = 0;\r\n            for (let d in typeDurition) {\r\n              totalTypeSeconds += (tools.time2seconds(typeDurition[d][1]) - tools.time2seconds(typeDurition[d][0]))\r\n            }\r\n            if (totalTypeSeconds > 0) {\r\n              let typeStepR = typeArcScale_linear(totalTypeSeconds)//Math.PI/2;\r\n\r\n              let endAnglet = typeStartR + 1 * typeStepR\r\n              var dataset = { startAngle: typeStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n              typeStartR = endAnglet;\r\n              var arcPath = d3.arc()\r\n                .innerRadius(r + 10)\r\n                .outerRadius(r + 25);\r\n              var pathArc = arcPath(dataset);\r\n              _this.drawArc(svg, x, y - r / 2, pathArc, color, color, 'type f' + data['id'] + \" t\" + i);\r\n            }\r\n          if((copy!=0)&&(jg2==0)){\r\n            jg2=1;\r\n              ang2 = dataset.startAngle+Math.PI/2\r\n            }\r\n          }\r\n          let sonTotal = 0;\r\n          let sonNum = 0\r\n          for (let s in sonList) {\r\n            let sonData = oData.find(function (d) { return d['id'] == sonList[s] });\r\n            let sonDur = sonData['totalDuration'];\r\n            sonTotal += sonDur;\r\n            sonNum += 1;\r\n          }\r\n          let skipArc = Math.PI / (sonNum + 2);\r\n          let timeSonLinear = d3.scaleLinear([0, sonTotal], [0, Math.PI - skipArc * (sonNum - 1)]);\r\n          let timeSonHeighLinear = d3.scaleLinear([0, sonTotal], [40, 40]);\r\n\r\n          let timeSonColor_linear = d3.scaleLinear().domain([0, sonTotal]).range([0, 1]);\r\n          let timeSonCompute_color = d3.interpolate(\"white\", circleColor);\r\n          var sonStartR = Math.PI / 2;\r\n\r\n          let relList = [];\r\n          let relRootList = [];\r\n          let psNum = 0.1;\r\n          let daId = data['id']\r\n          let relData = _this.relData;\r\n          let odData = _this.data;\r\n          let basicRel = relData['basicRel'];\r\n          for (let re = 0; re < basicRel.length; re++) {\r\n\r\n            let sorceId = basicRel[re][0];\r\n            let targetId = basicRel[re][1];\r\n            let cNode = '';\r\n            if (sorceId == daId) {\r\n              cNode = odData.find(function (d) { return parseInt(d['id']) == parseInt(targetId) });\r\n              relList.push(targetId);\r\n            }\r\n\r\n            if (targetId == daId) {\r\n              cNode = odData.find(function (d) { return parseInt(d['id']) == parseInt(sorceId) });\r\n              relList.push(sorceId);\r\n            }\r\n          };\r\n          if (relList.length == 0) {\r\n            sonStartR = 0;\r\n            timeSonLinear = d3.scaleLinear([0, sonTotal], [0, Math.PI * 2 - skipArc * (sonNum)]);\r\n          }\r\n\r\n          for (let s in sonList) {\r\n            let sonData = oData.find(function (d) { return d['id'] == sonList[s] });\r\n            let sonDur = sonData['totalDuration'];\r\n\r\n            let sonStepR = timeSonLinear(sonDur)//Math.PI/2;\r\n\r\n            let endAnglet = sonStartR + sonStepR;\r\n            var dataset = { startAngle: sonStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n            sonStartR = endAnglet;\r\n            let color = 'blue';\r\n            var arcPath = d3.arc()\r\n              .innerRadius(r + 28)\r\n              .outerRadius(r + timeSonHeighLinear(sonDur));\r\n            var arcMidPath = d3.arc()\r\n              .innerRadius(0)\r\n              .outerRadius(r + 32);\r\n            var pathArc = arcPath(dataset);\r\n\r\n            endAnglet = sonStartR + skipArc;\r\n            var midDataset = { startAngle: sonStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n\r\n            let jiantouPath = d3.path();\r\n            jiantouPath.arc(x, y - r / 2, r + 32, sonStartR - Math.PI / 2, endAnglet - Math.PI / 2);\r\n\r\n            sonStartR += skipArc;\r\n            var pathMidArc = arcMidPath(midDataset);\r\n            let timeSonColor = compute_color(color_linear(sonData['attribute']['importance']));\r\n            _this.drawArc(svg, x, y - r / 2, pathArc, timeSonColor, timeSonColor, 'son f' + data['id'] + \" s\" + sonList[s], '0');\r\n            if (s != sonList.length - 1) {\r\n\r\n              // console.log\r\n              _this.drawTimeLine(svg, jiantouPath, \"rgb(200,200,200)\", 3, '9,5', 'midArc ', 'midArc ');\r\n              // _this.drawTimeLine(_this.arcG, path, \"white\", 2,'0', 'sonLine ', 'sonLine ');\r\n              // _this.drawArc(_this.arcG, x, y - r / 2, pathMidArc, \"rgb(200,200,200)\", \"white\", 'son f' + data['id'], \"9,5\", 3);\r\n            }\r\n            \r\n          if((copy!=0)){\r\n            jg3=1;\r\n              ang3 = (dataset.endAngle+dataset.startAngle)/2+Math.PI/2\r\n            }\r\n          }\r\n        };\r\n        \r\n        if((copy!=0)){\r\n              // jg2=1\r\n              path1.moveTo(10, 155)\r\n              path1.lineTo(120,155)\r\n              // let ang = da.startAngle+0.001+Math.PI/2\r\n              _this.drawTxt(svg, 60, 120, 80, [\"Concept\",\"Time\",\"Distribution\"], \"grey\", 15, `texts_1`);\r\n              path1.lineTo(lineData[0][0],lineData[0][1])\r\n              // path2.lineTo((x-(r + inter + h)*Math.cos(ang)),(y-r/2-(r + inter + h)*Math.sin(ang)))\r\n              _this.drawTimeLine(svg, path1, \"rgb(200,200,200)\", 2, '9,5', 'mm ', 'mm ');\r\n              if(jg2==1){\r\n              path2.moveTo(550, 35)\r\n              path2.lineTo(320,35)\r\n              _this.drawTxt(svg, 360, 20, 80, [\"Course Style\"], \"grey\", 15, `texts_1`);\r\n              path2.lineTo((x-(r +25)*Math.cos(ang2)),(y-r/2-(r +25)*Math.sin(ang2)))\r\n              _this.drawTimeLine(svg, path2, \"rgb(200,200,200)\", 2, '9,5', 'mm ', 'mm ');}\r\n            }\r\n              if(jg3==1){\r\n              path3.moveTo(550, 235)\r\n              path3.lineTo(320,235)\r\n              let ang3 = Math.PI*(1/2+1-0.05)\r\n              _this.drawTxt(svg, 360, 200, 80, [\"Subconcept\",\"Distribution\"], \"grey\", 15, `texts_1`);\r\n              path3.lineTo((x-(r +32)*Math.cos(ang3)),(y-r/2-(r +32)*Math.sin(ang3)))\r\n              _this.drawTimeLine(svg, path3, \"rgb(200,200,200)\", 2, '9,5', 'mm ', 'mm ');\r\n            }\r\n      }\r\n      let txts = data['name'].split(\" \")\r\n      let tx = x - r - 30;\r\n      let ty = y + r + 60;\r\n      let tw = r * 2;\r\n      tx = x;\r\n      if (data['son'].length == 0) {\r\n        tx = x//-r-10;\r\n        ty = y + r * 2;\r\n      }\r\n      // if (data['id'] == \"3\") {\r\n      //   tx = x - 10;\r\n      //   ty = y + r * 2;\r\n      // }\r\n      // if (data['id'] == \"4\") {\r\n      //   tx = x + 10;\r\n      //   ty = y + r * 2;\r\n      // }\r\n      // if(data['type']=='1'){\r\n      //   tx = x-r/2;\r\n      //   ty = y+r*2;\r\n      // }\r\n\r\n      _this.drawTxt(svg, tx, ty, tw, txts, \"grey\", 16, `text_${data['id']}`);\r\n    },\r\n    drawArc(svg, x, y, arcPath, stroke, fill, className, stroke_dasharray = \"0\", width = 3, opacity = 1) {\r\n      let arc = svg.append(\"path\")\r\n        .attr(\"d\", arcPath)\r\n        .attr(\"class\", className)\r\n        .attr(\"transform\", \"translate(\" + x + \",\" + y + \")\")\r\n        .attr(\"stroke\", stroke)\r\n        .attr('stroke-width', width)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n        .attr(\"fill\", fill)\r\n        .attr(\"opacity\", opacity);\r\n      return arc;\r\n    },\r\n    drawCircle(svg, x, y, r, fill, data, opacity, className, idName) {\r\n      const _this = this;\r\n      const oData = _this.data\r\n      svg.append(\"circle\")\r\n        .attr(\"id\", idName)\r\n        .attr(\"class\", className)\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"cx\", x)\r\n        .attr(\"cy\", y)\r\n        .attr(\"r\", r)\r\n        .attr(\"fill\", fill)\r\n        .on(\"mouseover\", function (d) {\r\n          d3.select(this).attr(\"r\", r * 1.1)\r\n          let classN = d3.select(this).attr(\"class\");\r\n          let idN = d3.select(this).attr(\"id\").split(\"_\")[1]\r\n          _this.overEntityId = idN\r\n          let showRel = _this.showEntityRelIdList\r\n          if (!showRel.includes(parseInt(idN))) {\r\n            showRel.push(parseInt(idN))\r\n            _this.showEntityRelIdOverState = 0;\r\n          }\r\n          else {\r\n            _this.showEntityRelIdOverState = 1;\r\n          }\r\n          _this.showEntityRelIdList = showRel;\r\n          if (classN == 'linePoint') {\r\n            d3.select(this).attr(\"opacity\", 1).attr(\"r\", 5)\r\n          }\r\n          else {\r\n            d3.selectAll(\".f\" + data['id'])\r\n              .attr(\"transform\", function (d) {\r\n                let transformd = d3.select(this).attr(\"transform\")\r\n                return transformd.split(\" \")[0] + \" scale(1.1)\"\r\n              })\r\n\r\n            d3.selectAll(\".basicRel\")\r\n              .attr(\"class\", function (d) {\r\n                let classN = d3.select(this).attr(\"class\");\r\n                let classNList = classN.split(\" \");\r\n                let jg = 0;\r\n                for (let i = 0; i < classNList.length - 1; i++) {\r\n                  if ('source' + data['id'] == classNList[i]) { jg = 1; }\r\n                  if ('target' + data['id'] == classNList[i]) { jg = 1; }\r\n                }\r\n                if (jg == 1) {\r\n                  // classN += \" activeS\";\r\n                }\r\n                return classN;\r\n              })\r\n          }\r\n        })\r\n        .on(\"mouseleave\", function (d) {\r\n          d3.select(this).attr(\"r\", r)\r\n\r\n          _this.overEntityId = \"\"//_this.curEntId;\r\n          let classN = d3.select(this).attr(\"class\");\r\n\r\n          let idN = d3.select(this).attr(\"id\").split(\"_\")[1]\r\n          let showRel = _this.showEntityRelIdList\r\n          if (_this.showEntityRelIdOverState == 1) {\r\n            showRel.push(parseInt(idN))\r\n          }\r\n          else {\r\n            showRel.splice(showRel.indexOf(parseInt(idN)), 1)\r\n          }\r\n          _this.showEntityRelIdList = showRel;\r\n\r\n          if (classN == 'linePoint') {\r\n            d3.select(this).attr(\"opacity\", 0).attr(\"r\", 5)\r\n          }\r\n          else {\r\n            d3.selectAll(\".f\" + data['id'])\r\n              .attr(\"transform\", function (d) {\r\n                let transformd = d3.select(this).attr(\"transform\")\r\n                return transformd.split(\" \")[0] + \" scale(1)\"\r\n              })\r\n            d3.select(\"#graphPanel\").selectAll(\"path\")\r\n              .attr(\"class\", function (d) {\r\n                let thisSelect = d3.select(this)\r\n                let classN = thisSelect.attr(\"class\");\r\n                let classNList = classN.split(\" \")\r\n                if (classNList[classNList.length - 1] == \"activeS\") {\r\n                  classN = \"\";\r\n                  for (let i = 0; i < classNList.length - 1; i++) {\r\n                    classN += \" \" + classNList[i];\r\n                  }\r\n                }\r\n                return classN\r\n              })\r\n          }\r\n        })\r\n        .on(\"click\", function (d) {\r\n\r\n          let idN = d3.select(this).attr(\"id\").split(\"_\")[1]\r\n          let showRel = _this.showEntityRelIdList;\r\n          //  - _this.showEntityRelIdOverState;\r\n          if (!showRel.includes(parseInt(idN))) {\r\n            showRel = [(parseInt(idN))]\r\n            _this.showEntityRelIdOverState = 1;\r\n          }\r\n          else if (showRel.includes(parseInt(idN))) {\r\n            // showRel.filter(item=>{return item==parseInt(idN)})\r\n            _this.showEntityRelIdOverState = 0;\r\n            showRel.splice(showRel.indexOf(parseInt(idN)), 1)\r\n          }\r\n          _this.showEntityRelIdList = showRel;\r\n\r\n          d3.select(this).attr(\"r\", r);\r\n          d3.selectAll(\".f\" + data['id'])\r\n            .attr(\"transform\", function (d) {\r\n              let transformd = d3.select(this).attr(\"transform\")\r\n              return transformd.split(\" \")[0] + \" scale(1)\"\r\n            })\r\n          let thisId = this.id.split(\"_\")[1];\r\n          _this.curEntId = thisId;\r\n          let thisData = _this.drawEntityLocation.find(function (a) { return a['id'] == thisId })\r\n          let thisTime = thisData['time'];\r\n          _this.click_Ent(thisTime);\r\n          let psvg = d3.select(\"#entG\");\r\n          let dw = psvg.attr(\"width\");\r\n          let dh = psvg.attr(\"height\");\r\n          psvg.remove();\r\n          let svg = d3.select('#editEnt').append(\"g\").attr(\"id\", \"entG\").attr(\"width\", dw).attr(\"height\", dh);\r\n          _this.drawEntity(svg, dw/2, 100, r, thisData,1)\r\n          // if (thisData['type'] == 0 ) {\r\n            _this.drawEntityTimeAxis(svg,thisData,[dw/2,100,r]);\r\n        // }\r\n          // console.log(thisTime,thisId,thisData)\r\n        })\r\n        .on(\"contextmenu\", function (d, i) {\r\n          d.preventDefault();\r\n\r\n          if (_this.btnEdi) {\r\n            _this.editDivShow = true;\r\n            _this.$refs.editDiv.style.top = `${d.clientY}px`;\r\n            _this.$refs.editDiv.style.left = `${d.clientX}px`;\r\n          }\r\n          else {\r\n            let thisId = this.id.split(\"_\")[1];\r\n            let thisShowEntityData = _this.showEntityList.find(function (d) { return d['id'] == thisId });\r\n            let thisSons = thisShowEntityData['son'];\r\n            if (thisSons.length != 0) {\r\n              let sons = tools.deepClone(thisSons);\r\n              let showJage = false;\r\n              let i = 0\r\n              while ((sons.length > 0)) {\r\n                let s = sons[0];\r\n                sons.splice(0, 1);\r\n                let curson = _this.showEntityList.find(function (d) { return d['id'] == s + '' })\r\n                if (i == 0) {\r\n                  i++;\r\n                  showJage = !curson['show']\r\n                }\r\n                // ['show'] = !_this.showEntityList.find(function (d) { return d['id'] == thisSons[s] })['show']\r\n                curson['show'] = showJage;\r\n                let curgson = curson['son'];\r\n                if (!showJage) {\r\n                  for (let gs = 0; gs < curgson.length; gs++) {\r\n                    sons.push(curgson[gs]);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          _this.updataGraph()\r\n        });\r\n      // .on(\"\")\r\n    },\r\n    drawRect(svg, x, y, w, h, rx, ry, fill, opacity, stroke, id = 'rect', strokeW = 1.5, classN = 'rect') {\r\n      d3.select(`#${id}`).remove()\r\n      let rect = svg.append(\"rect\")\r\n        .attr(\"id\", id)\r\n        .attr(\"class\", classN)\r\n        .attr(\"x\", x)\r\n        .attr(\"y\", y)\r\n        .attr(\"rx\", rx)\r\n        .attr(\"ry\", ry)\r\n        .attr(\"height\", h)\r\n        .attr(\"width\", w) //刚才设置的块的宽度\r\n        .attr(\"fill\", fill)\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"stroke\", stroke)\r\n        .attr(\"stroke-width\", `${strokeW}px`);\r\n      return rect;\r\n    },\r\n    drawTxt(svg, x, y, width, txts, fill, fontsize = 12, idN, classN = \"text\") {\r\n      let tx = x;\r\n      let ty = y;\r\n      let preWidth = 0;\r\n      let preIdN = 0;\r\n      let pretext = ''\r\n      for (let t = 0; t < txts.length; t++) {\r\n        pretext += \" \" + txts[t];\r\n        let txt = svg.append(\"text\")\r\n          .attr(\"y\", ty)\r\n          .attr(\"x\", tx)\r\n          .attr(\"id\", `${idN}_${t}`)\r\n          .attr(\"class\", `${classN}`)\r\n          .attr(\"fill\", fill)\r\n          .attr(\"font-size\", fontsize)\r\n          .style(\"text-anchor\", \"middle\")\r\n          .text(pretext)\r\n        let textWidth = document.getElementById(`${idN}_${t}`).getBBox().width;\r\n        if ((textWidth > width) || (t == txts.length - 1)) {\r\n          pretext = '';\r\n          tx = x;\r\n          ty += 25;\r\n        }\r\n        else {\r\n          txt.remove()\r\n        }\r\n        preWidth += textWidth;\r\n      }\r\n    },\r\n    drawTimeLine(svg, path, stroke, width, stroke_dasharray = \"0\", idName, className) {\r\n      svg.append('path')\r\n        .attr('d', path.toString())\r\n        .attr('stroke', stroke)\r\n        .attr('class', className)\r\n        .attr('id', idName)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr('stroke-width', width)\r\n        .attr('fill', 'none')\r\n        .on('mouseover', function (d) {\r\n          let thisSelect = d3.select(this)\r\n          let classN = thisSelect.attr(\"class\");\r\n          let idN = thisSelect.attr(\"id\");\r\n          if (classN.split(\" \")[0] == \"basicRel\") {\r\n            // d3.select(this).attr(\"class\", classN + \" activeS\");\r\n          }\r\n        })\r\n        .on('mouseleave', function (d) {\r\n          let thisSelect = d3.select(this)\r\n          let classN = thisSelect.attr(\"class\");\r\n          let classNList = classN.split(\" \")\r\n          if (classNList[classNList.length - 1] == \"activeS\") {\r\n            classN = \"\";\r\n            for (let i = 0; i < classNList.length - 1; i++) {\r\n              classN += classNList[i] + \" \";\r\n            }\r\n            d3.select(this).attr(\"class\", classN);\r\n          }\r\n        })\r\n    },\r\n    transformGraphSvg(flag) {\r\n      const _this = this;\r\n      let groups = _this.groupsSvg;\r\n\r\n      let scalePre = _this.graphSvgScale;\r\n\r\n      let margin = _this.margin;\r\n      if (flag == 'left') {\r\n        _this.graphGTransformX += 10;\r\n      }\r\n      if (flag == 'right') {\r\n        _this.graphGTransformX -= 10;\r\n      }\r\n      // groups.attr('transform', 'translate(' + (_this.graphGTransformX) + ',' + (margin.top) + ') scale(' + (scalePre) + ')')\r\n    },\r\n    updataAssistGraphPanel() {\r\n      const _this = this;\r\n      var content = this.groupsSvg.html();\r\n      let height = document.getElementById(\"assistGraphPanel\").clientHeight;\r\n      let width = document.getElementById(\"assistGraphPanel\").clientWidth;\r\n      d3.select('#assistGraphPanel').select('svg').remove();\r\n      let transX = _this.assistGTransformX;\r\n      let transY = _this.assistGTransformY;\r\n      var div = d3.select('#assistGraphPanel')\r\n        .append('svg')\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n        .append(\"g\")\r\n        .attr(\"transform\", `translate(${transX},${transY})`)\r\n        .html(content);\r\n    },\r\n    moveGraphLeft(e) {\r\n      const _this = this;\r\n      _this.moveFlag == true;\r\n      clearInterval(this.moveTimer)// 清除定时器\r\n      this.moveTimer = setInterval(() => { _this.transformGraphSvg(\"left\") }, 10)//_this.transformGraphSvg('left'), 100);\r\n    },\r\n    moveGraphRight(e) {\r\n      const _this = this;\r\n      // console.log(\"⚡🐲🫧❄️👁️\",e)\r\n      clearInterval(this.moveTimer)// 清除定时器\r\n      _this.moveFlag == true;\r\n      this.moveTimer = setInterval(() => { _this.transformGraphSvg(\"right\") }, 10)//_this.transformGraphSvg('left'), 100);\r\n    },\r\n    leaveGraphMove() {\r\n      // this.moveFlag == false;\r\n      clearInterval(this.moveTimer)// 清除定时器\r\n      // this.graphGTransformX = 0;\r\n    },\r\n    updataGraph() {\r\n      var _this = this;\r\n      let margin = _this.margin\r\n      let width = _this.$refs.graphDiv.offsetWidth - margin.left - margin.right;\r\n      let height = document.getElementById(\"graphPanel\").clientHeight - margin.top - margin.bottom;\r\n      let heightTimeAxis = document.getElementById(\"graphTimeAxisPanel\").clientHeight - margin.top - margin.bottom;\r\n      _this.width = width;\r\n      _this.height = height;\r\n      d3.select(\"#graphPanel\").select(\"svg\").remove()\r\n      var svg = d3.select(\"#graphPanel\").append(\"svg\")\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height);\r\n      _this.rootSvg = svg;\r\n      d3.select(\"#graphTimeAxisPanel\").select(\"svg\").remove()\r\n      var TimeAxisSvg = d3.select(\"#graphTimeAxisPanel\").append(\"svg\")\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height);\r\n      _this.TimeAxisSvg = TimeAxisSvg;\r\n      let data = _this.data;\r\n\r\n      let maxDImportance = Math.max.apply(Math, data.map(function (d) { return d['attribute']['importance']; }))\r\n      let minDImportance = Math.min.apply(Math, data.map(function (d) { return d['attribute']['importance']; }))\r\n      let maxDRelevance = Math.max.apply(Math, data.map(function (d) { return d['attribute']['relevance']; }))\r\n      let minDRelevance = Math.min.apply(Math, data.map(function (d) { return d['attribute']['relevance']; }))\r\n      let maxDDuration = Math.max.apply(Math, data.map(function (d) { return tools.time2seconds(d['time'][1]) - tools.time2seconds(d['time'][0]); }))\r\n      let maxTotalDuration = Math.max.apply(Math, data.map(function (d) { return d['totalDuration']; }))\r\n      _this.drawEntityLocation = [];\r\n      _this.minDImportance = minDImportance;\r\n      _this.maxDImportance = maxDImportance;\r\n      _this.minDRelevance = minDRelevance;\r\n      _this.maxDRelevance = maxDRelevance;\r\n      _this.maxDDuration = maxDDuration;\r\n      _this.maxTotalDuration = maxTotalDuration;\r\n\r\n      let currentMaxColor = _this.importanceMaxColor;\r\n      let currentMinColor = _this.importanceMinColor;\r\n      _this.importanceColor_linear = d3.scaleLinear().domain([minDImportance, maxDImportance]).range([0, 1]);\r\n      _this.$bus.$emit(\"importanceLinear\", [minDImportance, maxDImportance]);\r\n      _this.importanceCompute_color = d3.interpolate(currentMinColor, currentMaxColor);\r\n      _this.relevanceScale_linear = d3.scaleLinear([minDRelevance, maxDRelevance], [20, 50])\r\n      _this.totalDurationScale_linear = d3.scaleLinear().domain([0, maxTotalDuration]).range([20, 60]);\r\n\r\n      _this.drawMain(svg);\r\n      // });\r\n    },\r\n    zoomInLayoutClk() {\r\n      const _this = this;\r\n      _this.layoutShow += 1;\r\n      if (_this.layoutShow > 3) {\r\n        _this.layoutShow = 3;\r\n      }\r\n      // _this.updataGraph();\r\n    },\r\n    zoomOutLayoutClk() {\r\n      const _this = this;\r\n      _this.layoutShow -= 1;\r\n      if (_this.layoutShow < 0) {\r\n        _this.layoutShow = 0;\r\n      }\r\n      // _this.updataGraph();\r\n\r\n    },\r\n    click_Ent(time) {\r\n      this.$emit(\"timeDur\", time);\r\n    },\r\n  },\r\n  created() {\r\n    var _this = this;\r\n    let margin = _this.margin\r\n    this.$nextTick(() => {\r\n      _this.updataGraph();\r\n      _this.updataAssistGraphPanel();\r\n    });\r\n  },\r\n  mounted() {\r\n    const _this = this;\r\n    let width = _this.$refs.graphDiv.offsetWidth;\r\n    let height = _this.height;\r\n    let showEntityList = tools.deepClone(_this.data);\r\n    for (let e in showEntityList) {\r\n      showEntityList[e]['show'] = true;\r\n    }\r\n    _this.showEntityList = showEntityList;\r\n    // let width = _this.width;\r\n    this.$bus.$on('graphData', (val) => {\r\n      _this.data = val;\r\n      let showEntityList = tools.deepClone(_this.data);\r\n      for (let e in showEntityList) {\r\n        showEntityList[e]['show'] = true;\r\n      }\r\n      _this.showEntityList = showEntityList;\r\n      _this.updataGraph();\r\n    });\r\n    this.$bus.$on('topicRectup', (val) => {\r\n      _this.editConfirm();\r\n    });\r\n    this.$bus.$on('switchL', (val) => {\r\n      _this.switchL = val;\r\n    });\r\n\r\n    // this.$refs.moveGraphLeft.addEventListener(\"mouseover\", _this.moveGraphLeft); // 监听点击事件\r\n    // this.$refs.moveGraphRight.addEventListener(\"mousemove\", _this.moveGraphRight); // 监听点击事件\r\n    // this.$refs.moveGraphLeft.addEventListener(\"mouseleave\", _this.leaveGraphMove); // 监听点击事件\r\n    // this.$refs.moveGraphRight.addEventListener(\"mouseleave\", _this.leaveGraphMove); // 监听点击事件\r\n\r\n  },\r\n  beforeDestroy() {\r\n    clearInterval(this.moveTimer);\r\n  },\r\n} \r\n</script>\r\n\r\n<style>@import './index.css';</style>\r\n"]}]}