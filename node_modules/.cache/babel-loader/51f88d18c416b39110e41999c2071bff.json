{"remainingRequest":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\babel-loader\\lib\\index.js!D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Cailibuhong\\video2Graph\\video2Graph\\src\\components\\Graph\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\src\\components\\Graph\\index.vue","mtime":1689658765838},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\babel.config.js","mtime":1647570572000},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1688115046166},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\babel-loader\\lib\\index.js","mtime":1688115046651},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1688115046166},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\vue-loader\\lib\\index.js","mtime":1688115046800}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<!-- eslint-disable no-unused-vars -->\r\n<!-- eslint-disable no-unused-vars -->\r\n\r\n<template>\r\n  <div class=\"graph\" ref=\"graphDiv\">\r\n    <!-- <div class=\"panelHead\">ConceptMap</div> -->\r\n    <div id=\"graphTimeAxisPanel\" class=\"\">\r\n    </div>\r\n    <div id=\"graphPanel\" class=\"panelBody\">\r\n    </div>\r\n    <!-- <div id=\"moveLeft\" ref=\"moveGraphLeft\"></div>\r\n                    <div id=\"moveRight\" ref=\"moveGraphRight\"></div> -->\r\n    <div id=\"assistGraphPanel\" class=\"panel\">\r\n      <div class=\"panelHead\"></div>\r\n    </div>\r\n\r\n    <div v-show=\"editDivShow\" ref=\"editDiv\" id=\"editDiv\" class=\"panel\">\r\n      <div id=\"editAdd\" @click=\"addNode\">\r\n        <img class=\"editIcons\" :src=\"editAddUrl\" @click=\"addNode\">\r\n        Add\r\n      </div>\r\n      <div id=\"editAddN\" @click=\"addNodeN\">\r\n        <img class=\"editIcons\" :src=\"editAddNUrl\" @click=\"addNodeN\">\r\n        Add in next level\r\n      </div>\r\n      <div id=\"editDel\" @click=\"delNode\">\r\n        <img class=\"editIcons editDelIcons\" :src=\"editDelUrl\" @click=\"delNode\">\r\n        Delete\r\n      </div>\r\n    </div>\r\n\r\n    <div id=\"zoomInDiv\" @click=\"zoomInLayoutClk\">\r\n    </div>\r\n    <div id=\"zoomOutDiv\" @click=\"zoomOutLayoutClk\">\r\n      <img class=\"icons\" :src=\"zoomOutUrl\">\r\n    </div>\r\n    <div id=\"editToolDiv\" @click=\"editToolClk\">\r\n      <img class=\"icons\" :src=\"editToolUrl\">\r\n    </div>\r\n    <div id=\"VideoEditPanel\" ref=\"VideoEditPanel\" class=\"\" v-show=\"VideoEditPanelShow\">\r\n    </div>\r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nimport * as d3 from 'd3'\r\nimport { onMounted, ref } from 'vue';\r\nimport filenames from \"@/utils/fileName\";\r\nimport domtoimage from 'dom-to-image';\r\nimport TestJson from \"@/assets/json/case1_fin.json\";\r\nimport TestRelJson from \"@/assets/json/case1_fin_rel.json\";\r\nimport tools from \"@/utils/tools.js\";\r\n \r\nlet worker = tools.createWorkers();\r\nexport default {\r\n  props: [\"videoTime\"],\r\n  data() {\r\n    return {\r\n      worker:null,\r\n      data: TestJson,\r\n      gData: \"TestJson\",\r\n      relData: TestRelJson,\r\n      assistGTransformX: 10,\r\n      assistGTransformY: 100,\r\n      drawEntityLocation: [],\r\n      VideoEditPanelShow:false,\r\n      showEntityList: [],\r\n      switchL: [],\r\n      overEntityId: '',\r\n      overTargetEntityId: '',\r\n      showEntityRelIdList: [],\r\n      showEntityRelIdOverState: '',\r\n      rootEntityList: [],\r\n      rootSvg: null,\r\n      TimeAxisSvg: null,\r\n      groupsSvg: null,\r\n      arcG: null,\r\n      curEntId: '',\r\n      insertEntId: '',\r\n      editDivShow: false,\r\n      minDImportance: 0,\r\n      maxDImportance: 0,\r\n      minDRelevance: 0,\r\n      maxDRelevance: 0,\r\n      maxDDuration: 0,\r\n      timeAxisX: 0,\r\n      timeAxisW: 200,\r\n      timeAxisDropFlag: 0,\r\n      timeAxisDownX: 0,\r\n      timeAxisDownW: 60,\r\n      maxTotalDuration: 0,\r\n      videoDuration: 672,\r\n      totalDuration: 1000,\r\n      importanceColor_linear: null,\r\n      importanceCompute_color: null,\r\n      relevanceScale_linear: null,\r\n      totalDurationScale_linear: null,\r\n      sumTotalDuration: 0,\r\n      // importanceMinColor: \"rgb(1, 164, 183)\",\r\n      // importanceMaxColor: \"rgb(106, 52, 127)\",\r\n      zoomInUrl: require(\"@/assets/img/zoomIn.png\"),\r\n      zoomOutUrl: require(\"@/assets/img/zoomOut.png\"),\r\n      editToolUrl: require(\"@/assets/img/edit.png\"),\r\n      editAddUrl: require(\"@/assets/img/edit_Add.png\"),\r\n      editAddNUrl: require(\"@/assets/img/edit_AddN.png\"),\r\n      editDelUrl: require(\"@/assets/img/edit_Delete.png\"),\r\n      layoutShow: 2,\r\n      graphGTransformK: 1,\r\n      graphGTransformX: 10,\r\n      graphGTransformY: 100,\r\n      graphGMoveX: 10,\r\n      graphSvgScale: 1,\r\n      moveTimer: null,\r\n      moveFlag: false,\r\n      importanceMinColor: \"rgb(203, 230, 209)\",\r\n      importanceMaxColor: \"rgb(22, 144, 207)\",\r\n      stepX: 150,\r\n      stepY: 100,\r\n      btnRel: false,\r\n      btnSim: false,\r\n      btnAso: false,\r\n      btnEdi: false,\r\n      circleInterval: 55,\r\n      width: 0,\r\n      height: 0,\r\n      curToolState: 'unEdit',\r\n      margin: { top: 80, right: 20, bottom: 0, left: 20 },\r\n      color: [\r\n        \"rgb(255,60,60)\",\r\n        \"rgb(0, 178, 171)\",\r\n        // \"rgb(255,83,255)\",\r\n        \"rgb(235,135,162)\",\r\n        \"rgb(255,178,101)\",\r\n        \"rgb(63,151,134)\",\r\n        \"rgb(83,255,255)\",\r\n        \"rgb(0,122,244)\",\r\n        \"rgb(168,168,255)\",\r\n        \"rgb(200,200,200)\",\r\n      ],\r\n      mcolor: [\r\n        \"rgb(125, 66, 206)\",\r\n        \"rgb(248, 134, 124)\",\r\n        \"rgb(50, 198, 191)\",\r\n        \"rgb(135, 126, 253)\",\r\n        \"rgb(198, 121, 123)\",\r\n        \"rgb(252, 177, 49)\",\r\n        \"rgb(112, 202, 229)\",\r\n      ],\r\n      // mcolor: [\r\n      //   \"rgb(91, 107, 255)\",\r\n      //   \"rgb(0, 178, 171)\",\r\n      //   // \"rgb(6, 214, 160)\",\r\n      //   \"rgb(255, 120, 90)\",\r\n      //   \"rgb(125, 98, 211)\",\r\n      //   \"rgb(255, 113, 212)\",\r\n      //   \"rgb(112, 214, 255)\",\r\n      //   \"rgb(255, 159, 28)\",\r\n      //   \"rgb(255, 77, 109)\",\r\n      // ],\r\n      mDarkcolor: [\r\n        \"rgb(95, 39, 179)\",\r\n        \"rgb(221, 83, 72)\",\r\n        \"rgb(0, 158, 148)\",\r\n        \"rgb(93, 88, 202)\",\r\n        \"rgb(180, 72, 79)\",\r\n        \"rgb(202, 134, 32)\",\r\n        \"rgb(46, 174, 202)\",\r\n      ],\r\n      mLigntcolor: [\r\n        \"#ff9c9c\",\r\n        \"#cc88b0\",\r\n        \"#ffa8ff\",\r\n        \"#e3b097\",\r\n        \"#f4c3d0\",\r\n        \"#f4f4d0\",\r\n        \"#ffd8b1\",\r\n        \"#9ecac2\",\r\n        \"#a8ccff\",\r\n        \"#97e3ba\",\r\n        \"#6f8be0\",\r\n        \"rgb(0,122,244)\",\r\n        \"#b6a2f7\",\r\n        \"rgb(168,168,255)\",\r\n        \"rgb(200,200,200)\",\r\n      ],\r\n      editVideoJage:false,\r\n      editVideoSP:[],\r\n      editVideoEP:[],\r\n    };\r\n  },\r\n\r\n  watch: {\r\n    type(val) {\r\n    },\r\n    switchL: {\r\n      deep: true,\r\n      handler(val) {\r\n        this.btnRel = val[0];\r\n        this.btnSim = val[1];\r\n        this.btnAso = val[2];\r\n        this.btnEdi = val[3];\r\n        this.updataRel()\r\n      }\r\n    },\r\n    timeAxisX(val) {\r\n      const _this = this;\r\n      _this.updataTimeAxisDur(_this.TimeAxisSvg, _this.timeAxisX, _this.timeAxisW);\r\n    },\r\n    curEntId(val) {\r\n      const _this = this;\r\n      _this.overEntityId = val;\r\n      _this.$bus.$emit(\"selectEnt\", val);\r\n      let entityLocationData = _this.drawEntityLocation;\r\n\r\n      let relData = _this.relData;\r\n      let showJageData = _this.showEntityList;\r\n      let basicRel = relData['basicRel'];\r\n      for (let r = 0; r < basicRel.length; r++) {\r\n        let sorceId = basicRel[r][0];\r\n        let targetId = basicRel[r][1];\r\n        let sorceJage = showJageData.find(function (d) { return d['id'] == sorceId })['show'];\r\n        let targetJage = showJageData.find(function (d) { return d['id'] == targetId })['show'];\r\n        if (sorceJage && targetJage) {\r\n          let trnId = '-1';\r\n          if (sorceId == parseInt(val)) {\r\n            trnId = targetId;\r\n          }\r\n          else if (targetId == parseInt(val)) {\r\n            trnId = sorceId;\r\n          }\r\n          if (trnId != '-1') {\r\n            let curEnt = entityLocationData.find(function (d) { return parseInt(d['id']) == trnId });\r\n            _this.assistGTransformX = parseInt(-curEnt['x']) + parseFloat(curEnt['r']) + 150;\r\n            _this.assistGTransformY = parseInt(-curEnt['y']) + parseFloat(curEnt['r']) + 300;\r\n            _this.updataAssistGraphPanel();\r\n          }\r\n        }\r\n\r\n      };\r\n      let similarityRel = relData['similarityRel'];\r\n      for (let r = 0; r < similarityRel.length; r++) {\r\n        let sorceId = similarityRel[r][0];\r\n        let targetId = similarityRel[r][1];\r\n        let sorceJage = showJageData.find(function (d) { return d['id'] == sorceId })['show'];\r\n        let targetJage = showJageData.find(function (d) { return d['id'] == targetId })['show'];\r\n        if (sorceJage && targetJage) {\r\n          let trnId = '-1';\r\n          if (sorceId == parseInt(val)) {\r\n            trnId = targetId;\r\n          }\r\n          else if (targetId == parseInt(val)) {\r\n            trnId = sorceId;\r\n          }\r\n          if (trnId != '-1') {\r\n            let curEnt = entityLocationData.find(function (d) { return parseInt(d['id']) == trnId });\r\n            _this.assistGTransformX = parseInt(-curEnt['x']) + parseFloat(curEnt['r']) + 150;\r\n            _this.assistGTransformY = parseInt(-curEnt['y']) + parseFloat(curEnt['r']) + 300;\r\n            _this.updataAssistGraphPanel();\r\n          }\r\n        }\r\n\r\n      };\r\n\r\n\r\n    },\r\n    overEntityId(val) {\r\n      const _this = this;\r\n\r\n      _this.$bus.$emit(\"overEntityId\", val);\r\n      let relList = [];\r\n      let relRootList = [];\r\n      let relData = _this.relData;\r\n      let oData = _this.drawEntityLocation;\r\n      let basicRel = relData['basicRel'];\r\n      d3.selectAll('.timeText').attr(\"opacity\", 0)\r\n      d3.selectAll('.timeAxisEnt').attr(\"stroke-width\", 0).attr(\"opacity\", 0.4).attr(\"stroke\", function () {\r\n        let cid = d3.select(this).attr(\"id\").split(\"_\")[1];\r\n        let nd = oData.find(function (d) { return d['id'] == cid });\r\n        return nd['colorD']\r\n      });\r\n      for (let re = 0; re < basicRel.length; re++) {\r\n\r\n        let sorceId = basicRel[re][0];\r\n        let targetId = basicRel[re][1];\r\n        let cNode = '';\r\n        if (sorceId == val) {\r\n          cNode = oData.find(function (d) { return d['id'] == targetId });\r\n          relList.push(targetId);\r\n          relRootList.push(cNode['rootIndex']);\r\n        }\r\n\r\n        if (targetId == val) {\r\n          cNode = oData.find(function (d) { return d['id'] == sorceId });\r\n          relList.push(sorceId);\r\n          relRootList.push(cNode['rootIndex']);\r\n        }\r\n      };\r\n      relList.forEach((self, indx, arr) => {\r\n\r\n        d3.select(`#timeAxisEnt_${self}`).attr(\"stroke\", 'white').attr(\"stroke-width\", 2).attr(\"opacity\", 1);\r\n        d3.select(`#timeText_${self}_0`).attr(\"opacity\", 1);\r\n      })\r\n      d3.select(`#timeAxisEnt_${val}`).attr(\"stroke-width\", 2).attr(\"opacity\", 1);\r\n      d3.select(`#timeText_${val}_0`).attr(\"opacity\", 1);\r\n    },\r\n    showEntityRelIdList(val) {\r\n      this.updataRel();\r\n    },\r\n    groupsSvg: {\r\n      deep: true,\r\n      handler() {\r\n        this.updataAssistGraphPanel();\r\n      }\r\n    },\r\n    gData(val) {\r\n    },\r\n    layoutShow(val) {\r\n      const _this = this;\r\n      let showEntityList = tools.deepClone(_this.data);\r\n      for (let e in showEntityList) {\r\n        if (parseInt(showEntityList[e]['layout']) < parseInt(val))\r\n          showEntityList[e]['show'] = true;\r\n        else {\r\n          showEntityList[e]['show'] = false;\r\n        }\r\n      }\r\n      _this.showEntityList = showEntityList;\r\n      _this.updataGraph();\r\n    },\r\n    data(val) {\r\n    },\r\n    videoTime(val) {\r\n      const _this = this;\r\n      let entityLocationData = _this.drawEntityLocation;\r\n      for (let e = 0; e < entityLocationData.length; e++) {\r\n        let curD = entityLocationData[e];\r\n        let timeStart = tools.time2seconds(entityLocationData[e]['time'][0]);\r\n        let timeEnd = tools.time2seconds(entityLocationData[e]['time'][1]);\r\n        if ((val > timeStart) && (val < timeEnd)) {\r\n          let entX = entityLocationData[e]['x'];\r\n          let entY = entityLocationData[e]['y'];\r\n          let entR = entityLocationData[e]['r'];\r\n          let moveLinear = d3.scaleLinear([timeStart, timeEnd], [entX - entR, entX + entR])\r\n          _this.graphGTransformX = -moveLinear((val));\r\n        }\r\n      }\r\n    },\r\n    graphGMoveX(val) {\r\n      const _this = this;\r\n      let data = _this.drawEntityLocation;\r\n      let stjg = 0;\r\n      let enjg = 0;\r\n      let snode = '';\r\n      let enode = '';\r\n      let width = 1590\r\n      data.forEach((self, indx, arr) => {\r\n        let entx = self['x'] * _this.graphGTransformK;\r\n        let transformX = entx + val;\r\n        if ((transformX > 0) && (transformX < width)) {\r\n          stjg++;\r\n        }\r\n        else {\r\n          if ((stjg > 0) && enjg == 0) {\r\n            enode = self;\r\n            enjg = 1\r\n          }\r\n        }\r\n        if (stjg == 1) {\r\n          snode = self\r\n        }\r\n      })\r\n      let ew = enode['timeW'];\r\n      if (snode == '') {\r\n        _this.timeAxisX = 0\r\n      }\r\n      else\r\n        _this.timeAxisX = snode['timeX'];\r\n      _this.timeAxisW = enode['timeX'] - snode['timeX'] + enode['timeW']\r\n      if (ew == undefined) {\r\n        _this.timeAxisW = width - snode['timeX']\r\n      }\r\n    },\r\n    graphGTransformX(val) {\r\n      const _this = this;\r\n      let groups = _this.groupsSvg;\r\n      _this.graphGMoveX = _this.graphGTransformX;\r\n      let graphGTransformX = _this.graphGTransformX;\r\n      let graphGTransformY = _this.graphGTransformY;\r\n      let graphGTransformK = _this.graphGTransformK;\r\n      groups.attr(\"transform\", \"translate(\" + graphGTransformX + ',' + graphGTransformY + \") scale(\" + graphGTransformK + \")\");\r\n    }\r\n  },\r\n  methods: {\r\n    addNode() {\r\n      const _this = this;\r\n      _this.VideoEditPanelShow = true,\r\n      _this.editDivShow = false;\r\n      d3.select(\"#VideoEditPanel\").select(\"svg\").remove()\r\n      var svg = d3.select(\"#VideoEditPanel\").append(\"svg\")\r\n        .attr(\"width\", \"946\")\r\n        .attr(\"height\", \"553\");\r\n      svg.on(\"mousedown\",function(d){\r\n        _this.editVideoSP = [d.layerX,d.layerY];\r\n        _this.editVideoJage = true;\r\n      }).on(\"mousemove\",function(d){\r\n        if(_this.editVideoJage){\r\n        let sP = _this.editVideoSP;\r\n        _this.editVideoEP = [d.layerX,d.layerY];\r\n        let eP =  [d.layerX,d.layerY];\r\n        let eX  = sP[0]>eP[0]?sP[0]:eP[0];\r\n        let eY  = sP[1]>eP[1]?sP[1]:eP[1];\r\n        let sX  = sP[0]<eP[0]?sP[0]:eP[0];\r\n        let sY  = sP[1]<eP[1]?sP[1]:eP[1];\r\n        _this.drawRect(svg,sX , sY, Math.abs(eX-sX), Math.abs(eY - sY), 0,0,\"rgba(0,0,0,0)\",1, \"red\", `videoRect`)}\r\n      }).on(\"mouseup\",function(d){\r\n        _this.editVideoJage = false;\r\n        \r\n        let sP = _this.editVideoSP;\r\n        let eP = _this.editVideoEP;\r\n\r\n        let eX  = sP[0]>eP[0]?sP[0]:eP[0];\r\n        let eY  = sP[1]>eP[1]?sP[1]:eP[1];\r\n        let sX  = sP[0]<eP[0]?sP[0]:eP[0];\r\n        let sY  = sP[1]<eP[1]?sP[1]:eP[1];\r\n        \r\n        var player = document.getElementById(\"playVideo\");   //获取video的Dom节点\r\n        player.setAttribute(\"crossOrigin\", \"anonymous\");  //添加srossOrigin属性，解决跨域问题\r\n        var canvas = document.createElement(\"canvas\");\r\n        \r\n        canvas.width = player.clientWidth;\r\n        canvas.height = player.clientHeight;\r\n        // canvas = canvas.getContext(\"2d\")\r\n        canvas.getContext(\"2d\").drawImage(player , 0, 0, canvas.width, canvas.height);//截\r\n        const data = canvas.getContext(\"2d\").getImageData(sX , sY, Math.abs(eX-sX), Math.abs(eY - sY));\r\n        var canvass = document.createElement(\"canvas\");\r\n        canvass.getContext(\"2d\").putImageData(data, 0,0)\r\n        var dataURL = canvass.toDataURL(\"image/png\");  //将图片转成base64格式\r\n        var img = document.createElement('img');\r\n        _this.recognize0();\r\n        // img.src = dataURL\r\n        // const res = _this.scheduler.addJob('recognize', canvass);\r\n        // const datas = _this.worker.recognize(data);\r\n        // console.log(res)\r\n        document.getElementById(\"VideoEditPanel\").appendChild(img);   //显示在页面中\r\n        // var string = ocrad(data);\r\n        // console.log(string)\r\n        // alert(string);\r\n      })\r\n    },\r\n    // VideoEditPanelShow(val) {\r\n    //   const _this = this;\r\n    //   if (val) {\r\n    //     let width = _this.$refs.VideoEditPanel.offsetWidth;\r\n    //     let height = document.getElementById(\"VideoEditPanel\").clientHeight;\r\n    //     d3.select(\"#VideoEditPanel\").select(\"svg\").remove()\r\n    //     var svg = d3.select(\"#VideoEditPanel\").append(\"svg\")\r\n    //       .attr(\"width\", width)\r\n    //       .attr(\"height\", height);\r\n    //   }\r\n    // },\r\n    addNodeN() {\r\n      const _this = this;\r\n      _this.editDivShow = false;\r\n\r\n    },\r\n    delNode() {\r\n      const _this = this;\r\n      _this.editDivShow = false;\r\n    },\r\n    editToolClk() {\r\n      const _this = this;\r\n      if (_this.curToolState == 'edit') _this.curToolState = 'unEdit';\r\n      else if (_this.curToolState != 'edit') _this.curToolState = 'edit';\r\n      this.$emit(\"toolState\", this.curToolState);\r\n    },\r\n    updataRel() {\r\n      const _this = this;\r\n      let relData = _this.relData;\r\n      let oData = _this.drawEntityLocation;\r\n      let showJageData = _this.showEntityList;\r\n      let showRel = _this.showEntityRelIdList;\r\n      let basicRel = relData['basicRel'];\r\n\r\n      if (_this.btnRel) {\r\n        if (_this.btnSim) {\r\n          d3.selectAll('.similarityRel').attr('opacity', 1);\r\n        }\r\n        else if (!_this.btnSim) {\r\n          d3.selectAll('.similarityRel').attr('opacity', 0);\r\n        }\r\n        if (_this.btnAso) {\r\n          d3.selectAll('.basicRel').attr('opacity', 1);\r\n        }\r\n        else if (!_this.btnAso) {\r\n          d3.selectAll('.basicRel').attr('opacity', 0);\r\n        }\r\n        // d3.selectAll('.similarityRel').attr('opacity', 1);\r\n        // d3.selectAll('.basicRel').attr('opacity', 1);\r\n      }\r\n      else if (!_this.btnRel) {\r\n        d3.selectAll('.similarityRel').attr('opacity', 0);\r\n        d3.selectAll('.basicRel').attr('opacity', 0);\r\n      }\r\n      if (!_this.btnRel || !_this.btnAso) {\r\n        for (let r = 0; r < basicRel.length; r++) {\r\n          let sorceId = basicRel[r][0];\r\n          let targetId = basicRel[r][1];\r\n          let idN = \"basicRel\" + sorceId + \"_\" + targetId;\r\n          if (_this.overTargetEntityId == '') {\r\n            if ((showRel.includes(sorceId)) || (showRel.includes(targetId))) {\r\n              d3.select(`#${idN}`).attr('opacity', 1).attr('stroke', 'darkslateblue')\r\n            }\r\n            else {\r\n              d3.select(`#${idN}`).attr('opacity', 0)\r\n            }\r\n          }\r\n          else {\r\n\r\n            if ((showRel.includes(sorceId + '')) || (showRel.includes(targetId + ''))) {\r\n              d3.select(`#${idN}`).attr('opacity', 1).attr('stroke', 'grey')\r\n            }\r\n            else {\r\n              d3.select(`#${idN}`).attr('opacity', 0)\r\n            }\r\n            if ((showRel.includes(sorceId + '')) && (targetId == _this.overTargetEntityId)) {\r\n              d3.select(`#${idN}`).attr('opacity', 1).attr('stroke', 'darkslateblue')\r\n            }\r\n            else if ((showRel.includes(targetId + '')) && (sorceId == _this.overTargetEntityId)) {\r\n              d3.select(`#${idN}`).attr('opacity', 1).attr('stroke', 'darkslateblue')\r\n            }\r\n          }\r\n        };\r\n      }\r\n    },\r\n    drawRelationshipLine(svg) {\r\n      const _this = this;\r\n      let relData = _this.relData;\r\n      let oData = _this.drawEntityLocation;\r\n      let showJageData = _this.showEntityList;\r\n      let margin = _this.margin;\r\n      let height = svg.attr('height');\r\n      let basicRel = relData['basicRel'];\r\n      for (let r = 0; r < basicRel.length; r++) {\r\n\r\n        let sorceId = basicRel[r][0];\r\n        let targetId = basicRel[r][1];\r\n        let idN = \"basicRel\" + sorceId + \"_\" + targetId;\r\n        let classN = \"basicRel source\" + sorceId + \" target\" + targetId;\r\n        let sorceNode = oData.find(function (d) { return d['id'] == sorceId });\r\n        let targetNode = oData.find(function (d) { return d['id'] == targetId });\r\n        let sorceJage = showJageData.find(function (d) { return d['id'] == sorceId })['show'];\r\n        let targetJage = showJageData.find(function (d) { return d['id'] == targetId })['show'];\r\n        if (sorceJage && targetJage) {\r\n          if (sorceNode['x'] > targetNode['x']) {\r\n            let tp = sorceNode;\r\n            sorceNode = targetNode;\r\n            targetNode = tp;\r\n          }\r\n          const path = d3.path();\r\n\r\n          let startX = sorceNode['x'];\r\n          let endX = targetNode['x'];\r\n          let midX = (startX + endX) / 2;\r\n          let flag = ((sorceNode['sonFlag']) || (targetNode['sonFlag']));\r\n          // if((targetNode['id'] == \"4\")||((sorceNode['id']==\"1\")&&(targetNode['id']==\"6\"))||((sorceNode['id']==\"2\")&&(targetNode['id']==\"7\"))||((sorceNode['id']==\"3\")&&(targetNode['id']==\"8\"))){\r\n          //   flag = true;\r\n          // }\r\n          if (targetNode['id'] == \"4\") {\r\n            flag = true;\r\n          }\r\n          // if(targetNode['id'] == \"30\"){\r\n          //   flag = true;\r\n          // }\r\n          let rsourceint = (sorceNode['sonFlag']) ? (20) : (2);\r\n          let rtargetint = (targetNode['sonFlag']) ? (20) : (2);\r\n          let startY = (flag) ? (sorceNode['y'] - sorceNode['r'] - rsourceint) : (sorceNode['y'] + sorceNode['r'] + rsourceint);\r\n          let endY = (flag) ? (targetNode['y'] - targetNode['r'] - rtargetint) : (targetNode['y'] + targetNode['r'] + rtargetint);\r\n\r\n          let cnx1 = startX - 50;\r\n          let cnx2 = endX + 50;\r\n          let midY = (startY + endY) / 2;\r\n          // if(((sorceNode['id']==\"1\")&&(targetNode['id']==\"6\"))||((sorceNode['id']==\"2\")&&(targetNode['id']==\"7\"))||((sorceNode['id']==\"3\")&&(targetNode['id']==\"8\"))){\r\n          //   midY-=140\r\n          // }\r\n          let h = (((endX - startX) / 5) > (parseInt(height) + 100)) ? (parseInt(height) + 100) : ((endX - startX) / 5);\r\n          let cny = (flag) ? (midY - h) : (midY + h);\r\n\r\n          let cny1 = cny;\r\n          let cny2 = cny;\r\n\r\n          if (((sorceNode['layout'] == 2) && (cny < 0)) || ((sorceNode['layout'] == 0) && (cny > 0))) {\r\n            cnx1 -= 250;\r\n            cny1 = cny * 1.3;\r\n          }\r\n          if (((targetNode['layout'] == 2) && (cny < 0)) || ((targetNode['layout'] == 0) && (cny > 0))) {\r\n            cnx2 += 250;\r\n            cny2 = cny * 1.3;\r\n          }\r\n          // let midP = [(startP[0]+endP[0])/2,(startP[1])>(endP[1])?(startP[1]-100):(endP[1]-100)];\r\n          path.moveTo(startX, startY);\r\n          path.bezierCurveTo(midX, cny, midX, cny, endX, endY);\r\n          _this.drawTimeLine(svg, path, \"rgb(200,200,200)\", 5, \"9,9\", idN, classN);\r\n        }\r\n\r\n      };\r\n      let similarityRel = relData['similarityRel'];\r\n      // let basicRel = relData['basicRel'];\r\n      for (let r = 0; r < similarityRel.length; r++) {\r\n\r\n        let sorceId = similarityRel[r][0];\r\n        let targetId = similarityRel[r][1];\r\n\r\n        let idN = \"similarityRel\" + sorceId + \"_\" + targetId;\r\n\r\n        let classN = \"similarityRel source\" + sorceId + \" target\" + targetId;\r\n        let sorceNode = oData.find(function (d) { return d['id'] == sorceId });\r\n        let targetNode = oData.find(function (d) { return d['id'] == targetId });\r\n        let sorceJage = showJageData.find(function (d) { return d['id'] == sorceId })['show'];\r\n        let targetJage = showJageData.find(function (d) { return d['id'] == targetId })['show'];\r\n        if (sorceJage && targetJage) {\r\n\r\n          if (sorceNode['x'] > targetNode['x']) {\r\n            let tp = sorceNode;\r\n            sorceNode = targetNode;\r\n            targetNode = tp;\r\n          }\r\n          const path = d3.path();\r\n\r\n          let startX = sorceNode['x'] + sorceNode['r'] / 2;\r\n          let endX = targetNode['x'] - targetNode['r'] / 2;\r\n          let midX = (startX + endX) / 2;\r\n          let flag = ((sorceNode['sonFlag']) || (targetNode['sonFlag']));\r\n          let rsourceint = (sorceNode['sonFlag']) ? (20) : (2);\r\n          let rtargetint = (targetNode['sonFlag']) ? (20) : (2);\r\n          let startY = (flag) ? (sorceNode['y'] - sorceNode['r'] - rsourceint) : (sorceNode['y'] + sorceNode['r'] + rsourceint);\r\n          let endY = (flag) ? (targetNode['y'] - targetNode['r'] - rtargetint) : (targetNode['y'] + targetNode['r'] + rtargetint);\r\n\r\n          let midY = (startY + endY) / 2;\r\n\r\n          // let h1Scale_linear = d3.scaleLinear([0, _this.width], [(sorceNode['y']>targetNode['y'])?(sorceNode['y']*2):(targetNode['y']*2),parseInt(height)])\r\n          let h = (((endX - startX) / 14) > (parseInt(height) - 10)) ? (parseInt(height) - 10) : ((endX - startX) / 14);\r\n          let hScale_linear = d3.scaleLinear([0, _this.width / 2], [0, h / 3 * 2])\r\n          let cny = (flag) ? (midY - hScale_linear(endX)) : (midY + hScale_linear(endX));\r\n          if (sorceNode['id'] == '7') { cny -= 20 }\r\n          if (cny < -150) {\r\n            startY = sorceNode['y'] + sorceNode['r'] + rsourceint\r\n            endY = targetNode['y'] + targetNode['r'] + rtargetint\r\n            cny = height - cny - 300;\r\n          }\r\n\r\n          path.moveTo(startX, startY);\r\n          path.lineTo(startX, cny);\r\n          path.lineTo(endX, cny);\r\n          path.lineTo(endX, endY);\r\n          _this.drawTimeLine(svg, path, \"rgb(200,200,200)\", 5, \"0\", idN, classN);\r\n        }\r\n\r\n\r\n      };\r\n      _this.updataRel()\r\n    },\r\n    drawMain(svg) {\r\n      let _this = this;\r\n      let data = _this.data;\r\n      let margin = _this.margin;\r\n\r\n      let width = _this.width - margin.left - margin.right;\r\n      let height = _this.height - margin.top - margin.bottom;\r\n\r\n      let graphGTransformX = _this.graphGTransformX;\r\n      let graphGTransformY = _this.graphGTransformY;\r\n      let graphGTransformK = _this.graphGTransformK;\r\n      let axisGroups = svg.append(\"g\").attr(\"id\", \"axisGroups\").attr(\"width\", width).attr(\"height\", height)\r\n      // .attr(\"transform\", \"translate(\" + graphGTransformX + ',' + graphGTransformY + \") scale(\" + graphGTransformK + \")\");\r\n      let groups = svg.append(\"g\").attr(\"id\", \"groups\").attr(\"width\", width).attr(\"height\", height)\r\n        .attr(\"transform\", \"translate(\" + graphGTransformX + ',' + graphGTransformY + \") scale(\" + graphGTransformK + \")\");\r\n      this.groupsSvg = groups;\r\n\r\n      let backG = groups.append(\"g\").attr(\"id\", \"backG\").attr(\"width\", width).attr(\"height\", height);\r\n      let arcG = groups.append(\"g\").attr(\"id\", \"arcG\").attr(\"width\", width).attr(\"height\", height);\r\n      let timeLineG = groups.append(\"g\").attr(\"id\", \"timeLineG\").attr(\"width\", width).attr(\"height\", height);\r\n      let circleG = groups.append(\"g\").attr(\"id\", \"circleG\").attr(\"width\", width).attr(\"height\", height);\r\n\r\n      _this.arcG = arcG;\r\n      let stepX = _this.stepX;\r\n      let stepY = _this.stepY;\r\n      let interval = _this.circleInterval;\r\n\r\n\r\n      let scalePre = _this.graphSvgScale;\r\n      let stx = 0;\r\n      let sty = 0;\r\n      let stk = 1;\r\n      var graphZoom = d3.zoom()\r\n        .scaleExtent([0, 10])\r\n        .on(\"start\", (e) => {\r\n          sty = e.transform.y;\r\n          stx = e.transform.x;\r\n          stk = e.transform.k;\r\n        })\r\n        .on('zoom', (e) => {\r\n          graphGTransformX = _this.graphGTransformX + e.transform.x - stx;\r\n          graphGTransformY = _this.graphGTransformY + e.transform.y - sty;\r\n          graphGTransformK = _this.graphGTransformK + e.transform.k - stk;\r\n          _this.graphGMoveX = graphGTransformX;\r\n\r\n          groups.attr('transform', 'translate(' + (graphGTransformX) + ',' + (graphGTransformY) + ') scale(' + (graphGTransformK) + ')')\r\n        })\r\n        .on('end', (e) => {\r\n          _this.graphGTransformX = graphGTransformX;\r\n          _this.graphGTransformY = graphGTransformY;\r\n          _this.graphGTransformK = graphGTransformK;\r\n          groups.attr('transform', 'translate(' + (graphGTransformX) + ',' + (graphGTransformY) + ') scale(' + (graphGTransformK) + ')')\r\n        });\r\n\r\n\r\n      svg.call(graphZoom)\r\n      // .call(graphZoom.transform, d3.zoomIdentity.scale(1))\r\n      const path = d3.path()\r\n      path.moveTo(margin.left, margin.top)\r\n      let x = margin.left;\r\n      let prex = margin.left;\r\n      let prey = margin.top;\r\n      let prer = 0;\r\n      let preSonLen = 0;\r\n      let layoutShow = _this.layoutShow;\r\n      let sumTotalDuration = 0;\r\n      let rootIndex = -1;\r\n      for (let i = 0; i < data.length; i++) {\r\n        let lay = parseInt(data[i]['layout']);\r\n\r\n        let colors = _this.mcolor;\r\n        let colorsD = _this.mDarkcolor;\r\n        let entityLocationData = tools.deepClone(data[i]);\r\n        if (lay == 0) {\r\n          rootIndex++;\r\n        }\r\n        entityLocationData['rootIndex'] = rootIndex;\r\n        entityLocationData['color'] = colors[rootIndex % colors.length];\r\n        entityLocationData['colorD'] = colorsD[rootIndex % colorsD.length];\r\n        let timeList = data[i]['time'];\r\n        let duration = tools.time2seconds(timeList[1]) - tools.time2seconds(timeList[0]);\r\n        sumTotalDuration += duration;\r\n        let showEntity = _this.showEntityList.find(function (d) { return d['id'] == data[i]['id'] });\r\n        if ((showEntity['show'] == true)) {\r\n          let y = margin.top + lay * stepY\r\n          let relevanceValue = data[i]['attribute']['relevance'];\r\n          let totalDurationValue = data[i]['totalDuration'];\r\n          let rScale = _this.totalDurationScale_linear;\r\n\r\n\r\n          let r = rScale(totalDurationValue);\r\n          let stepL = r + stepX / 2 + interval / 10;\r\n          let controlP1x = prex + interval / 1;\r\n          let controlP2x = x - interval / 1;\r\n          let curLinex = x - r - interval;\r\n\r\n          let relData = _this.relData;\r\n          let oData = _this.drawEntityLocation;\r\n          let basicRel = relData['basicRel'];\r\n          let daId = data[(i)]['id'];\r\n          let jg = 0;\r\n          for (let re = 0; re < basicRel.length; re++) {\r\n\r\n            let sorceId = basicRel[re][0];\r\n            let targetId = basicRel[re][1];\r\n            let cNode = '';\r\n            if ((sorceId == daId) || (targetId == daId)) {\r\n              jg = 1;\r\n            }\r\n          };\r\n          let sonFlag = 1;\r\n          if (((i > 0) && (preSonLen == 0)) && (data[(i)]['son'].length == 0)) {\r\n            sonFlag = 0;\r\n            stepL = r + stepX / 1.2 + interval / 10;\r\n            x += stepL;\r\n            controlP1x = prex + interval / 1;\r\n            controlP2x = x - r - interval / 2 - interval / 1;\r\n            curLinex = r + interval / 10;\r\n          }\r\n          else if (((i > 0) && (preSonLen != 0)) && (data[(i)]['son'].length == 0)) {\r\n            sonFlag = 0;\r\n            stepL = r + stepX + interval + 30;\r\n            x += stepL;\r\n            controlP1x = prex + interval / 1;\r\n            controlP2x = x - r - interval / 1 - interval / 1;\r\n            curLinex = r + interval / 10;\r\n          }\r\n          else {\r\n            stepL = r + stepX + interval + 10;\r\n            x += stepL;\r\n            controlP1x = prex + interval / 1;\r\n            controlP2x = x - r - interval - interval / 1;\r\n            curLinex = r + interval;\r\n          }\r\n\r\n          if ((jg == 1) && (data[i]['type'] == 0) && (data[(i)]['son'].length == 0)) {\r\n            curLinex += r * 1.5\r\n          }\r\n          _this.drawEntity(circleG, x, y, r, data[i])\r\n          path.bezierCurveTo(controlP1x, prey, controlP2x, y, x - curLinex, y)\r\n          // path.lineTo(controlP1x, prey)\r\n          // path.lineTo(controlP2x, y)\r\n          // path.lineTo(x - curLinex, y)\r\n          path.moveTo(x + curLinex, y);\r\n          prex = x + curLinex;\r\n          prey = y;\r\n          prer = r;\r\n          preSonLen = data[(i)]['son'].length;\r\n          entityLocationData['x'] = x;\r\n          entityLocationData['y'] = y;\r\n          entityLocationData['r'] = r;\r\n        }\r\n        else {\r\n          entityLocationData['x'] = prex;\r\n          entityLocationData['y'] = prey;\r\n          entityLocationData['r'] = prer;\r\n        }\r\n        entityLocationData['sonFlag'] = (entityLocationData['son'].length > 0) ? (1) : (0);\r\n        // entityLocationData['showRel'] = false;\r\n        _this.drawEntityLocation.push(entityLocationData);\r\n      }\r\n      let entityLocationData = _this.drawEntityLocation;\r\n      let colors = _this.mcolor;\r\n      let colorIndex = 0;\r\n      let colorrootIndex = 0;\r\n\r\n      _this.sumTotalDuration = sumTotalDuration;\r\n      for (let i = 0; i < entityLocationData.length; i++) {\r\n        let x = entityLocationData[i]['x'];\r\n        let y = entityLocationData[i]['y'];\r\n        let r = entityLocationData[i]['r'];\r\n\r\n        let showEntity = _this.showEntityList.find(function (d) { return d['id'] == entityLocationData[i]['id'] });\r\n        if (entityLocationData[i]['type'] == 0 && (showEntity['show'] == true)) {\r\n          _this.drawEntityTimeAxis(circleG, entityLocationData[i]);\r\n        }\r\n        if ((entityLocationData[i]['layout'] == '0' && (entityLocationData[i]['name'] != 'Test'))) {\r\n          colorIndex = colorrootIndex;\r\n          colorrootIndex++;\r\n\r\n        }\r\n        if ((entityLocationData[i]['son'].length != 0) && (_this.showEntityList.find(function (d) { return d['id'] == entityLocationData[i]['son'][0] })['show'])) {\r\n          let maxxs = entityLocationData[i]['x'] - entityLocationData[i]['r'] - 40;\r\n          let maxys = entityLocationData[i]['y'] - entityLocationData[i]['r'] - 40;\r\n          let minxs = tools.deepClone(maxxs);\r\n          let minys = tools.deepClone(maxys);\r\n          let rectPoints = [[maxxs, maxys]];\r\n          let sons = tools.deepClone(data[i]['son']);\r\n          while ((sons.length > 0)) {\r\n            let s = sons[0];\r\n            sons.splice(0, 1);\r\n            let curson = entityLocationData.find(function (d) { return d['id'] == s; });\r\n            let curgson = curson['son'];\r\n            let curx = curson['x'] + curson['r'] * 2;\r\n            let cury = curson['y'] + curson['r'] * 2;\r\n            if (curx > maxxs) { maxxs = curx; }\r\n            // if(curson['y']<maxys)maxys = curson['y'];\r\n            if (cury < minys) minys = cury;\r\n            if (cury > maxys) maxys = cury;\r\n            for (let gs = 0; gs < curgson.length; gs++) {\r\n              sons.push(curgson[gs]);\r\n            }\r\n          }\r\n          rectPoints = [[minxs, minys], [minxs, maxys], [maxxs, maxys], [maxxs, minys]];\r\n          // _this.drawpolygon(backG, colors[colorIndex], rectPoints, \"rgb(255,255,255)\",0.3);\r\n          _this.drawRect(backG, minxs, minys, Math.abs(maxxs - minxs), Math.abs(maxys - minys), 20, 20, colors[colorIndex], 0.1, \"white\", `backRect${i}`)\r\n\r\n          colorIndex++;\r\n          colorIndex %= colors.length\r\n        }\r\n        // entityLocationData[i]['color'] = colors[colorIndex - 1];\r\n        // if ((entityLocationData[i]['layout'] == '0') && ((entityLocationData[i]['name'] == 'Test') || (entityLocationData[i]['name'] == 'Example'))) {\r\n        //   entityLocationData[i]['color'] = colors[colorIndex]\r\n        // }\r\n      }\r\n      _this.drawTimeLine(timeLineG, path, \"rgb(200,200,200)\", 5, '0', 'timeLine ', 'timeLine ');\r\n      _this.drawRelationshipLine(timeLineG);\r\n      _this.drawTimeAxis(_this.TimeAxisSvg);\r\n      _this.drawTypeRiver(_this.TimeAxisSvg);\r\n      _this.updataTimeAxisDur(_this.TimeAxisSvg, _this.timeAxisX, _this.timeAxisW);\r\n    },\r\n    updataTimeAxisDur(svg, x, width) {\r\n      const _this = this;\r\n      let margin = _this.margin;\r\n      let totalWidth = _this.width - margin.left - margin.right;\r\n      let y = 0;\r\n      let h = 190;\r\n      _this.drawRect(svg, 0, y, x, h, 3, 3, 'white', 0.3, '', \"timeAxisRect1\")\r\n      let curRect = _this.drawRect(svg, x, y - 0, width, h - 5, 3, 3, 'rgba(0,0,0,0)', 1, 'rgb(145, 180, 189)', 'winRect', 2);\r\n      // --------------------------------------\r\n      // curRect.on('mousemove', function (e) {\r\n      //   d3.select(this).attr(\"cursor\", 'pointer');\r\n      //   if (_this.timeAxisDropFlag == 1) {\r\n      //     let mx = e.clientX - _this.timeAxisDownX;\r\n      //     _this.timeAxisX = e.layerX - 450 - _this.timeAxisW / 2;\r\n      //   }\r\n      // })\r\n      // curRect.on('mousedown', function (e) {\r\n      //   _this.timeAxisDownX = e.clientX;\r\n      //   _this.timeAxisDropFlag = 1;\r\n      // })\r\n      // curRect.on('mouseup', function (e) {\r\n      //   _this.timeAxisDownX = e.clientX;\r\n      //   _this.timeAxisDropFlag = 0;\r\n      // })\r\n      // ----------------------------------------\r\n\r\n      _this.drawRect(svg, x + width, y, totalWidth - width, h, 3, 3, 'white', 0.3, '', \"timeAxisRect2\")\r\n    },\r\n    drawTypeRiver(svg) {\r\n      const _this = this;\r\n      let oriData = _this.data;\r\n      let resData = [];\r\n      let triLi = [];\r\n      let exeLi = [];\r\n      var defs = svg.append(\"defs\");\r\n\r\n      var filter = defs\r\n        .append(\"filter\")\r\n        .attr(\"id\", \"coolShadow\")\r\n        .attr(\"x\", \"-100%\")\r\n        .attr(\"y\", \"-100%\") //\r\n        .attr(\"width\", \"300%\")\r\n        .attr(\"height\", \"300%\"); //\r\n\r\n      filter\r\n        .append(\"feMorphology\")\r\n        .attr(\"in\", \"SourceGraphic\")\r\n        .attr(\"result\", \"upperLayer\")\r\n        .attr(\"operator\", \"dilate\")\r\n        .attr(\"radius\", \"0.2 0.2\");\r\n\r\n      filter\r\n        .append(\"feMorphology\")\r\n        .attr(\"in\", \"SourceAlpha\")\r\n        .attr(\"result\", \"enlargedAlpha\")\r\n        .attr(\"operator\", \"dilate\")\r\n        .attr(\"radius\", \"0.2 0.2\");\r\n\r\n      filter\r\n        .append(\"feGaussianBlur\")\r\n        .attr(\"in\", \"enlargedAlpha\")\r\n        .attr(\"result\", \"bluredAlpha\")\r\n        .attr(\"stdDeviation\", \"3\");\r\n\r\n      filter\r\n        .append(\"feOffset\")\r\n        .attr(\"in\", \"bluredAlpha\")\r\n        .attr(\"result\", \"lowerLayer\")\r\n        .attr(\"dy\", \"1\"); //\r\n\r\n      var feMerge = filter.append(\"feMerge\");\r\n      feMerge.append(\"feMergeNode\").attr(\"in\", \"lowerLayer\");\r\n      feMerge.append(\"feMergeNode\").attr(\"in\", \"upperLayer\");\r\n      for (let i = 0; i < oriData.length; i++) {\r\n        let curEnt = oriData[i];\r\n        let tp = {}\r\n        tp['od'] = i;\r\n        if ((curEnt['type'] == \"1\")) {\r\n          triLi.push(tp);\r\n        }\r\n        if (curEnt['type'] == \"2\") {\r\n          exeLi.push(tp);\r\n        }\r\n        let typeData = curEnt[\"attribute\"][\"expressions\"];\r\n        let totalDur = 0;\r\n\r\n        for (let t in typeData) {\r\n          // let color = typeColor[i];\r\n          let typeDurition = typeData[t];\r\n          let totalTypeSeconds = 0;\r\n          for (let d in typeDurition) {\r\n            totalTypeSeconds += (tools.time2seconds(typeDurition[d][1]) - tools.time2seconds(typeDurition[d][0]))\r\n          }\r\n          totalDur += totalTypeSeconds;\r\n          tp[t] = totalTypeSeconds;\r\n        }\r\n        for (let t in tp) {\r\n          if (t != 'od') {\r\n            tp[t] /= totalDur;\r\n            if (totalDur == 0) {\r\n              tp[t] = 0;\r\n            }\r\n          }\r\n        }\r\n        resData.push(tp)\r\n      }\r\n\r\n      let data = resData;\r\n      var stack = d3.stack()\r\n        .keys(['1', '2', '3'])\r\n        .order(d3.stackOrderInsideOut)\r\n        .offset(d3.stackOffsetWiggle);\r\n\r\n      let yRangeWidth = 70;\r\n      let w = parseInt(svg.attr(\"width\")) + 60\r\n      let xStep = (w) / oriData.length;\r\n      let yScale = d3.scaleLinear().domain([-1, 1]).range([0, 70]);\r\n      var area = d3.area()\r\n        .curve(d3.curveBasis)\r\n        .x(function (d) {\r\n          return d.data.od * xStep + 15;\r\n        })\r\n        .y0(function (d) {\r\n          return 143 + yRangeWidth - yScale(d[0]);\r\n        })\r\n        .y1(function (d) {\r\n          return 143 + yRangeWidth - yScale(d[1]);\r\n        });\r\n      let stackData = stack(data)\r\n      let lenThreshold = 0.4;\r\n      let iconLi = {}\r\n      for (let s in stackData) {\r\n        iconLi[s] = []\r\n        for (let i in stackData[s]) {\r\n          let lenArea = stackData[s][i]\r\n          if ((lenArea[1] - lenArea[0]) > 0.4) {\r\n            iconLi[s].push([i, lenArea]);\r\n          }\r\n          for (let li in iconLi[s]) {\r\n            if (i < (iconLi[s][li][0] + 2)) {\r\n              let selectArea = iconLi[s][li][1]\r\n              if (((selectArea[1] - lenArea[1]) - (selectArea[0] - lenArea[0])) < 0.2) {\r\n                iconLi[s].splice(s, 1);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // let areaG = svg.append(\"g\")\r\n      let typeColor = {\r\n        \"1\": \"#ff9c9c\",\r\n        \"2\": \"#f4f4d0\",\r\n        \"3\": \"#6f8be0\",\r\n      };\r\n      let colorLi = _this.mcolor;\r\n      svg.selectAll(\"path\")\r\n        .data(stackData)\r\n        .join(\"path\")\r\n        .attr(\"id\", function (d) { return d.key })\r\n        .attr(\"class\", \"river\")\r\n        .attr(\"d\", function (d) {\r\n          return area(d)\r\n        })\r\n        .attr(\"fill\", function (d, i) {\r\n          return typeColor[d.key]\r\n        })\r\n        .on(\"mouseover\", function (d) {\r\n          d3.selectAll(\".river\").style(\"filter\", \"url()\")\r\n          d3.select(this).style(\"filter\", \"url(#coolShadow)\")\r\n        })\r\n\r\n      for (let t in triLi) {\r\n        let area = tools.calcTriangle((triLi[t]['od']) * xStep, -30, 14);\r\n        _this.drawTriangle(svg, \"rgb(250, 199, 88)\", area, \"rgb(250, 199, 88)\");\r\n        _this.drawTxt(svg, (triLi[t]['od']) * xStep, -23, \"T\", \"white\", 0, \"middle\", 18)\r\n      }\r\n      for (let t in exeLi) {\r\n        let area = tools.calcTriangle((exeLi[t]['od']) * xStep, -30, 14);\r\n        _this.drawTriangle(svg, \"rgb(250, 199, 88)\", area, \"rgb(250, 199, 88)\");\r\n        _this.drawTxt(svg, (exeLi[t]['od']) * xStep, -23, \"E\", \"white\", 0, \"middle\", 18)\r\n      }\r\n    },\r\n    drawTimeAxis(svg) {\r\n      const _this = this;\r\n      let sumTotalDuration = _this.sumTotalDuration;\r\n      let data = _this.drawEntityLocation;\r\n      let addData = tools.deepClone(_this.drawEntityLocation);\r\n      let margin = _this.margin;\r\n      let prex = margin.left;\r\n      let prey = margin.top / 2;\r\n      let width = svg.attr(\"width\")// _this.width - margin.left - margin.right;\r\n      let height = _this.height - margin.top - margin.bottom;\r\n      let widthScale = d3.scaleLinear([0, sumTotalDuration], [0, width]);\r\n      data.forEach((self, indx, arr) => {\r\n        let totalDurationValue = self['totalDuration'];\r\n        let timeList = self['time'];\r\n        let id = self['id']\r\n        let duration = tools.time2seconds(timeList[1]) - tools.time2seconds(timeList[0]);\r\n        // console.log(timeList,tools.time2seconds(timeList[0]))\r\n        let evWidth = widthScale(duration) - 4;\r\n\r\n        let evTWidth = widthScale(totalDurationValue);\r\n        let lay = parseInt(self['layout']);\r\n        let evHight = 80 - 20 * lay;\r\n        let x = prex;\r\n        let y = prey + 20 * lay;\r\n        prex += evWidth + 4;\r\n        let cr = 3;\r\n        // if(self['type']==0){\r\n        if (1) {\r\n          if (lay == 0) {\r\n            _this.drawRect(svg, x - 2, y - 20, evTWidth, 100, 6, 6, self['color'], 0.3, 'white', `timeAxisEntB_${indx}`, 1.5, 'timeAxisEntB')\r\n          }\r\n          _this.drawRect(svg, x, y, evWidth, evHight, 3, 3, self['color'], 0.4, self['colorD'], `timeAxisEnt_${id}`, 1.5, 'timeAxisEnt')\r\n          _this.drawTxt(svg, x + evWidth / 2, y + evHight + 20, 10, [self['name'].split(\" \")], \"grey\", 16, `timeText_${id}`, 'timeText');\r\n        }\r\n        else {\r\n          if (lay == 0) {\r\n            _this.drawRect(svg, x - 2, y - 20, evTWidth, 100, 6, 6, self['color'], 0.3, 'white', `timeAxisEntB_${id}`, 1.5, 'timeAxisEnt')\r\n          }\r\n          let area = [[x + cr, y + evHight - cr], [x - cr + evWidth, y + evHight - cr], [x + evWidth / 2, y]];\r\n          _this.drawTriangle(svg, self['color'], area, self['color'], 1, cr * 2);\r\n        }\r\n        addData[indx]['timeX'] = x;\r\n        addData[indx]['timeW'] = evWidth\r\n      })\r\n\r\n      d3.selectAll('.timeText').attr(\"opacity\", 0)\r\n      _this.drawEntityLocation = addData;\r\n    },\r\n    drawTriangle(svg, color, points, stroke, opacity = 1, strokeW = 15) {\r\n      svg.append(\"polygon\")\r\n        .attr(\"points\", points)\r\n        .attr(\"fill\", color)\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"stroke\", stroke)\r\n        .attr(\"stroke-width\", strokeW);\r\n    },\r\n    drawpolygon(svg, color, areas, stroke, opacity = 1) {\r\n      svg.append(\"polygon\")\r\n        .attr(\"points\", areas)\r\n        .attr(\"fill\", color)\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"stroke\", stroke)\r\n        .attr(\"stroke-width\", \"1.5px\");\r\n    },\r\n    drawEntityTimeAxis(svg, entData) {\r\n\r\n      const _this = this;\r\n      let x = entData['x'];\r\n      let r = entData['r'];\r\n      let y = entData['y'] + r / 2;\r\n      let daId = entData['id']\r\n      let entDataO = _this.drawEntityLocation;\r\n      let sumTotalDuration = _this.sumTotalDuration;\r\n      let widthScale = d3.scaleLinear([0, sumTotalDuration], [0, Math.PI]);\r\n      let timeStepR = 0;\r\n      let timeStartR = -Math.PI / 2;\r\n      let inter = 0;\r\n      let sons = tools.deepClone(entData['son']);\r\n      let relList = [];\r\n      let relRootList = [];\r\n      let psNum = 0.5;\r\n      if ((sons.length > 0)) {\r\n        inter = 14\r\n      }\r\n\r\n      let relData = _this.relData;\r\n      let oData = _this.drawEntityLocation;\r\n      let basicRel = relData['basicRel'];\r\n      for (let re = 0; re < basicRel.length; re++) {\r\n\r\n        let sorceId = basicRel[re][0];\r\n        let targetId = basicRel[re][1];\r\n        let cNode = '';\r\n        if (sorceId == daId) {\r\n          cNode = oData.find(function (d) { return d['id'] == targetId });\r\n          relList.push(targetId);\r\n          relRootList.push(cNode['rootIndex']);\r\n        }\r\n\r\n        if (targetId == daId) {\r\n          cNode = oData.find(function (d) { return d['id'] == sorceId });\r\n          relList.push(sorceId);\r\n          relRootList.push(cNode['rootIndex']);\r\n        }\r\n      };\r\n      // if(entData[]) \r\n      let wline = 0;\r\n      let sumTotalDurationF = 0;\r\n      entDataO.forEach((self, indx, arr) => {\r\n        let totalDurationValue = self['totalDuration'];\r\n        let timeList = self['time'];\r\n        let layout = self['layout'];\r\n        let rootIndex = self['rootIndex'];\r\n        let duration = tools.time2seconds(timeList[1]) - tools.time2seconds(timeList[0]);\r\n        timeStepR = widthScale(duration);\r\n        if (!relRootList.includes(rootIndex)) {\r\n          wline += timeStepR * psNum;\r\n          sumTotalDurationF += duration;\r\n        }\r\n      })\r\n      let widthScaleA = d3.scaleLinear([0, sumTotalDuration - sumTotalDurationF], [0, Math.PI - wline]);\r\n      // if(rootEntityList.length==0){\r\n      //   widthScaleA = widthScale\r\n      // }\r\n      // let wline = 0;\r\n      entDataO.forEach((self, indx, arr) => {\r\n        let totalDurationValue = self['totalDuration'];\r\n        let timeList = self['time'];\r\n        let layout = self['layout'];\r\n        let rootIndex = self['rootIndex'];\r\n        let cId = self['id'];\r\n        let duration = tools.time2seconds(timeList[1]) - tools.time2seconds(timeList[0]);\r\n        timeStepR = widthScale(duration);\r\n        if (!relRootList.includes(rootIndex)) {\r\n          if (relRootList.length != 0) {\r\n            timeStepR = psNum * widthScale(duration);\r\n          }\r\n        }\r\n        else {\r\n          timeStepR = widthScaleA(duration)\r\n        }\r\n        let endAnglet = timeStartR + timeStepR;\r\n        var dataset = { startAngle: timeStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n        timeStartR = endAnglet;\r\n        let color = 'blue';\r\n        let rh = 30;\r\n        let h = rh;\r\n        let nh = 0;\r\n        if (relRootList.length != 0) {\r\n          h = rh * 0.32 + rh * 0.6 - 3 * layout;\r\n          nh = rh * 0.3;\r\n        }\r\n        if (!relRootList.includes(self['rootIndex'])) {\r\n          h = rh * 0.7;\r\n          nh = h * 0 + h * 0.6;\r\n        }\r\n        else {\r\n          dataset.startAngle += 0.003;\r\n          dataset.endAngle -= 0.003;\r\n\r\n        }\r\n        var arcPath = d3.arc()\r\n          .innerRadius(r + inter + nh)\r\n          .outerRadius(r + inter + h);\r\n        var pathArc = arcPath(dataset);\r\n        let arc;\r\n        if (relRootList.length != 0) {\r\n          let jiantouPath = d3.path();\r\n          jiantouPath.arc(x, y - r / 2, r + h + inter, - Math.PI, 0);\r\n\r\n          // _this.drawTimeLine(_this.arcG, jiantouPath, \"rgb(200,200,200)\", 1, '9,5', 'timeLayout ', 'timeLayout ');\r\n\r\n          if (relRootList.includes(self['rootIndex'])) {\r\n            if (relList.includes(parseInt(self['id']))) {\r\n              arc = _this.drawArc(svg, x, y - r / 2, pathArc, self['color'], self['color'], `timeAxisFor f${entData['id']} ${self['id']}`, '0', 0, 1);\r\n            }\r\n            else {\r\n              arc = _this.drawArc(svg, x, y - r / 2, pathArc, \"white\", self['color'], `timeAxisFor f${entData['id']} ${self['id']}`, '0', 0.0, 0.4);\r\n            }\r\n          }\r\n          else {\r\n            arc = _this.drawArc(svg, x, y - r / 2, pathArc, self['color'], self['color'], `timeAxisFor f${entData['id']} ${self['id']}`, '0', 0, 0.2);\r\n\r\n          }\r\n          arc.on(\"mouseover\", function (d) {\r\n            let classN = d3.select(this).attr(\"class\");\r\n            let sId = (classN.split(\" \")[1] + \"\").slice(1);\r\n            let tId = classN.split(\" \")[2];\r\n            _this.showEntityRelIdList = [sId]\r\n            _this.overEntityId = sId;\r\n            _this.overTargetEntityId = tId;\r\n          })\r\n          arc.on(\"mouseleave\", function (d) {\r\n            let classN = d3.select(this).attr(\"class\");\r\n            let sId = (classN.split(\" \")[1] + \"\").slice(1);\r\n            let showRel = _this.showEntityRelIdList;\r\n            _this.overTargetEntityId = '';\r\n            _this.overEntityId = _this.curEntId;\r\n            if (_this.showEntityRelIdOverState == 1) {\r\n              showRel.push(parseInt(sId))\r\n            }\r\n            else {\r\n              showRel.splice(showRel.indexOf(parseInt(sId)), 1)\r\n            }\r\n          })\r\n        }\r\n      })\r\n    },\r\n    drawEntity(svg, x, y, r, data) {\r\n      const _this = this;\r\n      let color_linear = _this.importanceColor_linear;\r\n      let compute_color = _this.importanceCompute_color;\r\n      let rScale = _this.relevanceScale_linear;\r\n      let oData = _this.data;\r\n      let importanceValue = data['attribute']['importance'];\r\n      let relevanceValue = data['attribute']['relevance'];\r\n      // let r = rScale(relevanceValue)\r\n      // { 'id': data[i]['id'], \"x\": x, \"r\": r, \"layout\": lay, \"y\": y, \"sonFlag\": sonFlag }\r\n\r\n\r\n      if (data['type'] == '1') {\r\n        let area = tools.calcTriangle(x, y, r);\r\n        _this.drawTriangle(svg, \"rgb(250, 199, 88)\", area, \"rgb(250, 199, 88)\");\r\n\r\n        _this.drawTxt(svg, x, y + 8, 20, [\"T\"], 'white', 28, \"T\")\r\n      }\r\n      else if (data['type'] == '2') {\r\n        let area = tools.calcTriangle(x, y, r);\r\n        _this.drawTriangle(svg, \"rgb(250, 199, 88)\", area, \"rgb(250, 199, 88)\");\r\n\r\n        _this.drawTxt(svg, x, y + 8, 20, [\"E\"], 'white', 28, \"E\")\r\n      }\r\n      else {\r\n\r\n        let cy = y;\r\n        let totalDuration = _this.totalDuration;\r\n        let timeLineScale_linear = d3.scaleLinear([0, totalDuration], [x - r * Math.sqrt(3) / 2, x + r * Math.sqrt(3) / 2])\r\n        let timeLineHighScale_linear = d3.scaleLinear([0, _this.maxTotalDuration - 50], [r / 2, r * (1 + Math.sqrt(3) / 3 * 2)])\r\n        let circleColor = compute_color(color_linear(importanceValue));\r\n        _this.drawCircle(svg, x, cy, r, circleColor, data, 1, \"entCircle\", \"entCircle_\" + data['id']);\r\n\r\n        r = r * Math.sqrt(3) / 2;\r\n        y += r / 2;\r\n        let path = d3.path();\r\n\r\n\r\n        path.moveTo(x - r, y);\r\n        let lineLi = [data];\r\n        let linePoint = [{ 'id': data['id'], 'time': data['time'], 'x': 0, 'y': 0 }];\r\n        let jgidL = [data['id']];\r\n        let similarityRelsli = [data[\"similarityRel\"]];\r\n        while (similarityRelsli.length > 0) {\r\n          let similarityRels = similarityRelsli[0];\r\n          similarityRelsli.splice(0, 1);\r\n          let jg = 0;\r\n          for (let srel in similarityRels) {\r\n            let cdata = oData.find(function (d) { return d['id'] == similarityRels[srel] });\r\n            if (jgidL.indexOf(cdata['id']) == -1) {\r\n              similarityRelsli.push(cdata[\"similarityRel\"])\r\n              jg = 1;\r\n              lineLi.push(cdata)\r\n              jgidL.push(cdata['id'])\r\n              linePoint.push({ 'id': cdata['id'], 'time': cdata['time'], 'x': 0, 'y': 0 })\r\n            }\r\n          }\r\n          // if(jg==0){\r\n          // break;\r\n          // }\r\n        }\r\n\r\n        const sortmt = (a, b) => {\r\n          return tools.time2seconds(a[0]) - tools.time2seconds(b[0]);\r\n        }\r\n        const sortlp = (a, b) => {\r\n          return tools.time2seconds(a['time'][0]) - tools.time2seconds(b['time'][0]);\r\n        }\r\n\r\n        lineLi = lineLi.sort(sortlp);\r\n        linePoint = linePoint.sort(sortlp);\r\n        let lineData = [[x - r * Math.sqrt(3) / 2 - 4, y]];\r\n        for (let t = 0; t < lineLi.length; t++) {\r\n          let startT = lineLi[t]['time'][0];\r\n          let duration = lineLi[t]['totalDuration']\r\n          // let endT = lineLi[t]['time'][1];\r\n          let startS = tools.time2seconds(startT);\r\n          let endS = startS + duration;\r\n          // let startx = timeLineScale_linear((startS - duration * 10));\r\n          // let endx = timeLineScale_linear((endS + duration * 10));\r\n          let limst = (x - r * Math.sqrt(3) / 2);\r\n          let limed = (x + r * Math.sqrt(3) / 2);\r\n          let startx = (limst < timeLineScale_linear((startS))) ? (timeLineScale_linear((startS))) : (limst);\r\n          let endx = (limed > timeLineScale_linear((endS))) ? (timeLineScale_linear((endS))) : (limed);\r\n          // let midx = timeLineScale_linear((endS + startS) / 2);\r\n          let midx = (startx + endx) / 2;\r\n          let ys = y;\r\n          let yz = y - timeLineHighScale_linear((duration));\r\n          linePoint[t]['x'] = midx;\r\n          linePoint[t]['y'] = y - timeLineHighScale_linear(duration) / 1.7;\r\n          // if (startx < (lineData[lineData.length - 1][0])) {\r\n          if (t > 0) {\r\n            lineData.splice(lineData.length - 1, 1);\r\n            midx += t * 5;\r\n            startx = midx - ((midx - (lineData[lineData.length - 1][0] + midx) / 2)) / 2;\r\n            endx += t * 5;\r\n            ys = y + (y - lineData[lineData.length - 1][1]) / 3\r\n          }\r\n          // }\r\n          lineData.push([startx, ys], [midx, yz], [endx, y])\r\n          // let startx = timeLineScale_linear((startS - duration * 10));\r\n          // let endx = timeLineScale_linear((endS + duration * 10));\r\n\r\n          // let startyf = y + timeLineHighScale_linear((duration)) / 8;\r\n          // let startyf1 = y + timeLineHighScale_linear((duration)) / 8;\r\n          // let endyf = y + timeLineHighScale_linear((duration)) / 8;\r\n          // let endyf1 = y + timeLineHighScale_linear((duration)) / 8;\r\n          // let yz = y - timeLineHighScale_linear((duration));\r\n          // let midx = timeLineScale_linear((endS + startS) / 2);\r\n          // linePoint[t]['x'] = midx;\r\n          // linePoint[t]['y'] = y - timeLineHighScale_linear(duration) / 1.7;\r\n          // let y1 = y;\r\n          // if (startx < (lineData[lineData.length - 1][0])) {\r\n          //   if (t > 0) {\r\n          //     lineData.splice(lineData.length - 3, 3);\r\n          //     startx = (lineData[lineData.length - 1][0] + midx) / 2;\r\n          //     y1 = lineData[lineData.length - 1][1] + timeLineHighScale_linear((duration)) / 2;\r\n          //     startyf = lineData[lineData.length - 1][1] + timeLineHighScale_linear((duration)) / 2;\r\n          //     startyf1 = lineData[lineData.length - 1][1] + timeLineHighScale_linear((duration)) / 2;\r\n          //   }\r\n          // }\r\n          // let startx1 = startx + (timeLineScale_linear((startS + duration)) - timeLineScale_linear((startS)));\r\n          // let endx1 = endx - (timeLineScale_linear((startS + duration)) - timeLineScale_linear((startS)));\r\n          // let startx2 = startx1 + (timeLineScale_linear((startS + duration)) - timeLineScale_linear((startS)));\r\n          // let endx2 = endx1 - (timeLineScale_linear((startS + duration)) - timeLineScale_linear((startS)));\r\n          // if (endx > (r + x)) endx = r + x;\r\n          // if (startx1 < (lineData[lineData.length - 1][0])) startx1 = lineData[lineData.length - 1][0];\r\n          // if (endx1 > (r + x)) endx1 = r + x;\r\n          // if (startx2 < (lineData[lineData.length - 1][0])) startx2 = lineData[lineData.length - 1][0];\r\n          // if (endx2 > (r + x)) endx2 = r + x;\r\n          // lineData.push([startx, y1], [startx1, startyf1], [startx2, startyf], [midx, yz], [endx2, endyf], [endx1, endyf1], [endx, y])\r\n        }\r\n        lineData.push([x + r, y])\r\n        let curve_generator = d3.line()\r\n          .x((d) => d[0])\r\n          .y((d) => {\r\n            let h = Math.sqrt(Math.pow(r, 2) - Math.pow((d[0] - (x - r)), 2));\r\n            if ((y - d[1]) > (h + r * Math.sqrt(3) / 2))\r\n              return y - (h + r * Math.sqrt(3) / 2) + 2;\r\n            return d[1];\r\n          })\r\n          .curve(d3.curveBundle)\r\n        // .curve(d3.curveCatmullRom  )\r\n        // .curve(d3.curveBasis)\r\n        _this.drawTimeLine(svg, curve_generator(lineData), \"white\", 2, '0', 'sonLine ', 'sonLine ');\r\n\r\n\r\n        for (let p = 0; p < linePoint.length; p++) {\r\n          _this.drawCircle(svg, linePoint[p]['x'], linePoint[p]['y'], 5, \"red\", linePoint[p], 0, \"linePoint\", \"linePoint_\" + linePoint[p]['id']);\r\n        }\r\n\r\n        // \"1\": \"rgb(145, 204, 117)\",\r\n        //   \"2\": \"rgb(84, 112, 198)\",\r\n        //   \"3\": \"rgb(238, 102, 102)\",\r\n        let typeColor = {\r\n          \"1\": \"#ff9c9c\",\r\n          \"2\": \"#f4f4d0\",\r\n          \"3\": \"#6f8be0\",\r\n        };\r\n        let duration = tools.time2seconds(data['time'][0]) - tools.time2seconds(data['time'][1]);\r\n        let typeData = data['attribute']['expressions'];\r\n        let sonList = data['son'];\r\n        let sons = [sonList];\r\n        while (sons.length > 0) {\r\n          let curSonList = sons[0];\r\n          sons.splice(0, 1);\r\n          if (curSonList.length > 0) {\r\n            for (let s in curSonList) {\r\n              let sonData = oData.find(function (d) { return d['id'] == curSonList[s] });\r\n              let sonTypeData = sonData['attribute']['expressions'];\r\n\r\n              for (let t in sonTypeData) {\r\n                let typeDurition = sonTypeData[t];\r\n                for (let d in typeDurition) {\r\n                  typeData[t].push(typeDurition[d])\r\n                }\r\n              }\r\n              sons.push(sonData['son']);\r\n            }\r\n          }\r\n        }\r\n        var typeStartR = 0//Math.PI/4;\r\n\r\n        var typeStepR = Math.PI / 1;\r\n\r\n        if (sonList.length > 0) {\r\n          let typeTotalDur = 0;\r\n          for (let t in typeData) {\r\n            let typeDurition = typeData[t];\r\n            for (let d in typeDurition) {\r\n              typeTotalDur += (tools.time2seconds(typeDurition[d][1]) - tools.time2seconds(typeDurition[d][0]))\r\n            }\r\n          }\r\n          let typeArcScale_linear = d3.scaleLinear([0, typeTotalDur], [0, Math.PI * 2]);\r\n          for (let i in typeData) {\r\n            let color = typeColor[i];\r\n            let typeDurition = typeData[i];\r\n            let totalTypeSeconds = 0;\r\n            for (let d in typeDurition) {\r\n              totalTypeSeconds += (tools.time2seconds(typeDurition[d][1]) - tools.time2seconds(typeDurition[d][0]))\r\n            }\r\n            if (totalTypeSeconds > 0) {\r\n              let typeStepR = typeArcScale_linear(totalTypeSeconds)//Math.PI/2;\r\n\r\n              let endAnglet = typeStartR + 1 * typeStepR\r\n              var dataset = { startAngle: typeStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n              typeStartR = endAnglet;\r\n              var arcPath = d3.arc()\r\n                .innerRadius(r + 10)\r\n                .outerRadius(r + 25);\r\n              var pathArc = arcPath(dataset);\r\n              _this.drawArc(svg, x, y - r / 2, pathArc, color, color, 'type f' + data['id'] + \" t\" + i);\r\n            }\r\n          }\r\n          let sonTotal = 0;\r\n          let sonNum = 0\r\n          for (let s in sonList) {\r\n            let sonData = oData.find(function (d) { return d['id'] == sonList[s] });\r\n            let sonDur = sonData['totalDuration'];\r\n            sonTotal += sonDur;\r\n            sonNum += 1;\r\n          }\r\n          let skipArc = Math.PI / (sonNum + 2);\r\n          let timeSonLinear = d3.scaleLinear([0, sonTotal], [0, Math.PI - skipArc * (sonNum - 1)]);\r\n          let timeSonHeighLinear = d3.scaleLinear([0, sonTotal], [40, 40]);\r\n\r\n          let timeSonColor_linear = d3.scaleLinear().domain([0, sonTotal]).range([0, 1]);\r\n          let timeSonCompute_color = d3.interpolate(\"white\", circleColor);\r\n          var sonStartR = Math.PI / 2;\r\n\r\n          let relList = [];\r\n          let relRootList = [];\r\n          let psNum = 0.1;\r\n          let daId = data['id']\r\n          let relData = _this.relData;\r\n          let odData = _this.data;\r\n          let basicRel = relData['basicRel'];\r\n          for (let re = 0; re < basicRel.length; re++) {\r\n\r\n            let sorceId = basicRel[re][0];\r\n            let targetId = basicRel[re][1];\r\n            let cNode = '';\r\n            if (sorceId == daId) {\r\n              cNode = odData.find(function (d) { return parseInt(d['id']) == parseInt(targetId) });\r\n              relList.push(targetId);\r\n            }\r\n\r\n            if (targetId == daId) {\r\n              cNode = odData.find(function (d) { return parseInt(d['id']) == parseInt(sorceId) });\r\n              relList.push(sorceId);\r\n            }\r\n          };\r\n          if (relList.length == 0) {\r\n            sonStartR = 0;\r\n            timeSonLinear = d3.scaleLinear([0, sonTotal], [0, Math.PI * 2 - skipArc * (sonNum)]);\r\n          }\r\n\r\n          for (let s in sonList) {\r\n            let sonData = oData.find(function (d) { return d['id'] == sonList[s] });\r\n            let sonDur = sonData['totalDuration'];\r\n\r\n            let sonStepR = timeSonLinear(sonDur)//Math.PI/2;\r\n\r\n            let endAnglet = sonStartR + sonStepR;\r\n            var dataset = { startAngle: sonStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n            sonStartR = endAnglet;\r\n            let color = 'blue';\r\n            var arcPath = d3.arc()\r\n              .innerRadius(r + 28)\r\n              .outerRadius(r + timeSonHeighLinear(sonDur));\r\n            var arcMidPath = d3.arc()\r\n              .innerRadius(0)\r\n              .outerRadius(r + 32);\r\n            var pathArc = arcPath(dataset);\r\n\r\n            endAnglet = sonStartR + skipArc;\r\n            var midDataset = { startAngle: sonStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n\r\n            let jiantouPath = d3.path();\r\n            jiantouPath.arc(x, y - r / 2, r + 32, sonStartR - Math.PI / 2, endAnglet - Math.PI / 2);\r\n\r\n            sonStartR += skipArc;\r\n            var pathMidArc = arcMidPath(midDataset);\r\n            let timeSonColor = compute_color(color_linear(sonData['attribute']['importance']));\r\n            _this.drawArc(svg, x, y - r / 2, pathArc, timeSonColor, timeSonColor, 'son f' + data['id'] + \" s\" + sonList[s], '0');\r\n            if (s != sonList.length - 1) {\r\n\r\n              // console.log\r\n              _this.drawTimeLine(_this.arcG, jiantouPath, \"rgb(200,200,200)\", 3, '9,5', 'midArc ', 'midArc ');\r\n              // _this.drawTimeLine(_this.arcG, path, \"white\", 2,'0', 'sonLine ', 'sonLine ');\r\n              // _this.drawArc(_this.arcG, x, y - r / 2, pathMidArc, \"rgb(200,200,200)\", \"white\", 'son f' + data['id'], \"9,5\", 3);\r\n            }\r\n          }\r\n\r\n        };\r\n      }\r\n      let txts = data['name'].split(\" \")\r\n      let tx = x - r - 30;\r\n      let ty = y + r + 60;\r\n      let tw = r * 2;\r\n      tx = x;\r\n      if (data['son'].length == 0) {\r\n        tx = x//-r-10;\r\n        ty = y + r * 2;\r\n      }\r\n      if (data['id'] == \"3\") {\r\n        tx = x - 10;\r\n        ty = y + r * 2;\r\n      }\r\n      if (data['id'] == \"4\") {\r\n        tx = x + 10;\r\n        ty = y + r * 2;\r\n      }\r\n      // if(data['type']=='1'){\r\n      //   tx = x-r/2;\r\n      //   ty = y+r*2;\r\n      // }\r\n\r\n      _this.drawTxt(svg, tx, ty, tw, txts, \"grey\", 16, `text_${data['id']}`);\r\n    },\r\n    drawArc(svg, x, y, arcPath, stroke, fill, className, stroke_dasharray = \"0\", width = 3, opacity = 1) {\r\n      let arc = svg.append(\"path\")\r\n        .attr(\"d\", arcPath)\r\n        .attr(\"class\", className)\r\n        .attr(\"transform\", \"translate(\" + x + \",\" + y + \")\")\r\n        .attr(\"stroke\", stroke)\r\n        .attr('stroke-width', width)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n        .attr(\"fill\", fill)\r\n        .attr(\"opacity\", opacity);\r\n      return arc;\r\n    },\r\n    drawCircle(svg, x, y, r, fill, data, opacity, className, idName) {\r\n      const _this = this;\r\n      const oData = _this.data\r\n      svg.append(\"circle\")\r\n        .attr(\"id\", idName)\r\n        .attr(\"class\", className)\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"cx\", x)\r\n        .attr(\"cy\", y)\r\n        .attr(\"r\", r)\r\n        .attr(\"fill\", fill)\r\n        .on(\"mouseover\", function (d) {\r\n          d3.select(this).attr(\"r\", r * 1.1)\r\n          let classN = d3.select(this).attr(\"class\");\r\n          let idN = d3.select(this).attr(\"id\").split(\"_\")[1]\r\n          _this.overEntityId = idN\r\n          let showRel = _this.showEntityRelIdList\r\n          if (!showRel.includes(parseInt(idN))) {\r\n            showRel.push(parseInt(idN))\r\n            _this.showEntityRelIdOverState = 0;\r\n          }\r\n          else {\r\n            _this.showEntityRelIdOverState = 1;\r\n          }\r\n          _this.showEntityRelIdList = showRel;\r\n          if (classN == 'linePoint') {\r\n            d3.select(this).attr(\"opacity\", 1).attr(\"r\", 5)\r\n          }\r\n          else {\r\n            d3.selectAll(\".f\" + data['id'])\r\n              .attr(\"transform\", function (d) {\r\n                let transformd = d3.select(this).attr(\"transform\")\r\n                return transformd.split(\" \")[0] + \" scale(1.1)\"\r\n              })\r\n\r\n            d3.selectAll(\".basicRel\")\r\n              .attr(\"class\", function (d) {\r\n                let classN = d3.select(this).attr(\"class\");\r\n                let classNList = classN.split(\" \");\r\n                let jg = 0;\r\n                for (let i = 0; i < classNList.length - 1; i++) {\r\n                  if ('source' + data['id'] == classNList[i]) { jg = 1; }\r\n                  if ('target' + data['id'] == classNList[i]) { jg = 1; }\r\n                }\r\n                if (jg == 1) {\r\n                  classN += \" activeS\";\r\n                }\r\n                return classN;\r\n              })\r\n          }\r\n        })\r\n        .on(\"mouseleave\", function (d) {\r\n          d3.select(this).attr(\"r\", r)\r\n\r\n          _this.overEntityId = _this.curEntId;\r\n          let classN = d3.select(this).attr(\"class\");\r\n\r\n          let idN = d3.select(this).attr(\"id\").split(\"_\")[1]\r\n          let showRel = _this.showEntityRelIdList\r\n          if (_this.showEntityRelIdOverState == 1) {\r\n            showRel.push(parseInt(idN))\r\n          }\r\n          else {\r\n            showRel.splice(showRel.indexOf(parseInt(idN)), 1)\r\n          }\r\n          _this.showEntityRelIdList = showRel;\r\n\r\n          if (classN == 'linePoint') {\r\n            d3.select(this).attr(\"opacity\", 0).attr(\"r\", 5)\r\n          }\r\n          else {\r\n            d3.selectAll(\".f\" + data['id'])\r\n              .attr(\"transform\", function (d) {\r\n                let transformd = d3.select(this).attr(\"transform\")\r\n                return transformd.split(\" \")[0] + \" scale(1)\"\r\n              })\r\n            d3.select(\"#graphPanel\").selectAll(\"path\")\r\n              .attr(\"class\", function (d) {\r\n                let thisSelect = d3.select(this)\r\n                let classN = thisSelect.attr(\"class\");\r\n                let classNList = classN.split(\" \")\r\n                if (classNList[classNList.length - 1] == \"activeS\") {\r\n                  classN = \"\";\r\n                  for (let i = 0; i < classNList.length - 1; i++) {\r\n                    classN += \" \" + classNList[i];\r\n                  }\r\n                }\r\n                return classN\r\n              })\r\n          }\r\n        })\r\n        .on(\"click\", function (d) {\r\n\r\n          let idN = d3.select(this).attr(\"id\").split(\"_\")[1]\r\n          let showRel = _this.showEntityRelIdList;\r\n          //  - _this.showEntityRelIdOverState;\r\n          if (!showRel.includes(parseInt(idN))) {\r\n            showRel = [(parseInt(idN))]\r\n            _this.showEntityRelIdOverState = 1;\r\n          }\r\n          else if (showRel.includes(parseInt(idN))) {\r\n            // showRel.filter(item=>{return item==parseInt(idN)})\r\n            _this.showEntityRelIdOverState = 0;\r\n            showRel.splice(showRel.indexOf(parseInt(idN)), 1)\r\n          }\r\n          _this.showEntityRelIdList = showRel;\r\n\r\n          d3.select(this).attr(\"r\", r);\r\n          d3.selectAll(\".f\" + data['id'])\r\n            .attr(\"transform\", function (d) {\r\n              let transformd = d3.select(this).attr(\"transform\")\r\n              return transformd.split(\" \")[0] + \" scale(1)\"\r\n            })\r\n          let thisId = this.id.split(\"_\")[1];\r\n          _this.curEntId = thisId;\r\n          let thisData = oData.find(function (a) { return a['id'] == thisId })\r\n          let thisTime = thisData['time'];\r\n          _this.click_Ent(thisTime);\r\n          // console.log(thisTime,thisId,thisData)\r\n        })\r\n        .on(\"contextmenu\", function (d, i) {\r\n          d.preventDefault();\r\n\r\n          if (_this.btnEdi) {\r\n            _this.editDivShow = true;\r\n            _this.$refs.editDiv.style.top = `${d.clientY}px`;\r\n            _this.$refs.editDiv.style.left = `${d.clientX}px`;\r\n          }\r\n          else {\r\n            let thisId = this.id.split(\"_\")[1];\r\n            let thisShowEntityData = _this.showEntityList.find(function (d) { return d['id'] == thisId });\r\n            let thisSons = thisShowEntityData['son'];\r\n            if (thisSons.length != 0) {\r\n              let sons = tools.deepClone(thisSons);\r\n              let showJage = false;\r\n              let i = 0\r\n              while ((sons.length > 0)) {\r\n                let s = sons[0];\r\n                sons.splice(0, 1);\r\n                let curson = _this.showEntityList.find(function (d) { return d['id'] == s + '' })\r\n                if (i == 0) {\r\n                  i++;\r\n                  showJage = !curson['show']\r\n                }\r\n                // ['show'] = !_this.showEntityList.find(function (d) { return d['id'] == thisSons[s] })['show']\r\n                curson['show'] = showJage;\r\n                let curgson = curson['son'];\r\n                if (!showJage) {\r\n                  for (let gs = 0; gs < curgson.length; gs++) {\r\n                    sons.push(curgson[gs]);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          _this.updataGraph()\r\n        });\r\n      // .on(\"\")\r\n    },\r\n    drawRect(svg, x, y, w, h, rx, ry, fill, opacity, stroke, id = 'rect', strokeW = 1.5, classN = 'rect') {\r\n      d3.select(`#${id}`).remove()\r\n      let rect = svg.append(\"rect\")\r\n        .attr(\"id\", id)\r\n        .attr(\"class\", classN)\r\n        .attr(\"x\", x)\r\n        .attr(\"y\", y)\r\n        .attr(\"rx\", rx)\r\n        .attr(\"ry\", ry)\r\n        .attr(\"height\", h)\r\n        .attr(\"width\", w) //刚才设置的块的宽度\r\n        .attr(\"fill\", fill)\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"stroke\", stroke)\r\n        .attr(\"stroke-width\", `${strokeW}px`);\r\n      return rect;\r\n    },\r\n    drawTxt(svg, x, y, width, txts, fill, fontsize = 12, idN, classN = \"text\") {\r\n      let tx = x;\r\n      let ty = y;\r\n      let preWidth = 0;\r\n      let preIdN = 0;\r\n      let pretext = ''\r\n      for (let t = 0; t < txts.length; t++) {\r\n        pretext += \" \" + txts[t];\r\n        let txt = svg.append(\"text\")\r\n          .attr(\"y\", ty)\r\n          .attr(\"x\", tx)\r\n          .attr(\"id\", `${idN}_${t}`)\r\n          .attr(\"class\", `${classN}`)\r\n          .attr(\"fill\", fill)\r\n          .attr(\"font-size\", fontsize)\r\n          .style(\"text-anchor\", \"middle\")\r\n          .text(pretext)\r\n        let textWidth = document.getElementById(`${idN}_${t}`).getBBox().width;\r\n        if ((textWidth > width) || (t == txts.length - 1)) {\r\n          pretext = '';\r\n          tx = x;\r\n          ty += 25;\r\n        }\r\n        else {\r\n          txt.remove()\r\n        }\r\n        preWidth += textWidth;\r\n      }\r\n    },\r\n    drawTimeLine(svg, path, stroke, width, stroke_dasharray = \"0\", idName, className) {\r\n      svg.append('path')\r\n        .attr('d', path.toString())\r\n        .attr('stroke', stroke)\r\n        .attr('class', className)\r\n        .attr('id', idName)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr('stroke-width', width)\r\n        .attr('fill', 'none')\r\n        .on('mouseover', function (d) {\r\n          let thisSelect = d3.select(this)\r\n          let classN = thisSelect.attr(\"class\");\r\n          let idN = thisSelect.attr(\"id\");\r\n          if (classN.split(\" \")[0] == \"basicRel\") {\r\n            d3.select(this).attr(\"class\", classN + \" activeS\");\r\n          }\r\n        })\r\n        .on('mouseleave', function (d) {\r\n          let thisSelect = d3.select(this)\r\n          let classN = thisSelect.attr(\"class\");\r\n          let classNList = classN.split(\" \")\r\n          if (classNList[classNList.length - 1] == \"activeS\") {\r\n            classN = \"\";\r\n            for (let i = 0; i < classNList.length - 1; i++) {\r\n              classN += classNList[i] + \" \";\r\n            }\r\n            d3.select(this).attr(\"class\", classN);\r\n          }\r\n        })\r\n    },\r\n    transformGraphSvg(flag) {\r\n      const _this = this;\r\n      let groups = _this.groupsSvg;\r\n\r\n      let scalePre = _this.graphSvgScale;\r\n\r\n      let margin = _this.margin;\r\n      if (flag == 'left') {\r\n        _this.graphGTransformX += 10;\r\n      }\r\n      if (flag == 'right') {\r\n        _this.graphGTransformX -= 10;\r\n      }\r\n      // groups.attr('transform', 'translate(' + (_this.graphGTransformX) + ',' + (margin.top) + ') scale(' + (scalePre) + ')')\r\n    },\r\n    updataAssistGraphPanel() {\r\n      const _this = this;\r\n      var content = this.groupsSvg.html();\r\n      let height = document.getElementById(\"assistGraphPanel\").clientHeight;\r\n      let width = document.getElementById(\"assistGraphPanel\").clientWidth;\r\n      d3.select('#assistGraphPanel').select('svg').remove();\r\n      let transX = _this.assistGTransformX;\r\n      let transY = _this.assistGTransformY;\r\n      var div = d3.select('#assistGraphPanel')\r\n        .append('svg')\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n        .append(\"g\")\r\n        .attr(\"transform\", `translate(${transX},${transY})`)\r\n        .html(content);\r\n    },\r\n    moveGraphLeft(e) {\r\n      const _this = this;\r\n      _this.moveFlag == true;\r\n      clearInterval(this.moveTimer)// 清除定时器\r\n      this.moveTimer = setInterval(() => { _this.transformGraphSvg(\"left\") }, 10)//_this.transformGraphSvg('left'), 100);\r\n    },\r\n    moveGraphRight(e) {\r\n      const _this = this;\r\n      // console.log(\"⚡🐲🫧❄️👁️\",e)\r\n      clearInterval(this.moveTimer)// 清除定时器\r\n      _this.moveFlag == true;\r\n      this.moveTimer = setInterval(() => { _this.transformGraphSvg(\"right\") }, 10)//_this.transformGraphSvg('left'), 100);\r\n    },\r\n    leaveGraphMove() {\r\n      // this.moveFlag == false;\r\n      clearInterval(this.moveTimer)// 清除定时器\r\n      // this.graphGTransformX = 0;\r\n    },\r\n    updataGraph() {\r\n      var _this = this;\r\n      let margin = _this.margin\r\n      let width = _this.$refs.graphDiv.offsetWidth - margin.left - margin.right;\r\n      let height = document.getElementById(\"graphPanel\").clientHeight - margin.top - margin.bottom;\r\n      let heightTimeAxis = document.getElementById(\"graphTimeAxisPanel\").clientHeight - margin.top - margin.bottom;\r\n      _this.width = width;\r\n      _this.height = height;\r\n      d3.select(\"#graphPanel\").select(\"svg\").remove()\r\n      var svg = d3.select(\"#graphPanel\").append(\"svg\")\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height);\r\n      _this.rootSvg = svg;\r\n      d3.select(\"#graphTimeAxisPanel\").select(\"svg\").remove()\r\n      var TimeAxisSvg = d3.select(\"#graphTimeAxisPanel\").append(\"svg\")\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height);\r\n      _this.TimeAxisSvg = TimeAxisSvg;\r\n      let data = _this.data;\r\n\r\n      let maxDImportance = Math.max.apply(Math, data.map(function (d) { return d['attribute']['importance']; }))\r\n      let minDImportance = Math.min.apply(Math, data.map(function (d) { return d['attribute']['importance']; }))\r\n      let maxDRelevance = Math.max.apply(Math, data.map(function (d) { return d['attribute']['relevance']; }))\r\n      let minDRelevance = Math.min.apply(Math, data.map(function (d) { return d['attribute']['relevance']; }))\r\n      let maxDDuration = Math.max.apply(Math, data.map(function (d) { return tools.time2seconds(d['time'][1]) - tools.time2seconds(d['time'][0]); }))\r\n      let maxTotalDuration = Math.max.apply(Math, data.map(function (d) { return d['totalDuration']; }))\r\n      _this.drawEntityLocation = [];\r\n      _this.minDImportance = minDImportance;\r\n      _this.maxDImportance = maxDImportance;\r\n      _this.minDRelevance = minDRelevance;\r\n      _this.maxDRelevance = maxDRelevance;\r\n      _this.maxDDuration = maxDDuration;\r\n      _this.maxTotalDuration = maxTotalDuration;\r\n\r\n      let currentMaxColor = _this.importanceMaxColor;\r\n      let currentMinColor = _this.importanceMinColor;\r\n      _this.importanceColor_linear = d3.scaleLinear().domain([minDImportance, maxDImportance]).range([0, 1]);\r\n      _this.importanceCompute_color = d3.interpolate(currentMinColor, currentMaxColor);\r\n      _this.relevanceScale_linear = d3.scaleLinear([minDRelevance, maxDRelevance], [20, 50])\r\n      _this.totalDurationScale_linear = d3.scaleLinear().domain([0, maxTotalDuration]).range([20, 60]);\r\n\r\n      _this.drawMain(svg);\r\n      // });\r\n    },\r\n    zoomInLayoutClk() {\r\n      const _this = this;\r\n      _this.layoutShow += 1;\r\n      if (_this.layoutShow > 3) {\r\n        _this.layoutShow = 3;\r\n      }\r\n      // _this.updataGraph();\r\n    },\r\n    recognize0:async()=>{\r\n      // let worker = _this.worker;\r\n      console.log(worker)\r\n      await worker.loadLanguage('eng_sim');\r\n      await worker.initialize('eng_sim', OEM.LSTM_ONLY);\r\n      await worker.setParameters({\r\n        tessedit_pageseg_mode: PSM.SINGLE_BLOCK,\r\n      });\r\n\r\n    },\r\n    zoomOutLayoutClk() {\r\n      const _this = this;\r\n      _this.layoutShow -= 1;\r\n      if (_this.layoutShow < 0) {\r\n        _this.layoutShow = 0;\r\n      }\r\n      // _this.updataGraph();\r\n\r\n    },\r\n    click_Ent(time) {\r\n      this.$emit(\"timeDur\", time);\r\n    },\r\n  },\r\n  created() {\r\n    var _this = this;\r\n    let margin = _this.margin\r\n    this.$nextTick(() => {\r\n      // _this.scheduler = createScheduler();\r\n      //  scheduler.addWorker(_this.worker);\r\n      _this.updataGraph();\r\n      _this.updataAssistGraphPanel();\r\n    });\r\n  },\r\n  mounted() {\r\n    const _this = this;\r\n    let width = _this.$refs.graphDiv.offsetWidth;\r\n    let height = _this.height;\r\n    let showEntityList = tools.deepClone(_this.data);\r\n    for (let e in showEntityList) {\r\n      showEntityList[e]['show'] = true;\r\n    }\r\n      // worker \r\n    _this.showEntityList = showEntityList;\r\n    // let width = _this.width;\r\n    this.$bus.$on('graphData', (val) => {\r\n      _this.data = val;\r\n      let showEntityList = tools.deepClone(_this.data);\r\n      for (let e in showEntityList) {\r\n        showEntityList[e]['show'] = true;\r\n      }\r\n      _this.showEntityList = showEntityList;\r\n      _this.updataGraph();\r\n    });\r\n    this.$bus.$on('switchL', (val) => {\r\n      _this.switchL = val;\r\n    });\r\n\r\n    // this.$refs.moveGraphLeft.addEventListener(\"mouseover\", _this.moveGraphLeft); // 监听点击事件\r\n    // this.$refs.moveGraphRight.addEventListener(\"mousemove\", _this.moveGraphRight); // 监听点击事件\r\n    // this.$refs.moveGraphLeft.addEventListener(\"mouseleave\", _this.leaveGraphMove); // 监听点击事件\r\n    // this.$refs.moveGraphRight.addEventListener(\"mouseleave\", _this.leaveGraphMove); // 监听点击事件\r\n\r\n  },\r\n  beforeDestroy() {\r\n    clearInterval(this.moveTimer);\r\n  },\r\n} \r\n</script>\r\n\r\n<style>@import './index.css';</style>\r\n"],"sourceRoot":"src/components/Graph"}]}