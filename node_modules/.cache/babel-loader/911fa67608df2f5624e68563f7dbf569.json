{"remainingRequest":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\babel-loader\\lib\\index.js!D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Cailibuhong\\video2Graph\\video2Graph\\src\\components\\EditPanel\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\src\\components\\EditPanel\\index.vue","mtime":1680315860658},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\babel.config.js","mtime":1647570572000},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1688115046166},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\babel-loader\\lib\\index.js","mtime":1688115046651},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1688115046166},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\vue-loader\\lib\\index.js","mtime":1688115046800}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<!-- eslint-disable no-unused-vars -->\r\n<!-- eslint-disable no-unused-vars -->\r\n\r\n<template>\r\n  <div class=\"editPanel\">\r\n    <div class=\"panelHead\">SupportPanel</div>\r\n    <div id=\"editPanelDiv\" class=\"panelBody\" ref=\"editPanelDiv\">\r\n      <div id=\"topicLine\" ref=\"topicLine\"></div>\r\n      <!-- <div id=\"rootTree\" ref=\"rootTree\">\r\n        <div id=\"toolsButs\">\r\n          <el-collapse accordion>\r\n            <el-collapse-item>\r\n              <template slot=\"title\">\r\n                <img class=\"iconUpload\" :src=\"toolsButsUrl\">\r\n              </template>\r\n              <div id=\"addNodeSonDiv\" class=\"toolsBut\" @click=\"addNodeSonClk\">\r\n                <img class=\"iconUpload\" :src=\"addNodeSonUrl\">\r\n              </div>\r\n              <div id=\"addNodePerDiv\" class=\"toolsBut\" @click=\"addNodePerClk\">\r\n                <img class=\"iconUpload\" :src=\"addNodePerUrl\">\r\n              </div>\r\n              <div id=\"addLinkBasicDiv\" class=\"toolsBut\" @click=\"addLinkBasicClk\">\r\n                <img class=\"iconUpload\" :src=\"addLinkBasicUrl\">\r\n              </div>\r\n            </el-collapse-item>\r\n          </el-collapse>\r\n        </div>\r\n      </div> -->\r\n      <div id=\"editData\" ref=\"editData\">\r\n        <el-table class=\"editTable\" :data=\"tableData\" style=\"width: 100%\">\r\n          <el-table-column prop=\"key\" label=\"\" width=\"260\">\r\n          </el-table-column>\r\n          <el-table-column prop=\"value\" label=\"\" width=\"260\">\r\n            <template slot-scope=\"scope\">\r\n              <div v-if=\"scope.row.key == 'type'\">\r\n                <el-radio-group v-model=\"typeRadio\" size=\"small\" @change=\"selectType\">\r\n                  <el-radio-button label=\"cell State\"></el-radio-button>\r\n                  <el-radio-button label=\"hidden State\"></el-radio-button>\r\n                </el-radio-group>\r\n              </div>\r\n              <div v-if=\"scope.row.key == 'lecture style'\">\r\n                <div class=\"block\">\r\n                  <el-slider v-model=\"lectureStyleValue\" range>\r\n                  </el-slider>\r\n                </div>\r\n              </div>\r\n              <div v-if=\"scope.row.key == 'name'\">\r\n                <el-input size=\"small\" :placeholder=\"scope.row.value\" v-model=\"nameinput\" clearable>\r\n                </el-input>\r\n              </div>\r\n              <div :class=\"scope.row.key + ' tableCell'\" :height=\"scope.row.value === '' ? '10' : '0'\"\r\n                disable-transitions>\r\n                <!-- {{ scope.row.value }} -->\r\n              </div>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n        <div id=\"cancelDiv\" @click=\"cancelClk\">\r\n          <img class=\"iconUpload\" :src=\"cancelUrl\">\r\n        </div>\r\n        <div id=\"confirmDiv\" @click=\"confirmClk\">\r\n          <img class=\"iconUpload\" :src=\"confirmUrl\">\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nimport * as d3 from 'd3'\r\nimport { onMounted, ref } from 'vue';\r\nimport filenames from \"@/utils/fileName\";\r\nimport domtoimage from 'dom-to-image';\r\nimport TestJson from \"@/assets/json/case2_fin.json\";\r\nimport TestRelJson from \"@/assets/json/case2_fin_rel.json\";\r\nimport tools from \"@/utils/tools.js\";\r\nimport { tree } from 'd3';\r\nimport { SourceNode } from 'source-list-map';\r\n\r\nexport default {\r\n  props: [],\r\n  data() {\r\n    return {\r\n      typeRadio: \"cell State\",\r\n      data: TestJson,\r\n      relData: TestRelJson,\r\n      treeData: null,\r\n      toolsState: '',\r\n      confirmUrl: require(\"@/assets/img/confirm.svg\"),\r\n      cancelUrl: require(\"@/assets/img/cancel.svg\"),\r\n      toolsButsUrl: require(\"@/assets/img/toolsButs.png\"),\r\n      addNodeSonUrl: require(\"@/assets/img/addNode1.png\"),\r\n      addNodePerUrl: require(\"@/assets/img/addNode2.png\"),\r\n      addLinkBasicUrl: require(\"@/assets/img/addLink.png\"),\r\n      // nameinput: \"Random Variables\",\r\n      nameinput: \"Fundamental Graphs\",\r\n      // nameinput: \"Trees\",\r\n      lectureStyleValue: [0, 80],\r\n      tableData: [{\r\n        key: 'type',\r\n        value: '',\r\n      }, {\r\n        key: 'name',\r\n        value: '',\r\n      }, {\r\n        key: 'lecture style',\r\n        value: '',\r\n      }],\r\n      curEntId: \"\",\r\n      insertEntId: \"\",\r\n      insertSourceEntId: \"-1\",\r\n      insertTargetEntId: \"-1\",\r\n      sonList: [],\r\n      minDImportance: 0,\r\n      maxDImportance: 0,\r\n      minDRelevance: 0,\r\n      maxDRelevance: 0,\r\n      maxDDuration: 0,\r\n      maxTotalDuration: 0,\r\n      importanceMinColor: \"rgb(203, 230, 209)\",\r\n      importanceMaxColor: \"rgb(22, 144, 207)\",\r\n      totalDuration: 1000,\r\n      importanceColor_linear: null,\r\n      importanceCompute_color: null,\r\n      relevanceScale_linear: null,\r\n      totalDurationScale_linear: null,\r\n      DivisionDataList: [],\r\n      rootDivisionDataList: [],\r\n      entDivisionDataList: [],\r\n      colorMap: {},\r\n      rootColorMap:{},\r\n      videoDuration: 570,\r\n      selectRectId: \"\",\r\n      selectRectClass: \"\",\r\n      topicLineWidth: 1000,\r\n      topicLineHeight: 1000,\r\n      moveLineWidth: 1000,\r\n      entLineWidth: 1000,\r\n      totalSonDuration: 0,\r\n      treeGTransformK:1,\r\n      treeGTransformX:10,\r\n      treeGTransformY:100,\r\n      margin: { top: 5, right: 5, bottom: 5, left: 5 },\r\n      // mcolor: [\r\n      //   \"rgb(255,60,60)\",\r\n      //   \"rgb(155,20,100)\",\r\n      //   \"rgb(255,83,255)\",\r\n      //   \"rgb(200,100,50)\",\r\n      //   \"rgb(235,135,162)\",\r\n      //   \"rgb(200,200,102)\",\r\n      //   \"rgb(255,178,101)\",\r\n      //   \"rgb(63,151,134)\",\r\n      //   \"rgb(83,155,255)\",\r\n      //   \"rgb(50,200,120)\",\r\n      //   \"rgb(2,50,200)\",\r\n      //   \"rgb(0,122,244)\",\r\n      //   \"rgb(150,122,244)\",\r\n      //   \"rgb(168,168,255)\",\r\n      //   \"rgb(200,200,200)\",\r\n      // ],\r\n      mcolor: [\r\n        \"rgb(91, 107, 255)\",\r\n        \"rgb(6, 214, 160)\",\r\n        \"rgb(255, 120, 90)\",\r\n        \"rgb(125, 98, 211)\",\r\n        \"rgb(255, 113, 212)\",\r\n        \"rgb(112, 214, 255)\",\r\n        \"rgb(255, 159, 28)\",\r\n        \"rgb(255, 77, 109)\",\r\n      ],\r\n      mLightcolor: [\r\n        \"#ff9c9c\",\r\n        \"#cc88b0\",\r\n        \"#ffa8ff\",\r\n        \"#e3b097\",\r\n        \"#f4c3d0\",\r\n        \"#f4f4d0\",\r\n        \"#ffd8b1\",\r\n        \"#9ecac2\",\r\n        \"#a8ccff\",\r\n        \"#97e3ba\",\r\n        \"#6f8be0\",\r\n        \"rgb(0,122,244)\",\r\n        \"#b6a2f7\",\r\n        \"rgb(168,168,255)\",\r\n        \"rgb(200,200,200)\",\r\n      ],\r\n    };\r\n  },\r\n  watch: {\r\n    typeRadio(val) {\r\n    },\r\n    lectureStyleValue(val){\r\n      console.log(val);\r\n      let mid = (val[0]+val[1])/2;\r\n      d3.select(\"#editData .el-slider__runway\")\r\n      .attr(\"style\",\"background: linear-gradient(90deg, #ff9c9c \"+mid+\"%,#6f8be0 \"+mid+\"%) !important\")\r\n    },\r\n    type(val) {\r\n    },\r\n    // selectEnt(val){\r\n    //   console.log(val);\r\n    // },\r\n    curEntId(curEntId) {\r\n      const _this = this;\r\n      let data = _this.data;\r\n      let curEnt = data.find(function (d) { return d['id'] == curEntId; });\r\n      if (curEnt['type'] == '1') {\r\n        _this.typeRadio = \"hidden State\";\r\n      }\r\n      else {\r\n        _this.typeRadio = \"cell State\";\r\n      }\r\n      _this.nameinput = curEnt['name'];\r\n      let duration = tools.time2seconds(curEnt['time'][1]) - tools.time2seconds(curEnt['time'][0]);\r\n      let typeDurScale_linear = d3.scaleLinear([0, duration], [0, 100]);\r\n      let typeData = curEnt[\"attribute\"][\"expressions\"];\r\n      let typeDur = 0;\r\n      let styleValue = [];\r\n      for (let i in typeData) {\r\n        // let color = typeColor[i];\r\n        let typeDurition = typeData[i];\r\n        let totalTypeSeconds = 0;\r\n        for (let d in typeDurition) {\r\n          totalTypeSeconds += (tools.time2seconds(typeDurition[d][1]) - tools.time2seconds(typeDurition[d][0]))\r\n        }\r\n        typeDur += totalTypeSeconds;\r\n        styleValue.push(typeDurScale_linear(typeDur))\r\n      }\r\n\r\n      _this.lectureStyleValue = styleValue\r\n      _this.drawEntity(curEnt);\r\n      _this.drawSonLine(curEnt);\r\n    }\r\n  },\r\n  methods: {\r\n    selectType(v) {\r\n      // console.log(v)\r\n    },\r\n    cancelClk() {\r\n      const _this = this;\r\n      let data = _this.data;\r\n      let curEntId = _this.curEntId;\r\n      let curEnt = data.find(function (d) { return d['id'] == curEntId; });\r\n      _this.drawEntity(curEnt);\r\n      _this.drawSonLine(curEnt);\r\n      _this.drawrootTree();\r\n\r\n    },\r\n    confirmClk() {\r\n      const _this = this;\r\n      let data = _this.data;\r\n      let curEntId = _this.curEntId;\r\n      let curEnt = data.find(function (d) { return d['id'] == curEntId; });\r\n      if (_this.typeRadio == \"hidden State\") {\r\n        curEnt['type'] = '1'\r\n      }\r\n      else {\r\n        curEnt['type'] = '0';\r\n      }\r\n      curEnt['name'] = _this.nameinput;\r\n\r\n      let styleValue = _this.lectureStyleValue;\r\n      let startSeconds = tools.time2seconds(curEnt['time'][0]);\r\n      let endSeconds = tools.time2seconds(curEnt['time'][1]);\r\n      let totalSeconds = endSeconds - startSeconds;\r\n      let typeDurReScale_linear = d3.scaleLinear([0, 100], [startSeconds, endSeconds]);\r\n      let typeData = { \"1\": [], \"2\": [], \"3\": [] };//;\r\n      let t1 = tools.seconds2time(typeDurReScale_linear(styleValue[0]));\r\n      let t2 = tools.seconds2time(typeDurReScale_linear(styleValue[1]));\r\n      typeData['1'].push([curEnt['time'][0], t1]);\r\n      typeData['2'].push([t1, t2]);\r\n      typeData['3'].push([t2, curEnt['time'][1]]);\r\n      curEnt[\"attribute\"][\"expressions\"] = typeData;\r\n\r\n      let entRects = d3.selectAll(\".editEnt\").nodes();\r\n      console.log(entRects)\r\n      let totalSonDuration = _this.totalSonDuration;\r\n      let wid = _this.entLineWidth;\r\n      let cxReLinear = d3.scaleLinear([0, wid], [0, totalSonDuration]);\r\n      let preTime = '';\r\n      let typeTotalData = { \"1\": [], \"2\": [], \"3\": [] };//;\r\n      for (let n = 0; n < entRects.length; n++) {\r\n        let curRect = entRects[n];\r\n        let rectId = curRect.id.split(\"_\")[1];\r\n        let rectData = data.find(function (d) { return d['id'] == rectId; });\r\n        let perDur = tools.time2seconds(rectData['time'][1]) - tools.time2seconds(rectData['time'][0]);\r\n        if (n == 0) {\r\n          preTime = rectData['time'][0];\r\n        }\r\n        let preSecond = tools.time2seconds(preTime);\r\n        let x = curRect.x.baseVal.value;\r\n        let w = curRect.width.baseVal.value;\r\n        let durSecond = cxReLinear(w);\r\n        let endTime = tools.seconds2time(preSecond + durSecond);\r\n        rectData['time'] = [preTime, endTime];\r\n        rectData['totalDuration'] += durSecond - perDur;\r\n        preTime = endTime;\r\n        for (let t in typeTotalData) {\r\n          typeTotalData[t] = [...typeTotalData[t], ...rectData['attribute']['expressions'][t]]\r\n        }\r\n      }\r\n      console.log(typeTotalData)\r\n      _this.data = data;\r\n      // console.log(entRects,entRects[0])\r\n\r\n      _this.drawEntity(curEnt);\r\n      _this.drawSonLine(curEnt);\r\n      _this.drawrootTree();\r\n      _this.$bus.$emit(\"graphData\", data);\r\n    },\r\n    click_node() {\r\n      const _this = this;\r\n      let nodeId = _this.curEntId;\r\n      let addDataId = _this.insertEntId;//parseInt(nodeId)+1+'';\r\n      let oriData = _this.data;\r\n      let state = _this.toolsState;\r\n      let returnData = [];\r\n      let returnRelData = {};\r\n      let relData = _this.relData;\r\n\r\n      if (state == 'addNodeSon') {\r\n        for (let i = 0; i < oriData.length; i++) {\r\n          let cData = oriData[i];\r\n          let cDataId = cData['id']\r\n          \r\n          let sons = cData['son'];\r\n          let sonsNew = [];\r\n          for(let s=0;s<sons.length;s++){\r\n            let ss = sons[s]\r\n              if(parseInt(ss)>=parseInt(addDataId)) ss = parseInt(ss)+1\r\n              sonsNew.push(ss+'')\r\n          }\r\n          cData['son'] = sonsNew;\r\n\r\n          if (parseInt(cDataId) == parseInt(addDataId)) {\r\n            let perData = tools.deepClone(cData);\r\n            let addData = tools.deepClone(perData);\r\n            addData['id'] = addDataId;\r\n            perData['id'] = (parseInt(addDataId) + 1)+'';\r\n            console.log(addData,perData)\r\n            let startT = cData['time'][0];\r\n            let endT = cData['time'][1];\r\n            let midT = tools.seconds2time((tools.time2seconds(endT) + tools.time2seconds(startT)) / 2);\r\n            addData['time'] = [startT, midT];\r\n            perData['time'] = [midT, endT];\r\n            addData['son'] = [];\r\n            addData['totalDuration'] = (tools.time2seconds(midT) - tools.time2seconds(startT));\r\n            perData['totalDuration'] -= addData['totalDuration'];\r\n            let typeTimes = perData['attribute']['expressions'];\r\n            let typePreData = { \"1\": [], \"2\": [], \"3\": [] };\r\n            let typeAddData = { \"1\": [], \"2\": [], \"3\": [] };\r\n            for (let t in typeTimes) {\r\n              for (let a = 0; a < typeTimes[t].length; a++) {\r\n                let st = typeTimes[t][a][0];\r\n                let et = typeTimes[t][a][1];\r\n                if (tools.time2seconds(et) <= tools.time2seconds(midT)) { typeAddData[t].push([st, et]) }\r\n                else if (tools.time2seconds(st) >= tools.time2seconds(midT)) { typePreData[t].push([st, et]) }\r\n                else if ((tools.time2seconds(st) < tools.time2seconds(midT)) && (tools.time2seconds(et) > tools.time2seconds(midT))) {\r\n                  typeAddData[t].push([st, midT]);\r\n                  typePreData[t].push([midT, et]);\r\n                }\r\n              }\r\n            }\r\n            perData['attribute']['expressions'] = typePreData;\r\n            addData['attribute']['expressions'] = typeAddData;\r\n            returnData.push(addData);\r\n            returnData.push(perData);\r\n          }\r\n          else if (parseInt(cData['id']) < parseInt(addDataId)) {\r\n            returnData.push(tools.deepClone(cData));\r\n          }\r\n          else if (parseInt(cData['id']) > parseInt(addDataId)){\r\n            let perData = tools.deepClone(cData);\r\n            perData['id'] = (parseInt(cDataId) + 1) + '';\r\n            returnData.push(perData);\r\n          }\r\n\r\n        }\r\n      \r\n      let bsNew = [];\r\n      let basicRel = relData['basicRel'];\r\n      for (let r = 0; r < basicRel.length; r++) {\r\n        let sourceId = basicRel[r][0];\r\n        let targetId = basicRel[r][1];\r\n        if(parseInt(sourceId)>=parseInt(addDataId)) sourceId = parseInt(sourceId)+1;\r\n        if(parseInt(targetId)>=parseInt(addDataId)) targetId = parseInt(targetId)+1;\r\n        bsNew.push([sourceId+'',targetId+''])\r\n      }\r\n      let ssNew = []\r\n      let similarityRel = relData['similarityRel'];\r\n      for (let r = 0; r < similarityRel.length; r++) {\r\n        let sourceId = similarityRel[r][0];\r\n        let targetId = similarityRel[r][1];\r\n        if(parseInt(sourceId)>=parseInt(addDataId)) sourceId = parseInt(sourceId)+1;\r\n        if(parseInt(targetId)>=parseInt(addDataId)) targetId = parseInt(targetId)+1;\r\n        ssNew.push([sourceId+'',targetId+''])\r\n      }\r\n      returnRelData = {'basicRel':bsNew,'similarityRel':ssNew};\r\n      let nData = returnData.find(function(d){return d['id'] == nodeId});\r\n      let aData = returnData.find(function(d){return d['id'] == addDataId});\r\n      if(nodeId!='-1'){\r\n        nData['son'].push(addDataId);\r\n        aData['layout'] = parseInt(nData['layout']+1);\r\n        aData['father'] = [nodeId];\r\n      }\r\n      else{\r\n        aData['layout'] = '0';\r\n      }\r\n      _this.data = (returnData);\r\n      _this.relData = returnRelData;\r\n      _this.getTreeData();\r\n      _this.updata();\r\n      }\r\n      if (state == 'addLinkBasic') {\r\n        let addSourceDataId = _this.insertSourceEntId;\r\n        let addTargetDataId = _this.insertTargetEntId;\r\n        if((addSourceDataId != '-1')&&(addTargetDataId != '-1')){\r\n          returnRelData =  tools.deepClone(relData);\r\n          returnRelData['basicRel'].push([addSourceDataId,addTargetDataId]);\r\n          _this.insertSourceEntId = '-1';\r\n          _this.insertTargetEntId = '-1';\r\n          _this.relData = returnRelData;\r\n          _this.getTreeData();\r\n          _this.updata();\r\n        }\r\n      }\r\n    },\r\n    addNodeSonClk() {\r\n      this.toolsState = 'addNodeSon';\r\n    },\r\n    addNodePerClk() {\r\n      this.toolsState = 'addNodePer';\r\n    },\r\n    addLinkBasicClk() {\r\n      this.toolsState = 'addLinkBasic';\r\n    },\r\n    drawtopicLine() {\r\n      const _this = this;\r\n      const margin = _this.margin;\r\n      const color = _this.mcolor;\r\n\r\n      let width = this.$refs.topicLine.offsetWidth - margin.left - margin.right;\r\n      let height = this.$refs.topicLine.offsetHeight - margin.top - margin.bottom;\r\n      _this.topicLineWidth = width;\r\n      _this.topicLineHeight = height;\r\n      d3.select(\"#topicLine\").select(\"svg\").remove();\r\n      var svg = d3.select(\"#topicLine\").append(\"svg\")\r\n        .attr(\"id\", \"topicLineSvg\")\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height);\r\n\r\n      let groups = svg.append(\"g\").attr(\"id\", \"groups\").attr(\"width\", width).attr(\"height\", height);\r\n      let rootEntG = groups.append(\"g\").attr(\"id\", \"rootEntG\").attr(\"width\", width).attr(\"height\", height);\r\n      let oriLineG = groups.append(\"g\").attr(\"id\", \"oriLineG\").attr(\"width\", width).attr(\"height\", height);\r\n\r\n      oriLineG.append(\"line\")\r\n        .attr(\"x1\", 0)\r\n        .attr(\"y1\", height / 2)\r\n        .attr(\"x2\", width)\r\n        .attr(\"y2\", height / 2)\r\n        .attr(\"stroke\", \"rgb(200,200,200)\")\r\n        .attr(\"stroke-width\", \"5px\");\r\n\r\n      let cxLinear = d3.scaleLinear([0, _this.videoDuration], [margin.left, width])\r\n\r\n      let data = tools.deepClone(_this.data);\r\n      let DivisionDataList = [];\r\n      let colorIndex = 0;\r\n      for (let i = 0; i < data.length; i++) {\r\n        if (data[i]['layout'] == '0') {\r\n          if (DivisionDataList.length != 0) {\r\n            DivisionDataList[DivisionDataList.length - 1]['nextId'] = data[i]['id'];\r\n            data[i]['preId'] = DivisionDataList[DivisionDataList.length - 1]['id'];\r\n          }\r\n          else { data[i]['preId'] = \"-1\"; }\r\n          DivisionDataList.push(data[i]);\r\n          let time = tools.time2seconds(data[i]['time'][0]);\r\n          let endTime = tools.time2seconds(data[i]['time'][0]) + data[i]['totalDuration'];\r\n          let cx = cxLinear(time);\r\n          let endx = cxLinear(endTime);\r\n          _this.colorMap[data[i]['id']] = colorIndex % color.length;\r\n          _this.drawRect(oriLineG, cx - 5, height / 2 - 5, 10, 10, height / 2, \"division_\" + data[i][\"id\"], \"rootdivisionLine\", \"rgb(250,250,250)\", 0, '', 1)\r\n          _this.drawRect(rootEntG, cx, margin.top, endx - cx, height - margin.top - margin.bottom, height / 2, \"rootEnt_\" + data[i]['id'], \"rootEnt\", color[_this.colorMap[data[i]['id']]], 5, \"rgb(150,150,150)\", 0.1)\r\n          colorIndex++;\r\n        }\r\n      }\r\n      DivisionDataList[DivisionDataList.length - 1]['nextId'] = \"-1\";\r\n      _this.rootDivisionDataList = DivisionDataList;\r\n\r\n      // oriLineG.append(\"ellipse\")\r\n      // .attr(\"cx\",50)\r\n      // .attr(\"cy\",height/2)\r\n      // .attr(\"rx\",50)\r\n      // .attr(\"ry\",height/2)\r\n      // .attr(\"fill\",color[3])\r\n      // .attr(\"stroke\", color[3])\r\n\r\n      // .attr(\"stroke-width\", \"5px\");\r\n      // console.log(data)\r\n      // this.$bus.$emit(\"getData\",data)\r\n    },\r\n    drawRect(svg, x, y, w, h, rx, idName, className, fill, strokeWidth, stroke, opacity) {\r\n      const _this = this;\r\n      svg.append(\"rect\")\r\n        .attr(\"x\", x)\r\n        .attr(\"y\", y)\r\n        .attr(\"id\", idName)\r\n        .attr(\"class\", className)\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"width\", w)\r\n        .attr(\"height\", h)\r\n        .attr(\"fill\", fill)\r\n        .attr(\"rx\", rx)\r\n        .attr(\"stroke\", stroke)//\"rgb(150,150,150)\")\r\n        .attr(\"stroke-width\", strokeWidth)\r\n        .on(\"mousedown\", function (d) {\r\n          _this.selectRectId = idName.split(\"_\")[1] //d3.select(this).attr(\"id\");\r\n          if (d3.select(this).attr(\"class\") == \"rootdivisionLine\") {\r\n            _this.selectRectClass = \"rootEnt\";\r\n            _this.moveLineWidth = _this.topicLineWidth;\r\n            _this.DivisionDataList = _this.rootDivisionDataList;\r\n            // document.getElementById('topicLineSvg').addEventListener(\"mousemove\", _this.moveRect); // 监听点击事件\r\n          }\r\n          else if (d3.select(this).attr(\"class\") == \"entdivisionLine\") {\r\n            _this.selectRectClass = \"editEnt\";\r\n            _this.moveLineWidth = _this.entLineWidth;\r\n            _this.DivisionDataList = _this.entDivisionDataList;\r\n            document.getElementById('editEnt').addEventListener(\"mousemove\", _this.moveRect); // 监听点击事件\r\n          }\r\n        })\r\n        .on(\"mouseup\", function (d) {\r\n          // document.getElementById('topicLineSvg').removeEventListener(\"mousemove\", _this.moveRect); // \r\n          document.getElementById('editEnt').removeEventListener(\"mousemove\", _this.moveRect); // \r\n          // _this.$bus.$emit(\"graphData\", _this.data);\r\n\r\n          _this.$bus.$emit(\"treeData\", _this.treeData);\r\n        })\r\n    },\r\n    moveRect(e) {\r\n      const _this = this;\r\n      let selectRect = _this.DivisionDataList.find(function (d) { return d['id'] == _this.selectRectId; })//右边的rect\r\n      let preId = selectRect['preId'];//左边的rect\r\n      let nextId = selectRect['nextId'];//右边的右边rect\r\n      let rectClass = _this.selectRectClass;\r\n      let prex = 0;\r\n      if (preId != '-1') {\r\n        prex = d3.select(\"#\" + rectClass + \"_\" + preId).attr(\"x\")\r\n        d3.select(\"#\" + rectClass + \"_\" + preId)\r\n          .attr(\"width\", function (d) {\r\n            return e.offsetX - prex;\r\n          })\r\n      }\r\n      let nextX = 100;\r\n      if (nextId == '-1') {\r\n        nextX = _this.moveLineWidth;\r\n      }\r\n      else {\r\n        nextX = d3.select(\"#\" + rectClass + \"_\" + nextId).attr(\"x\");\r\n      }\r\n      d3.select(\"#\" + rectClass + \"_\" + _this.selectRectId)\r\n        .attr(\"width\", function (d) {\r\n          return nextX - e.offsetX;\r\n        })\r\n        .attr(\"x\", e.offsetX)\r\n      d3.select(\"#division_\" + _this.selectRectId)\r\n        .attr(\"x\", e.offsetX - 5)\r\n\r\n      if ((e.offsetX > (_this.topicLineWidth)) || (e.offsetX < (0)) || (e.offsetY > (_this.topicLineHeight)) || (e.offsetY < (0))) {\r\n        // document.getElementById('topicLineSvg').removeEventListener(\"mousemove\", _this.moveRect); // \r\n      }\r\n    },\r\n    getTreeData(){\r\n      const _this = this;\r\n      let oriData = tools.deepClone(this.data);\r\n      var data = {\r\n        \"name\": \"root\",\r\n        \"children\": []\r\n      };\r\n\r\n      for (let i = oriData.length - 1; i >= 0; i--) {\r\n        let sons = oriData[i]['son'];\r\n        oriData[i]['children'] = [];\r\n        if (sons.length > 0) {\r\n          for (let s = 0; s < sons.length; s++) {\r\n            oriData[i]['children'].push(oriData.find(function (d) { return d['id'] == sons[s] }))\r\n          }\r\n        }\r\n      }\r\n      let c = 0 ;\r\n      for (let i = 0; i < oriData.length; i++) {\r\n\r\n        let layout = oriData[i]['layout'];\r\n        if (layout == '0') {\r\n          data['children'].push(oriData[i]);\r\n          if(oriData[i]['name']!=\"Test\"){\r\n            _this.rootColorMap[oriData[i]['id']] = _this.mcolor[c];\r\n            c++;\r\n          }\r\n          else{\r\n            _this.rootColorMap[oriData[i]['id']] =\"rgb(250, 199, 88)\";\r\n          }\r\n        }\r\n      }\r\n\r\n      this.treeData = data;\r\n      console.log(_this.rootColorMap)\r\n      this.$bus.$emit(\"treeData\", [data,_this.rootColorMap]);\r\n    },\r\n    drawrootTree() {\r\n      const _this = this;\r\n      const margin = _this.margin;\r\n      let width = this.$refs.rootTree.offsetWidth - margin.left - margin.right;\r\n      let height = this.$refs.rootTree.offsetHeight - margin.top - margin.bottom;\r\n\r\n      let color = _this.mcolor;\r\n      let colorMap = _this.colorMap;\r\n      // var tree = d3.tree()\r\n      //   .size([width, height - 200]);\r\n      d3.select(\"#rootTree\").select(\"svg\").remove();\r\n      var svg = d3.select(\"#rootTree\").append(\"svg\")\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n\r\n      let transY = height;\r\n      let treeGTransformX = _this.treeGTransformX;\r\n      let treeGTransformY = _this.treeGTransformY;\r\n      let treeGTransformK = _this.treeGTransformK;\r\n      let groups = svg.append(\"g\")\r\n        .attr(\"id\", \"editrootTreeg\")\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n        .attr(\"transform\",  \"translate(\"+treeGTransformX+',' +treeGTransformY + \") scale(\"+treeGTransformK+\")\");\r\n\r\n        let stx = 0;\r\n        let sty = 0;\r\n        let stk =1;\r\n      var graphZoom = d3.zoom()\r\n        .scaleExtent([0, 10])\r\n        .on(\"start\", (e) => {\r\n          sty = e.transform.y;\r\n          stx = e.transform.x;\r\n          stk = e.transform.k;\r\n        })\r\n        .on('zoom', (e) => {\r\n          treeGTransformX = _this.treeGTransformX + e.transform.x - stx;\r\n          treeGTransformY = _this.treeGTransformY + e.transform.y - sty;\r\n          treeGTransformK = _this.treeGTransformK + e.transform.k - stk;\r\n          groups.attr('transform', 'translate(' + (treeGTransformX) + ',' + (treeGTransformY) + ') scale(' + (treeGTransformK) + ')')\r\n        })\r\n        .on('end', (e) => {\r\n          _this.treeGTransformX = treeGTransformX;\r\n          _this.treeGTransformY = treeGTransformY;\r\n          _this.treeGTransformK = treeGTransformK;\r\n          groups.attr('transform', 'translate(' + (treeGTransformX) + ',' + (treeGTransformY) + ') scale(' + (treeGTransformK) + ')')\r\n        });\r\n      svg.call(graphZoom)\r\n\r\n      const gLink = groups.append(\"g\")\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"stroke\", \"#555\")\r\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\r\n        .attr(\"stroke-opacity\", 0.4)\r\n        .attr(\"stroke-width\", 1.5);\r\n\r\n      const gNode = groups.append(\"g\")\r\n        .attr(\"cursor\", \"pointer\")\r\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\r\n        .attr(\"pointer-events\", \"all\")\r\n\r\n      let data = _this.treeData;\r\n      let diagonal = d3.linkHorizontal().x(d => d.y).y(d => d.x);\r\n      let tree = d3.tree().nodeSize([50, 150]);//.size([(height - margin.left - margin.right) * 2, (width - margin.left - margin.right)-10])\r\n      const root = d3.hierarchy(data);\r\n      const nodes = root.descendants().reverse();\r\n      const links = root.links();\r\n      tree(root);\r\n      console.log(nodes)\r\n      const node = gNode.selectAll(\"g\")\r\n        .data(nodes, d => d.id);\r\n\r\n      const nodeEnter = node.data(nodes).enter().append(\"g\")\r\n        .attr(\"transform\", (d) => {\r\n          return `translate(${d.y},${d.x})`\r\n        })\r\n        .on(\"click\", (event, d) => {\r\n          d.children = d.children ? null : d._children;\r\n          // update(d);\r\n        })\r\n\r\n      nodeEnter.append(\"circle\")\r\n        .attr(\"r\", 10)\r\n        .attr(\"id\", function (d) {\r\n          console.log(d)\r\n          if(d.data.name == 'root')\r\n            return \"treeNode_-1\";\r\n          return \"treeNode_\" + d.data.id;\r\n        })\r\n        .attr(\"fill\", function (d) {\r\n          if (d.data.name == 'root') {\r\n            return 'grey'\r\n          }\r\n          else {\r\n            let parent = d.parent;\r\n            let rootd = null;\r\n            while (parent.data.name != 'root') {\r\n              rootd = parent;\r\n              if (parent.parent.data.name == 'root') {\r\n                return color[colorMap[parent.data.id]]\r\n              }\r\n              parent = parent.parent;\r\n            }\r\n            return color[colorMap[d.data.id]]\r\n          }\r\n\r\n        })\r\n        .attr(\"stroke\", \"rgb(100,100,100)\")\r\n        // .attr(\"fill\", d => d._children ? \"#555\" : \"#999\")\r\n        .attr(\"stroke-width\", 1)\r\n        .on(\"mouseover\", function () {\r\n          d3.select(this).attr(\"r\", 15);\r\n\r\n        })\r\n        .on(\"mouseleave\", function () {\r\n          d3.select(this).attr(\"r\", 10)\r\n        })\r\n        .on(\"mousedown\", function () {\r\n          let nodeIdN = d3.select(this).attr(\"id\");\r\n          let nodeId = nodeIdN.split(\"_\")[1];\r\n          _this.curEntId = nodeId;\r\n          if(nodeId == '-1'){\r\n            _this.insertEntId = parseInt(nodeId) + 1 + '';\r\n          _this.click_node();\r\n            return\r\n          }\r\n          let curData = _this.data.find(function (d) { return d['id'] == nodeId; });\r\n          if (_this.toolsState == 'addNodeSon') {\r\n            _this.insertEntId = parseInt(nodeId) + 1 + '';\r\n          }\r\n          else if (_this.toolsState == 'addLinkBasic') {\r\n            if(_this.insertSourceEntId ==\"-1\")\r\n              _this.insertSourceEntId = parseInt(nodeId) + '';\r\n            else{\r\n              _this.insertTargetEntId = parseInt(nodeId) + '';\r\n            }\r\n          }\r\n          if ( (curData['son'].length > 0)) {\r\n            _this.insertEntId = parseInt(curData['son'][0]) + 1 +'';\r\n          };\r\n          _this.click_node();\r\n        })\r\n\r\n      // nodeEnter.append(\"text\")\r\n      //   .attr(\"dy\", \"0.31em\")\r\n      //   .attr(\"x\", d => d._children ? -6 : 6)\r\n      //   .attr(\"text-anchor\", d => d._children ? \"end\" : \"start\")\r\n      //   .text(d => d.data.name)\r\n      //   .clone(true).lower()\r\n      //   .attr(\"stroke-linejoin\", \"round\")\r\n      //   .attr(\"stroke-width\", 3)\r\n      //   .attr(\"stroke\", \"white\");\r\n\r\n      const link = gLink.selectAll(\"path\")\r\n        .data(links, d => d.target.id);\r\n\r\n      const linkEnter = link.enter().append(\"path\")\r\n        .attr(\"d\", d => {\r\n          const o = { x: d.source.x, y: d.source.y };\r\n          const p = { x: d.target.x, y: d.target.y }\r\n          return diagonal({ source: o, target: p });\r\n        })\r\n        .attr(\"stroke\", \"rgb(100,100,100)\")\r\n        .attr(\"stroke-width\", 5)\r\n      _this.drawRootTreeRel(gLink, nodes);\r\n    },\r\n    drawRootTreeRel(svg, nodeData) {\r\n\r\n      const _this = this;\r\n      let relData = _this.relData;\r\n      let oData = _this.drawEntityLocation;\r\n      console.log(nodeData)\r\n      let margin = _this.margin;\r\n      let height = svg.attr('height');\r\n      // let basicRel = relData['similarityRel'];\r\n      let basicRel = relData['basicRel'];\r\n      for (let r = 0; r < basicRel.length; r++) {\r\n\r\n        let sourceId = basicRel[r][0];\r\n        let targetId = basicRel[r][1];\r\n        let idN = \"basicRel\" + sourceId + \"_\" + targetId;\r\n        let classN = \"basicRel source\" + sourceId + \" target\" + targetId;\r\n        let sourceNode = nodeData.find(function (d) { return d['data']['id'] == sourceId });\r\n        let targetNode = nodeData.find(function (d) { return d['data']['id'] == targetId });\r\n        if (sourceNode['x'] > targetNode['x']) {\r\n          let tp = sourceNode;\r\n          sourceNode = targetNode;\r\n          targetNode = tp;\r\n        }\r\n        const path = d3.path();\r\n\r\n        let startX = sourceNode['y'];\r\n        let endX = targetNode['y'];\r\n        let startY = sourceNode['x'];\r\n        let endY = targetNode['x'];\r\n        let midX = (startX + endX) / 2;\r\n        let midY = (startY + endY) / 2;\r\n        let cnx = (startX > endX) ? (startX + 10 + 0.25 * (endY - startY)) : (endX + 10 + 0.25 * (endY - startY));\r\n        path.moveTo(startX, startY);\r\n        path.bezierCurveTo(cnx, midY, cnx, midY, endX, endY);\r\n        _this.drawTimeLine(svg, path, \"rgb(200,200,200)\", 5, \"9,9\", idN, classN);\r\n\r\n\r\n      };\r\n      let similarityRel = relData['similarityRel'];\r\n      // let basicRel = relData['basicRel'];\r\n      for (let r = 0; r < similarityRel.length; r++) {\r\n\r\n        let sourceId = similarityRel[r][0];\r\n        let targetId = similarityRel[r][1];\r\n\r\n        let idN = \"similarityRel\" + sourceId + \"_\" + targetId;\r\n\r\n        let classN = \"similarityRel source\" + sourceId + \" target\" + targetId;\r\n        let sourceNode = nodeData.find(function (d) { return d['data']['id'] == sourceId });\r\n        let targetNode = nodeData.find(function (d) { return d['data']['id'] == targetId });\r\n        if (sourceNode['x'] > targetNode['x']) {\r\n          let tp = sourceNode;\r\n          sourceNode = targetNode;\r\n          targetNode = tp;\r\n        }\r\n        const path = d3.path();\r\n\r\n        let startX = sourceNode['y'];\r\n        let endX = targetNode['y'];\r\n        let startY = sourceNode['x'];\r\n        let endY = targetNode['x'];\r\n        let midX = (startX + endX) / 2;\r\n        let midY = (startY + endY) / 2;\r\n        let cnx = (startX > endX) ? (startX + 100 + 0.5 * (endY - startY)) : (endX + 100 + 0.5 * (endY - startY));\r\n\r\n        path.moveTo(startX, startY);\r\n        path.lineTo(cnx, startY);\r\n        path.lineTo(cnx, endY);\r\n        path.lineTo(endX, endY);\r\n        _this.drawTimeLine(svg, path, \"rgb(200,200,200)\", 5, \"0\", idN, classN);\r\n\r\n\r\n      };\r\n    },\r\n    draweditData() {\r\n      const _this = this;\r\n      const margin = _this.margin;\r\n      let width = this.$refs.editData.offsetWidth - margin.left - margin.right - 60;\r\n      let height = this.$refs.editData.offsetHeight - margin.top - margin.bottom;\r\n      d3.select(\"#editData\").select(\"svg\").remove();\r\n      var svg = d3.select(\"#editData\").append(\"svg\")\r\n        .attr(\"id\", \"editEnt\")\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height);\r\n\r\n      let entG = svg.append(\"g\").attr(\"id\", \"entG\").attr(\"width\", width).attr(\"height\", height);\r\n      let sonG = svg.append(\"g\").attr(\"id\", \"sonG\").attr(\"width\", width).attr(\"height\", height).attr(\"transform\", \"translate(1,320)\");\r\n      // _this.entG = entG;\r\n      // _this.sonG = sonG;\r\n      _this.drawEntity(_this.data[0]);\r\n      _this.drawSonLine(_this.data[1]);\r\n    },\r\n    drawSonLine(data) {\r\n      const _this = this;\r\n      let psvg = d3.select(\"#sonG\");\r\n      let w = psvg.attr(\"width\") - 1;\r\n      let h = 40;\r\n      psvg.remove();\r\n      let svg = d3.select(\"#editEnt\").append(\"g\").attr(\"id\", \"sonG\").attr(\"width\", w + 1).attr(\"height\", h + 2).attr(\"transform\", \"translate(1,320)\");\r\n      let color_linear = _this.importanceColor_linear;\r\n      let compute_color = _this.importanceCompute_color;\r\n      let oData = _this.data;\r\n      _this.entLineWidth = w;\r\n      // if (sonList.length > 0) {\r\n      svg.selectAll().remove();\r\n      svg.append(\"line\")\r\n        .attr(\"x1\", 0)\r\n        .attr(\"y1\", h / 2)\r\n        .attr(\"x2\", w)\r\n        .attr(\"y2\", h / 2)\r\n        .attr(\"stroke\", \"rgb(200,200,200)\")\r\n        .attr(\"stroke-width\", \"5px\");\r\n\r\n      let totalSonDuration = 0;\r\n      let dataIndex = oData.map(item => item.id).indexOf(data['id']);\r\n      let startIndex = ((dataIndex - 2) > 0) ? (dataIndex - 2) : (0);\r\n      let endIndex = ((dataIndex + 1) < oData.length) ? (dataIndex + 2) : (oData.length - 1);\r\n\r\n      let dataLi = tools.deepClone(oData).splice(startIndex, endIndex - startIndex + 1);\r\n      // let data = sonList;\r\n      for (let i = 0; i < dataLi.length; i++) {\r\n        let curEnt = oData.find(function (d) { return d['id'] == dataLi[i]['id'] });\r\n        let time = tools.time2seconds(curEnt['time'][0]);\r\n        let endTime = tools.time2seconds(curEnt['time'][1]);\r\n        totalSonDuration += endTime - time;\r\n      }\r\n      _this.totalSonDuration = totalSonDuration;\r\n      let cxLinear = d3.scaleLinear([0, totalSonDuration], [0, w]);\r\n      let DivisionDataList = [];\r\n      // let colorIndex = 0;\r\n      let prex = 0;\r\n      for (let i = 0; i < dataLi.length; i++) {\r\n        let curEnt = oData.find(function (d) { return d['id'] == dataLi[i]['id'] });\r\n        let temp = tools.deepClone(curEnt);\r\n        if (DivisionDataList.length != 0) {\r\n          DivisionDataList[DivisionDataList.length - 1]['nextId'] = temp['id'];\r\n          temp['preId'] = DivisionDataList[DivisionDataList.length - 1]['id'];\r\n        }\r\n        else { temp['preId'] = \"-1\"; }\r\n        DivisionDataList.push(temp);\r\n        let time = tools.time2seconds(curEnt['time'][0]);\r\n        let endTime = tools.time2seconds(curEnt['time'][1]);\r\n        let curEntDur = endTime - time;\r\n        let cx = prex;\r\n        let endx = prex + cxLinear(curEntDur);\r\n        let importanceValue = curEnt['attribute']['importance'];\r\n        let entColor = compute_color(color_linear(importanceValue));\r\n        if (i != 0) {\r\n          _this.drawRect(svg, cx - 5, 0, 5, h, h / 2, \"division_\" + curEnt['id'], \"entdivisionLine\", \"rgb(250,250,250)\", 5, '', 0);\r\n        }\r\n        if (dataLi[i]['id'] == data['id']) _this.drawRect(svg, cx, 0, endx - cx, h, h / 2, \"editEnt_\" + curEnt['id'], \"editEnt\", entColor, 1, \"black\", 1)//color[_this.colorMap[son['id']]], 5, 0.1)\r\n        else _this.drawRect(svg, cx, 0, endx - cx, h, h / 2, \"editEnt_\" + curEnt['id'], \"editEnt\", entColor, 1, \"rgb(150,150,150)\", 1)//color[_this.colorMap[son['id']]], 5, 0.1)\r\n        prex = endx;\r\n      }\r\n      DivisionDataList[DivisionDataList.length - 1]['nextId'] = \"-1\";\r\n      _this.entDivisionDataList = DivisionDataList;\r\n    },\r\n    drawEntityOri(data) {\r\n      const _this = this;\r\n      let psvg = d3.select(\"#entG\");\r\n      let w = psvg.attr(\"width\");\r\n      let h = psvg.attr(\"height\");\r\n      psvg.remove();\r\n      let svg = d3.select(\"#editEnt\").append(\"g\").attr(\"id\", \"entG\").attr(\"width\", w).attr(\"height\", h);\r\n      let color_linear = _this.importanceColor_linear;\r\n      let compute_color = _this.importanceCompute_color;\r\n      let totalDurationValue = data['totalDuration'];\r\n      let rScale = _this.totalDurationScale_linear;\r\n      let r = rScale(totalDurationValue);\r\n      let oData = _this.data;\r\n      let x = svg.attr(\"width\") / 2;\r\n      let y = 120;\r\n      let importanceValue = data['attribute']['importance'];\r\n      let relevanceValue = data['attribute']['relevance'];\r\n      svg.selectAll().remove();\r\n\r\n      if (data['type'] == '1') {\r\n        let area = tools.calcTriangle(x, y, r);\r\n        _this.drawTriangle(svg, \"rgb(250, 199, 88)\", area, \"rgb(250, 199, 88)\");\r\n      }\r\n      else {\r\n\r\n        let cy = y;\r\n        let totalDuration = _this.totalDuration;\r\n        let timeLineScale_linear = d3.scaleLinear([0, totalDuration], [x - r * Math.sqrt(3) / 2, x + r * Math.sqrt(3) / 2])\r\n        let timeLineHighScale_linear = d3.scaleLinear([0, _this.maxDDuration], [0, r * (1 + Math.sqrt(3) / 2)])\r\n        let circleColor = compute_color(color_linear(importanceValue));\r\n        _this.drawCircle(svg, x, cy, r, circleColor, data, 1, \"entCircle\", \"entCircle_\" + data['id']);\r\n\r\n        r = r * Math.sqrt(3) / 2;\r\n        y += r / 2;\r\n        let path = d3.path();\r\n\r\n\r\n        path.moveTo(x - r, y);\r\n        let lineLi = [data['time']];\r\n        let linePoint = [{ 'id': data['id'], 'time': data['time'], 'x': 0, 'y': 0 }];\r\n        for (let srel in data[\"similarityRel\"]) {\r\n          let cdata = oData.find(function (d) { return d['id'] == data[\"similarityRel\"][srel] })\r\n          lineLi.push(cdata['time'])\r\n          linePoint.push({ 'id': cdata['id'], 'time': cdata['time'], 'x': 0, 'y': 0 })\r\n        }\r\n        const sortmt = (a, b) => {\r\n          return tools.time2seconds(a[0]) - tools.time2seconds(b[0]);\r\n        }\r\n        const sortlp = (a, b) => {\r\n          return tools.time2seconds(a['time'][0]) - tools.time2seconds(b['time'][0]);\r\n        }\r\n        lineLi = lineLi.sort(sortmt);\r\n        linePoint = linePoint.sort(sortlp);\r\n        let lineData = [[x - r, y]];\r\n        for (let t = 0; t < lineLi.length; t++) {\r\n          let startT = lineLi[t][0];\r\n          let endT = lineLi[t][1];\r\n          let startS = tools.time2seconds(startT);\r\n          let endS = tools.time2seconds(endT);\r\n          let duration = endS - startS;\r\n\r\n          let startx = timeLineScale_linear((startS - duration * 10));\r\n          let endx = timeLineScale_linear((endS + duration * 10));\r\n\r\n          let startyf = y + timeLineHighScale_linear((duration)) / 8;\r\n          let startyf1 = y + timeLineHighScale_linear((duration)) / 8;\r\n          let endyf = y + timeLineHighScale_linear((duration)) / 8;\r\n          let endyf1 = y + timeLineHighScale_linear((duration)) / 8;\r\n          let yz = y - timeLineHighScale_linear((duration));\r\n          let midx = timeLineScale_linear((endS + startS) / 2);\r\n          linePoint[t]['x'] = midx;\r\n          linePoint[t]['y'] = y - timeLineHighScale_linear(duration) / 1.7;\r\n          let y1 = y;\r\n          if (startx < (lineData[lineData.length - 1][0])) {\r\n            if (t > 0) {\r\n              lineData.splice(lineData.length - 3, 3);\r\n              startx = (lineData[lineData.length - 1][0] + midx) / 2;\r\n              y1 = lineData[lineData.length - 1][1] + timeLineHighScale_linear((duration)) / 2;\r\n              startyf = lineData[lineData.length - 1][1] + timeLineHighScale_linear((duration)) / 2;\r\n              startyf1 = lineData[lineData.length - 1][1] + timeLineHighScale_linear((duration)) / 2;\r\n            }\r\n          }\r\n          let startx1 = startx + (timeLineScale_linear((startS + duration)) - timeLineScale_linear((startS)));\r\n          let endx1 = endx - (timeLineScale_linear((startS + duration)) - timeLineScale_linear((startS)));\r\n          let startx2 = startx1 + (timeLineScale_linear((startS + duration)) - timeLineScale_linear((startS)));\r\n          let endx2 = endx1 - (timeLineScale_linear((startS + duration)) - timeLineScale_linear((startS)));\r\n          if (endx > (r + x)) endx = r + x;\r\n          if (startx1 < (lineData[lineData.length - 1][0])) startx1 = lineData[lineData.length - 1][0];\r\n          if (endx1 > (r + x)) endx1 = r + x;\r\n          if (startx2 < (lineData[lineData.length - 1][0])) startx2 = lineData[lineData.length - 1][0];\r\n          if (endx2 > (r + x)) endx2 = r + x;\r\n          lineData.push([startx, y1], [startx1, startyf1], [startx2, startyf], [midx, yz], [endx2, endyf], [endx1, endyf1], [endx, y])\r\n        }\r\n        lineData.push([x + r, y])\r\n        let curve_generator = d3.line()\r\n          .x((d) => d[0])\r\n          .y((d) => {\r\n            let h = Math.sqrt(Math.pow(r, 2) - Math.pow((d[0] - (x - r)), 2));\r\n            if ((y - d[1]) > (h + r * Math.sqrt(3) / 2))\r\n              return y - (h + r * Math.sqrt(3) / 2) + 2;\r\n            return d[1];\r\n          })\r\n          .curve(d3.curveBasis)\r\n        _this.drawTimeLine(svg, curve_generator(lineData), \"white\", 2, '0', 'sonLine ', 'sonLine ');\r\n\r\n\r\n        for (let p = 0; p < linePoint.length; p++) {\r\n          _this.drawCircle(svg, linePoint[p]['x'], linePoint[p]['y'], 5, \"red\", linePoint[p], 0, \"linePoint\", \"linePoint_\" + linePoint[p]['id']);\r\n        }\r\n\r\n        // \"1\": \"rgb(145, 204, 117)\",\r\n        //   \"2\": \"rgb(84, 112, 198)\",\r\n        //   \"3\": \"rgb(238, 102, 102)\",\r\n        let typeColor = {\r\n          \"1\": \"#ff9c9c\",\r\n          \"2\": \"#f4f4d0\",\r\n          \"3\": \"#6f8be0\",\r\n        };\r\n        let duration = tools.time2seconds(data['time'][0]) - tools.time2seconds(data['time'][1]);\r\n        let typeData = data['attribute']['expressions'];\r\n        let sonList = data['son'];\r\n        let typeArcScale_linear = d3.scaleLinear([0, duration], [0, Math.PI * 2]);\r\n\r\n        var typeStartR = 0//Math.PI/4;\r\n\r\n        var typeStepR = Math.PI / 1;\r\n\r\n        if (sonList.length > 0) {\r\n          for (let i in typeData) {\r\n            let color = typeColor[i];\r\n            let typeDurition = typeData[i];\r\n            let totalTypeSeconds = 0;\r\n            for (let d in typeDurition) {\r\n              totalTypeSeconds += (tools.time2seconds(typeDurition[d][1]) - tools.time2seconds(typeDurition[d][0]))\r\n            }\r\n            let typeStepR = typeArcScale_linear(totalTypeSeconds)//Math.PI/2;\r\n\r\n            let endAnglet = typeStartR + 1 * typeStepR\r\n            var dataset = { startAngle: typeStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n            typeStartR = endAnglet;\r\n            var arcPath = d3.arc()\r\n              .innerRadius(r + 10)\r\n              .outerRadius(r + 25);\r\n            var pathArc = arcPath(dataset);\r\n            _this.drawArc(svg, x, y - r / 2, pathArc, color, color, 'type f' + data['id'] + \" t\" + i);\r\n          }\r\n          let sonTotal = 0;\r\n          let sonNum = 0\r\n          for (let s in sonList) {\r\n            let sonData = oData.find(function (d) { return d['id'] == sonList[s] });\r\n            let sonDur = sonData['totalDuration'];\r\n            sonTotal += sonDur;\r\n            sonNum += 1;\r\n          }\r\n          let skipArc = Math.PI / (sonNum + 2);\r\n          let timeSonLinear = d3.scaleLinear([0, sonTotal], [0, Math.PI * 2 - skipArc * sonNum]);\r\n          let timeSonHeighLinear = d3.scaleLinear([0, sonTotal], [40, 40]);\r\n\r\n          let timeSonColor_linear = d3.scaleLinear().domain([0, sonTotal]).range([0, 1]);\r\n          let timeSonCompute_color = d3.interpolate(\"white\", circleColor);\r\n          var sonStartR = 0;//-Math.PI/2;\r\n          for (let s in sonList) {\r\n            let sonData = oData.find(function (d) { return d['id'] == sonList[s] });\r\n            let sonDur = sonData['totalDuration'];\r\n\r\n            let sonStepR = timeSonLinear(sonDur)//Math.PI/2;\r\n\r\n            let endAnglet = sonStartR + sonStepR;\r\n            var dataset = { startAngle: sonStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n            sonStartR = endAnglet;\r\n            let color = 'blue';\r\n            var arcPath = d3.arc()\r\n              .innerRadius(r + 28)\r\n              .outerRadius(r + timeSonHeighLinear(sonDur));\r\n            var arcMidPath = d3.arc()\r\n              .innerRadius(0)\r\n              .outerRadius(r + 32);\r\n            var pathArc = arcPath(dataset);\r\n\r\n            endAnglet = sonStartR + skipArc;\r\n            var midDataset = { startAngle: sonStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n\r\n            let jiantouPath = d3.path();\r\n            jiantouPath.arc(x, y - r / 2, r + 32, sonStartR - Math.PI / 2, endAnglet - Math.PI / 2);\r\n\r\n            sonStartR += skipArc;\r\n            var pathMidArc = arcMidPath(midDataset);\r\n            let timeSonColor = compute_color(color_linear(sonData['attribute']['importance']));\r\n            _this.drawArc(svg, x, y - r / 2, pathArc, timeSonColor, timeSonColor, 'son f' + data['id'] + \" s\" + sonList[s], '0');\r\n            if (s != sonList.length - 1) {\r\n              _this.drawTimeLine(svg, jiantouPath, \"rgb(200,200,200)\", 3, '9,5', 'midArc ', 'midArc ');\r\n            }\r\n          }\r\n\r\n        }\r\n\r\n\r\n      }\r\n      let txts = _this.nameinput.split(\" \")\r\n      _this.drawTxt(svg, x - r - 32, y + r + 50, r * 2 + 64, txts, \"grey\");\r\n    },\r\n    drawEntity(data) {\r\n      const _this = this;\r\n      let psvg = d3.select(\"#entG\");\r\n      let w = psvg.attr(\"width\");\r\n      let h = psvg.attr(\"height\");\r\n      psvg.remove();\r\n      let svg = d3.select(\"#editEnt\").append(\"g\").attr(\"id\", \"entG\").attr(\"width\", w).attr(\"height\", h);\r\n      let color_linear = _this.importanceColor_linear;\r\n      let compute_color = _this.importanceCompute_color;\r\n      let totalDurationValue = data['totalDuration'];\r\n      let rScale = _this.totalDurationScale_linear;\r\n      let r = rScale(totalDurationValue);\r\n      let oData = _this.data;\r\n      let x = svg.attr(\"width\") / 2;\r\n      let y = 120;\r\n      let importanceValue = data['attribute']['importance'];\r\n      let relevanceValue = data['attribute']['relevance'];\r\n      svg.selectAll().remove();\r\n\r\n      if (data['type'] == '1') {\r\n        let area = tools.calcTriangle(x, y, r);\r\n        _this.drawTriangle(svg, \"rgb(250, 199, 88)\", area, \"rgb(250, 199, 88)\");\r\n      }\r\n      else {\r\n\r\n        let cy = y;\r\n        let totalDuration = _this.totalDuration;\r\n        let timeLineScale_linear = d3.scaleLinear([0, totalDuration], [x - r * Math.sqrt(3) / 2, x + r * Math.sqrt(3) / 2])\r\n        let timeLineHighScale_linear = d3.scaleLinear([0, _this.maxDDuration], [0, r * (1 + Math.sqrt(3) / 2)])\r\n        let circleColor = compute_color(color_linear(importanceValue));\r\n        _this.drawCircle(svg, x, cy, r, circleColor, data, 1, \"entCircle\", \"entCircle_\" + data['id']);\r\n\r\n        r = r * Math.sqrt(3) / 2;\r\n        y += r / 2;\r\n        let path = d3.path();\r\n\r\n\r\n        path.moveTo(x - r, y);\r\n        let lineLi = [data];\r\n        let linePoint = [{ 'id': data['id'], 'time': data['time'], 'x': 0, 'y': 0 }];\r\n        let jgidL = [data['id']];\r\n        let similarityRelsli = [data[\"similarityRel\"]];\r\n        while(similarityRelsli.length>0){\r\n          let similarityRels = similarityRelsli[0];\r\n          similarityRelsli.splice(0,1);\r\n          let jg = 0;\r\n          for (let srel in similarityRels) {\r\n            let cdata = oData.find(function (d) { return d['id'] == similarityRels[srel] });\r\n            if(jgidL.indexOf(cdata['id'])==-1){\r\n              similarityRelsli.push(cdata[\"similarityRel\"])\r\n              jg=1;\r\n              lineLi.push(cdata)\r\n              jgidL.push(cdata['id'])\r\n              linePoint.push({ 'id': cdata['id'], 'time': cdata['time'], 'x': 0, 'y': 0 })\r\n            }\r\n          }\r\n          // if(jg==0){\r\n            // break;\r\n          // }\r\n        }\r\n        \r\n        const sortmt = (a, b) => {\r\n          return tools.time2seconds(a[0]) - tools.time2seconds(b[0]);\r\n        }\r\n        const sortlp = (a, b) => {\r\n          return tools.time2seconds(a['time'][0]) - tools.time2seconds(b['time'][0]);\r\n        }\r\n        console.log(lineLi);\r\n        lineLi = lineLi.sort(sortlp);\r\n        linePoint = linePoint.sort(sortlp);\r\n        let lineData = [[x - r * Math.sqrt(3)/2-4 , y]];\r\n        for (let t = 0; t < lineLi.length; t++) {\r\n          let startT = lineLi[t]['time'][0];\r\n          let duration =lineLi[t]['totalDuration']\r\n          // let endT = lineLi[t]['time'][1];\r\n          let startS = tools.time2seconds(startT);\r\n          let endS = startS +duration;\r\n          // let startx = timeLineScale_linear((startS - duration * 10));\r\n          // let endx = timeLineScale_linear((endS + duration * 10));\r\n          let limst = (x - r * Math.sqrt(3) / 2);\r\n          let limed = (x + r * Math.sqrt(3) / 2);\r\n          let startx = (limst<timeLineScale_linear((startS)))?(timeLineScale_linear((startS))):(limst);\r\n          let endx = (limed>timeLineScale_linear((endS)))?(timeLineScale_linear((endS))):(limed);\r\n          // let midx = timeLineScale_linear((endS + startS) / 2);\r\n          let midx = (startx+endx) / 2;\r\n          let ys = y;\r\n          let yz = y - timeLineHighScale_linear((duration));\r\n          linePoint[t]['x'] = midx;\r\n          linePoint[t]['y'] = y - timeLineHighScale_linear(duration) / 1.7;\r\n          // if (startx < (lineData[lineData.length - 1][0])) {\r\n            if (t > 0) {\r\n              lineData.splice(lineData.length - 1, 1);\r\n              midx+=t*5;\r\n              startx = midx-((midx-(lineData[lineData.length - 1][0] + midx) / 2))/2;\r\n              endx+=t*5;\r\n              ys = y+(y-lineData[lineData.length - 1][1])/3\r\n            }\r\n            console.log(ys)\r\n          // }\r\n          lineData.push([startx, ys],[midx, yz],[endx, y])}\r\n        lineData.push([x + r, y])\r\n        let curve_generator = d3.line()\r\n          .x((d) => d[0])\r\n          .y((d) => {\r\n            let h = Math.sqrt(Math.pow(r, 2) - Math.pow((d[0] - (x - r)), 2));\r\n            if ((y - d[1]) > (h + r * Math.sqrt(3) / 2))\r\n              return y - (h + r * Math.sqrt(3) / 2) + 2;\r\n            return d[1];\r\n          })\r\n          .curve(d3.curveBundle )\r\n          // .curve(d3.curveCatmullRom  )\r\n          // .curve(d3.curveBasis)\r\n        _this.drawTimeLine(svg, curve_generator(lineData), \"white\", 2, '0', 'sonLine ', 'sonLine ');\r\n\r\n\r\n        for (let p = 0; p < linePoint.length; p++) {\r\n          _this.drawCircle(svg, linePoint[p]['x'], linePoint[p]['y'], 5, \"red\", linePoint[p], 0, \"linePoint\", \"linePoint_\" + linePoint[p]['id']);\r\n        }\r\n\r\n        // \"1\": \"rgb(145, 204, 117)\",\r\n        //   \"2\": \"rgb(84, 112, 198)\",\r\n        //   \"3\": \"rgb(238, 102, 102)\",\r\n        let typeColor = {\r\n          \"1\": \"#ff9c9c\",\r\n          \"2\": \"#f4f4d0\",\r\n          \"3\": \"#6f8be0\",\r\n        };\r\n        let duration = tools.time2seconds(data['time'][0]) - tools.time2seconds(data['time'][1]);\r\n        let typeData = data['attribute']['expressions'];\r\n        let sonList = data['son'];\r\n        let sons = [sonList];\r\n        while (sons.length > 0) {\r\n          let curSonList = sons[0];\r\n          sons.splice(0, 1);\r\n          if (curSonList.length > 0) {\r\n            for (let s in curSonList) {\r\n              let sonData = oData.find(function (d) { return d['id'] == curSonList[s] });\r\n              let sonTypeData = sonData['attribute']['expressions'];\r\n\r\n              for (let t in sonTypeData) {\r\n                let typeDurition = sonTypeData[t];\r\n                for (let d in typeDurition) {\r\n                   typeData[t].push(typeDurition[d])\r\n                }\r\n              }\r\n              sons.push(sonData['son']);\r\n            }\r\n          }\r\n        }\r\n        var typeStartR = 0//Math.PI/4;\r\n\r\n        var typeStepR = Math.PI / 1;\r\n\r\n        if (sonList.length > 0) {\r\n          let typeTotalDur = 0;\r\n          for (let t in typeData) {\r\n            let typeDurition = typeData[t];\r\n            for (let d in typeDurition) {\r\n              typeTotalDur += (tools.time2seconds(typeDurition[d][1]) - tools.time2seconds(typeDurition[d][0]))\r\n            }\r\n          }\r\n          let typeArcScale_linear = d3.scaleLinear([0, typeTotalDur], [0, Math.PI * 2]);\r\n          for (let i in typeData) {\r\n            let color = typeColor[i];\r\n            let typeDurition = typeData[i];\r\n            let totalTypeSeconds = 0;\r\n            for (let d in typeDurition) {\r\n              totalTypeSeconds += (tools.time2seconds(typeDurition[d][1]) - tools.time2seconds(typeDurition[d][0]))\r\n            }\r\n            if(totalTypeSeconds>0)\r\n            {let typeStepR = typeArcScale_linear(totalTypeSeconds)//Math.PI/2;\r\n\r\n            let endAnglet = typeStartR + 1 * typeStepR\r\n            var dataset = { startAngle: typeStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n            typeStartR = endAnglet;\r\n            var arcPath = d3.arc()\r\n              .innerRadius(r + 10)\r\n              .outerRadius(r + 25);\r\n            var pathArc = arcPath(dataset);\r\n            _this.drawArc(svg, x, y - r / 2, pathArc, color, color, 'type f' + data['id'] + \" t\" + i);}\r\n          }\r\n\r\n          let sonTotal = 0;\r\n          let sonNum = 0\r\n          for (let s in sonList) {\r\n            let sonData = oData.find(function (d) { return d['id'] == sonList[s] });\r\n            let sonDur = sonData['totalDuration'];\r\n            sonTotal += sonDur;\r\n            sonNum += 1;\r\n          }\r\n          let skipArc = Math.PI / (sonNum + 2);\r\n          let timeSonLinear = d3.scaleLinear([0, sonTotal], [0, Math.PI * 2 - skipArc * sonNum]);\r\n          let timeSonHeighLinear = d3.scaleLinear([0, sonTotal], [40, 40]);\r\n\r\n          let timeSonColor_linear = d3.scaleLinear().domain([0, sonTotal]).range([0, 1]);\r\n          let timeSonCompute_color = d3.interpolate(\"white\", circleColor);\r\n          var sonStartR = 0;//-Math.PI/2;\r\n          for (let s in sonList) {\r\n            let sonData = oData.find(function (d) { return d['id'] == sonList[s] });\r\n            let sonDur = sonData['totalDuration'];\r\n\r\n            let sonStepR = timeSonLinear(sonDur)//Math.PI/2;\r\n\r\n            let endAnglet = sonStartR + sonStepR;\r\n            var dataset = { startAngle: sonStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n            sonStartR = endAnglet;\r\n            let color = 'blue';\r\n            var arcPath = d3.arc()\r\n              .innerRadius(r + 28)\r\n              .outerRadius(r + timeSonHeighLinear(sonDur));\r\n            var arcMidPath = d3.arc()\r\n              .innerRadius(0)\r\n              .outerRadius(r + 32);\r\n            var pathArc = arcPath(dataset);\r\n\r\n            endAnglet = sonStartR + skipArc;\r\n            var midDataset = { startAngle: sonStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n\r\n            let jiantouPath = d3.path();\r\n            jiantouPath.arc(x, y - r / 2, r + 32, sonStartR - Math.PI / 2, endAnglet - Math.PI / 2);\r\n\r\n            sonStartR += skipArc;\r\n            var pathMidArc = arcMidPath(midDataset);\r\n            let timeSonColor = compute_color(color_linear(sonData['attribute']['importance']));\r\n            _this.drawArc(svg, x, y - r / 2, pathArc, timeSonColor, timeSonColor, 'son f' + data['id'] + \" s\" + sonList[s], '0');\r\n            if (s != sonList.length - 1) {\r\n              _this.drawTimeLine(svg, jiantouPath, \"rgb(200,200,200)\", 3, '9,5', 'midArc ', 'midArc ');\r\n            }\r\n          }\r\n\r\n        }\r\n\r\n\r\n      }\r\n      let txts = data['name'].split(\" \")\r\n      let tx = x - r - 30;\r\n      let ty = y + r +60;\r\n      let tw = r*2;\r\n      tx = x;\r\n      if(data['son'].length==0){\r\n        tx = x//-r-10;\r\n        ty = y+r*2;\r\n      }\r\n      if(data['id']==\"3\"){\r\n        tx = x-10;\r\n        ty = y+r*2;\r\n      }\r\n      if(data['id']==\"4\"){\r\n        tx = x+10;\r\n        ty = y+r*2;\r\n      }\r\n      // if(data['type']=='1'){\r\n      //   tx = x-r/2;\r\n      //   ty = y+r*2;\r\n      // }\r\n\r\n      _this.drawTxt(svg, tx, ty,tw , txts, \"grey\",22, `text_${data['id']}`);\r\n      // let txts = _this.nameinput.split(\" \")\r\n      // _this.drawTxt(svg, x - r - 32, y + r + 50, r * 2 + 64, txts, \"grey\");\r\n    },\r\n    drawTxt(svg, x, y, width, txts, fill, fontsize = 12, idN) {\r\n      let tx = x;\r\n      let ty = y;\r\n      let preWidth = 0;\r\n      let preIdN = 0;\r\n      let pretext = ''\r\n      for (let t = 0; t < txts.length; t++) {\r\n        pretext +=\" \"+ txts[t];\r\n        let txt = svg.append(\"text\")\r\n          .attr(\"y\", ty)\r\n          .attr(\"x\", tx)\r\n          .attr(\"id\", `${idN}_${t}`)\r\n          .attr(\"fill\", fill)\r\n          .attr(\"font-size\", fontsize)\r\n          .style(\"text-anchor\", \"middle\")\r\n          .text(pretext)\r\n        let textWidth = document.getElementById(`${idN}_${t}`).getBBox().width;\r\n        if((textWidth>width)||(t==txts.length -1)){\r\n          pretext = '';\r\n          tx = x;\r\n          ty += 25;\r\n        }\r\n        else{\r\n          txt.remove()\r\n        }\r\n        preWidth += textWidth;\r\n      }\r\n    },\r\n    drawTxtOri1(svg, x, y, width, txts, fill,fontsize=12) {\r\n      let tx = x;\r\n      let ty = y;\r\n      for (let t = 0; t < txts.length; t++) {\r\n\r\n      let txt =   svg.append(\"text\")\r\n          .attr(\"y\", ty)\r\n          .attr(\"x\", tx)\r\n          .attr(\"fill\", fill)\r\n          .attr(\"font-size\",fontsize)\r\n          .style(\"text-anchor\", \"middle\")\r\n          .text(txts[t])\r\n        tx += txts[t].length * 14;\r\n        if (tx - x > width) {\r\n          tx = x;\r\n          ty += 25;\r\n        }\r\n      }\r\n    },\r\n    drawTxtOri(svg, x, y, width, txts, fill) {\r\n      let tx = x;\r\n      let ty = y;\r\n      for (let t = 0; t < txts.length; t++) {\r\n\r\n        svg.append(\"text\")\r\n          .attr(\"y\", ty)\r\n          .attr(\"x\", tx)\r\n          .attr(\"fill\", fill)\r\n          .text(txts[t])\r\n        tx += txts[t].length * 10;\r\n        if (tx - x > width) {\r\n          tx = x;\r\n          ty += 25;\r\n        }\r\n      }\r\n    },\r\n    drawTriangle(svg, color, points, stroke, opacity = 1) {\r\n      svg.append(\"polygon\")\r\n        .attr(\"points\", points)\r\n        .attr(\"fill\", color)\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"stroke\", stroke)\r\n        .attr(\"stroke-width\", \"15px\");\r\n    },\r\n    drawCircle(svg, x, y, r, fill, data, opacity, className = 'entCircle', idName) {\r\n      const _this = this;\r\n      const oData = _this.data\r\n      svg.append(\"circle\")\r\n        .attr(\"id\", idName)\r\n        .attr(\"class\", className)\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"cx\", x)\r\n        .attr(\"cy\", y)\r\n        .attr(\"r\", r)\r\n        .attr(\"fill\", fill)\r\n        .on(\"mouseover\", function (d) {\r\n          d3.select(this).attr(\"r\", r * 1.1)\r\n          let classN = d3.select(this).attr(\"class\");\r\n          if (classN == 'linePoint') {\r\n            d3.select(this).attr(\"opacity\", 1).attr(\"r\", 5)\r\n          }\r\n          else {\r\n            d3.selectAll(\".f\" + data['id'])\r\n              .attr(\"transform\", function (d) {\r\n                let transformd = d3.select(this).attr(\"transform\")\r\n                return transformd.split(\" \")[0] + \" scale(1.1)\"\r\n              })\r\n\r\n            d3.selectAll(\".basicRel\")\r\n              .attr(\"class\", function (d) {\r\n                let classN = d3.select(this).attr(\"class\");\r\n                let classNList = classN.split(\" \");\r\n                let jg = 0;\r\n                for (let i = 0; i < classNList.length - 1; i++) {\r\n                  console.log('source' + data['id'], classNList[i])\r\n                  if ('source' + data['id'] == classNList[i]) { jg = 1; }\r\n                  if ('target' + data['id'] == classNList[i]) { jg = 1; }\r\n                }\r\n                if (jg == 1) {\r\n                  classN += \" activeS\";\r\n                }\r\n                return classN;\r\n              })\r\n          }\r\n        })\r\n        .on(\"mouseleave\", function (d) {\r\n          d3.select(this).attr(\"r\", r)\r\n          let classN = d3.select(this).attr(\"class\");\r\n          if (classN == 'linePoint') {\r\n            d3.select(this).attr(\"opacity\", 0).attr(\"r\", 5)\r\n          }\r\n          else {\r\n            d3.selectAll(\".f\" + data['id'])\r\n              .attr(\"transform\", function (d) {\r\n                let transformd = d3.select(this).attr(\"transform\")\r\n                return transformd.split(\" \")[0] + \" scale(1)\"\r\n              })\r\n            d3.selectAll(\"path\")\r\n              .attr(\"class\", function (d) {\r\n                let thisSelect = d3.select(this)\r\n                let classN = thisSelect.attr(\"class\");\r\n                let classNList = classN.split(\" \")\r\n                if (classNList[classNList.length - 1] == \"activeS\") {\r\n                  classN = \"\";\r\n                  for (let i = 0; i < classNList.length - 1; i++) {\r\n                    classN += classNList[i] + \" \";\r\n                  }\r\n                }\r\n                return classN\r\n              })\r\n          }\r\n        })\r\n        .on(\"mousedown\", function (d) {\r\n          d3.select(this).attr(\"r\", r);\r\n          d3.selectAll(\".f\" + data['id'])\r\n            .attr(\"transform\", function (d) {\r\n              let transformd = d3.select(this).attr(\"transform\")\r\n              return transformd.split(\" \")[0] + \" scale(1)\"\r\n            })\r\n          let thisId = this.id.split(\"_\")[1];\r\n          let thisData = oData.find(function (a) { return a['id'] == thisId })\r\n          let thisTime = thisData['time'];\r\n          _this.click_Ent(thisTime);\r\n          // console.log(thisTime,thisId,thisData)\r\n        })\r\n      // .on(\"\")\r\n    },\r\n    drawTimeLine(svg, path, stroke, width, stroke_dasharray = \"0\", idName, className) {\r\n      svg.append('path')\r\n        .attr('d', path.toString())\r\n        .attr('stroke', stroke)\r\n        .attr('class', className)\r\n        .attr('id', idName)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr('stroke-width', width)\r\n        .attr('fill', 'none')\r\n        .on('mouseover', function (d) {\r\n          let thisSelect = d3.select(this)\r\n          let classN = thisSelect.attr(\"class\");\r\n          let idN = thisSelect.attr(\"id\");\r\n          if (classN.split(\" \")[0] == \"basicRel\") {\r\n            d3.select(this).attr(\"class\", classN + \" activeS\");\r\n          }\r\n        })\r\n        .on('mouseleave', function (d) {\r\n          let thisSelect = d3.select(this)\r\n          let classN = thisSelect.attr(\"class\");\r\n          let classNList = classN.split(\" \")\r\n          if (classNList[classNList.length - 1] == \"activeS\") {\r\n            classN = \"\";\r\n            for (let i = 0; i < classNList.length - 1; i++) {\r\n              classN += classNList[i] + \" \";\r\n            }\r\n            d3.select(this).attr(\"class\", classN);\r\n          }\r\n        })\r\n    },\r\n    drawArc(svg, x, y, arcPath, stroke, fill, className, stroke_dasharray = \"0\", width = 3) {\r\n      svg.append(\"path\")\r\n        .attr(\"d\", arcPath)\r\n        .attr(\"class\", className)\r\n        .attr(\"transform\", \"translate(\" + x + \",\" + y + \")\")\r\n        .attr(\"stroke\", stroke)\r\n        .attr('stroke-width', width)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n        .attr(\"fill\", fill)\r\n    },\r\n    updata() {\r\n      \r\n    const _this = this;\r\n      let data = _this.data;\r\n      let maxDImportance = Math.max.apply(Math, data.map(function (d) { return d['attribute']['importance']; }))\r\n      let minDImportance = Math.min.apply(Math, data.map(function (d) { return d['attribute']['importance']; }))\r\n      let maxDRelevance = Math.max.apply(Math, data.map(function (d) { return d['attribute']['relevance']; }))\r\n      let minDRelevance = Math.min.apply(Math, data.map(function (d) { return d['attribute']['relevance']; }))\r\n      let maxDDuration = Math.max.apply(Math, data.map(function (d) { return tools.time2seconds(d['time'][1]) - tools.time2seconds(d['time'][0]); }))\r\n      let maxTotalDuration = Math.max.apply(Math, data.map(function (d) { return d['totalDuration']; }))\r\n\r\n      _this.minDImportance = minDImportance;\r\n      _this.maxDImportance = maxDImportance;\r\n      _this.minDRelevance = minDRelevance;\r\n      _this.maxDRelevance = maxDRelevance;\r\n      _this.maxDDuration = maxDDuration;\r\n      _this.maxTotalDuration = maxTotalDuration;\r\n\r\n      let currentMaxColor = _this.importanceMaxColor;\r\n      let currentMinColor = _this.importanceMinColor;\r\n      _this.importanceColor_linear = d3.scaleLinear().domain([minDImportance, maxDImportance]).range([0, 1]);\r\n      _this.importanceCompute_color = d3.interpolate(currentMinColor, currentMaxColor);\r\n      _this.relevanceScale_linear = d3.scaleLinear([minDRelevance, maxDRelevance], [20, 50])\r\n      _this.totalDurationScale_linear = d3.scaleLinear().domain([0, maxTotalDuration]).range([20, 60]);\r\n\r\n\r\n\r\n\r\n      _this.$bus.$emit(\"graphData\", _this.data);\r\n      _this.$bus.$emit(\"relData\", _this.relData);\r\n      // _this.drawtopicLine();\r\n      // _this.drawrootTree();\r\n      _this.draweditData();\r\n    },\r\n    click_Ent(time) {\r\n      this.$emit(\"timeDur\", time);\r\n    },\r\n  },\r\n  created() {\r\n    const _this = this;\r\n    this.$nextTick(() => {\r\n      _this.getTreeData();\r\n      _this.updata();\r\n\r\n    });\r\n  },\r\n  mounted() {\r\n    const _this = this\r\n    _this.tableData.find(function (d) { return d['key'] == 'name' })['value'] = 'Computer Network';\r\n    this.$bus.$on('selectEnt', (val) => {\r\n     console.log(val);\r\n     _this.curEntId = val;\r\n    });\r\n  },\r\n  // beforeDestroy() {\r\n  //   clearInterval(this.moveTimer);\r\n  // },\r\n} \r\n</script>\r\n\r\n<style>\r\n@import './index.css';\r\n</style>\r\n"],"sourceRoot":"src/components/EditPanel"}]}