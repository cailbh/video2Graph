{"remainingRequest":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\babel-loader\\lib\\index.js!D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Cailibuhong\\video2Graph\\video2Graph\\src\\components\\Graph\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\src\\components\\Graph\\index.vue","mtime":1691027005041},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\babel.config.js","mtime":1647570572000},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1688115046166},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\babel-loader\\lib\\index.js","mtime":1688115046651},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1688115046166},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\vue-loader\\lib\\index.js","mtime":1688115046800}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29ydC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7CmltcG9ydCB7IExvYWRpbmcgfSBmcm9tICdlbGVtZW50LXVpJzsKaW1wb3J0IHsgb25Nb3VudGVkLCByZWYgfSBmcm9tICd2dWUnOwppbXBvcnQgZmlsZW5hbWVzIGZyb20gIkAvdXRpbHMvZmlsZU5hbWUiOwppbXBvcnQgZG9tdG9pbWFnZSBmcm9tICdkb20tdG8taW1hZ2UnOwppbXBvcnQgVGVzdEpzb24gZnJvbSAiQC9hc3NldHMvanNvbi9jYXNlMV8xX2Zpbi5qc29uIjsKaW1wb3J0IFRlc3RSZWxKc29uIGZyb20gIkAvYXNzZXRzL2pzb24vY2FzZTFfZmluX3JlbC5qc29uIjsKaW1wb3J0IHRvb2xzIGZyb20gIkAvdXRpbHMvdG9vbHMuanMiOwppbXBvcnQgb2NyYWQgZnJvbSAiQC91dGlscy9vY3JhZC5qcyI7CmltcG9ydCB7IGNyZWF0ZVdvcmtlciB9IGZyb20gIkAvdXRpbHMvdGVzc2VyYWN0Lm1pbi5qcyI7CmltcG9ydCBUZXNzZXJhY3QgZnJvbSAnQC91dGlscy90ZXNzZXJhY3QubWluLmpzJzsgLy8gbGV0IHdvcmtlcj0gY3JlYXRlV29ya2VyKHsKLy8gICAgIC8vIGxhbmdQYXRoOiJAL2Fzc2V0cy9kYXRhIgovLyAgICAgd29ya2VyUGF0aDogJy91dGkvd29ya2VyLm1pbi5qcycsCi8vICAgICAvLyBjb3JlUGF0aDogJy4vdGVzc2VyYWN0LWNvcmUud2FzbS5qcycsCi8vICAgICAvLyBsYW5nUGF0aDogJ0Q6L0NhaWxpYnVob25nL3ZpZGVvMkdyYXBoL3ZpZGVvMkdyYXBoL3NyYy91dGlscy90ZXNzZXJhY3QnCi8vICAgfSk7OwovLyBjb25zb2xlLmxvZyh3b3JrZXIpCi8vIHdvcmtlci5sb2FkKCkKLy8gd29ya2VyLmxvYWRMYW5ndWFnZSgnZW5nJykKLy8gd29ya2VyLmluaXRpYWxpemUoJ2VuZycpCgpleHBvcnQgZGVmYXVsdCB7CiAgcHJvcHM6IFsidmlkZW9UaW1lIl0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGRhdGE6IFRlc3RKc29uLAogICAgICBlZGl0Q29uZmlybVNob3c6IGZhbHNlLAogICAgICBnRGF0YTogIlRlc3RKc29uIiwKICAgICAgcmVsRGF0YTogVGVzdFJlbEpzb24sCiAgICAgIGFzc2lzdEdUcmFuc2Zvcm1YOiAxMCwKICAgICAgYXNzaXN0R1RyYW5zZm9ybVk6IDEwMCwKICAgICAgcmVjb2duaXplVGV4dDogIiIsCiAgICAgIGxvYWRMb2FkaW5nOiBmYWxzZSwKICAgICAgZHJhd0VudGl0eUxvY2F0aW9uOiBbXSwKICAgICAgVmlkZW9FZGl0UGFuZWxTaG93OiBmYWxzZSwKICAgICAgc2hvd0VudGl0eUxpc3Q6IFtdLAogICAgICBzd2l0Y2hMOiBbXSwKICAgICAgb3ZlckVudGl0eUlkOiAnJywKICAgICAgb3ZlclRhcmdldEVudGl0eUlkOiAnJywKICAgICAgc2hvd0VudGl0eVJlbElkTGlzdDogW10sCiAgICAgIHNob3dFbnRpdHlSZWxJZE92ZXJTdGF0ZTogJycsCiAgICAgIHJvb3RFbnRpdHlMaXN0OiBbXSwKICAgICAgcm9vdFN2ZzogbnVsbCwKICAgICAgVGltZUF4aXNTdmc6IG51bGwsCiAgICAgIGdyb3Vwc1N2ZzogbnVsbCwKICAgICAgYXJjRzogbnVsbCwKICAgICAgY3VyRW50SWQ6ICcnLAogICAgICBpbnNlcnRFbnRJZDogJycsCiAgICAgIGVkaXREaXZTaG93OiBmYWxzZSwKICAgICAgbWluREltcG9ydGFuY2U6IDAsCiAgICAgIG1heERJbXBvcnRhbmNlOiAwLAogICAgICBtaW5EUmVsZXZhbmNlOiAwLAogICAgICBtYXhEUmVsZXZhbmNlOiAwLAogICAgICBtYXhERHVyYXRpb246IDAsCiAgICAgIHRpbWVBeGlzWDogMCwKICAgICAgdGltZUF4aXNXOiAyMDAsCiAgICAgIHRpbWVBeGlzRHJvcEZsYWc6IDAsCiAgICAgIHRpbWVBeGlzRG93blg6IDAsCiAgICAgIHRpbWVBeGlzRG93blc6IDYwLAogICAgICBtYXhUb3RhbER1cmF0aW9uOiAwLAogICAgICB2aWRlb0R1cmF0aW9uOiA2NjgsCiAgICAgIHRvdGFsRHVyYXRpb246IDEwMDAsCiAgICAgIGltcG9ydGFuY2VDb2xvcl9saW5lYXI6IG51bGwsCiAgICAgIGltcG9ydGFuY2VDb21wdXRlX2NvbG9yOiBudWxsLAogICAgICByZWxldmFuY2VTY2FsZV9saW5lYXI6IG51bGwsCiAgICAgIHRvdGFsRHVyYXRpb25TY2FsZV9saW5lYXI6IG51bGwsCiAgICAgIHN1bVRvdGFsRHVyYXRpb246IDAsCiAgICAgIC8vIGltcG9ydGFuY2VNaW5Db2xvcjogInJnYigxLCAxNjQsIDE4MykiLAogICAgICAvLyBpbXBvcnRhbmNlTWF4Q29sb3I6ICJyZ2IoMTA2LCA1MiwgMTI3KSIsCiAgICAgIHpvb21JblVybDogcmVxdWlyZSgiQC9hc3NldHMvaW1nL3pvb21Jbi5wbmciKSwKICAgICAgem9vbU91dFVybDogcmVxdWlyZSgiQC9hc3NldHMvaW1nL3pvb21PdXQucG5nIiksCiAgICAgIGVkaXRUb29sVXJsOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWcvZWRpdC5wbmciKSwKICAgICAgdGlwVXJsOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWcvdGlwLnBuZyIpLAogICAgICBlZGl0QWRkVXJsOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWcvZWRpdF9BZGQucG5nIiksCiAgICAgIGVkaXRBZGROVXJsOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWcvZWRpdF9BZGROLnBuZyIpLAogICAgICBlZGl0RGVsVXJsOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWcvZWRpdF9EZWxldGUucG5nIiksCiAgICAgIGVkaXRDb25maXJtVXJsOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWcv5bey55yLLnBuZyIpLAogICAgICBsYXlvdXRTaG93OiAyLAogICAgICBncmFwaEdUcmFuc2Zvcm1LOiAxLAogICAgICBncmFwaEdUcmFuc2Zvcm1YOiAxMCwKICAgICAgZ3JhcGhHVHJhbnNmb3JtWTogMTAwLAogICAgICBncmFwaEdNb3ZlWDogMTAsCiAgICAgIGdyYXBoU3ZnU2NhbGU6IDEsCiAgICAgIG1vdmVUaW1lcjogbnVsbCwKICAgICAgbW92ZUZsYWc6IGZhbHNlLAogICAgICBpbXBvcnRhbmNlTWluQ29sb3I6ICJyZ2IoMjAzLCAyMzAsIDIwOSkiLAogICAgICBpbXBvcnRhbmNlTWF4Q29sb3I6ICJyZ2IoMjIsIDE0NCwgMjA3KSIsCiAgICAgIHN0ZXBYOiAxNTAsCiAgICAgIHN0ZXBZOiAxMDAsCiAgICAgIGJ0blJlbDogZmFsc2UsCiAgICAgIGJ0blNpbTogZmFsc2UsCiAgICAgIGJ0bkFzbzogZmFsc2UsCiAgICAgIGJ0bkVkaTogZmFsc2UsCiAgICAgIGNpcmNsZUludGVydmFsOiA1NSwKICAgICAgd2lkdGg6IDAsCiAgICAgIGhlaWdodDogMCwKICAgICAgY3VyVG9vbFN0YXRlOiAndW5FZGl0JywKICAgICAgbWFyZ2luOiB7CiAgICAgICAgdG9wOiA4MCwKICAgICAgICByaWdodDogMjAsCiAgICAgICAgYm90dG9tOiAwLAogICAgICAgIGxlZnQ6IDIwCiAgICAgIH0sCiAgICAgIGNvbG9yOiBbInJnYigyNTUsNjAsNjApIiwgInJnYigwLCAxNzgsIDE3MSkiLCAvLyAicmdiKDI1NSw4MywyNTUpIiwKICAgICAgInJnYigyMzUsMTM1LDE2MikiLCAicmdiKDI1NSwxNzgsMTAxKSIsICJyZ2IoNjMsMTUxLDEzNCkiLCAicmdiKDgzLDI1NSwyNTUpIiwgInJnYigwLDEyMiwyNDQpIiwgInJnYigxNjgsMTY4LDI1NSkiLCAicmdiKDIwMCwyMDAsMjAwKSJdLAogICAgICBtY29sb3I6IFsicmdiKDEyNSwgNjYsIDIwNikiLCAicmdiKDI0OCwgMTM0LCAxMjQpIiwgInJnYig1MCwgMTk4LCAxOTEpIiwgInJnYigxMzUsIDEyNiwgMjUzKSIsICJyZ2IoMTk4LCAxMjEsIDEyMykiLCAicmdiKDI1MiwgMTc3LCA0OSkiLCAicmdiKDExMiwgMjAyLCAyMjkpIl0sCiAgICAgIC8vIG1jb2xvcjogWwogICAgICAvLyAgICJyZ2IoOTEsIDEwNywgMjU1KSIsCiAgICAgIC8vICAgInJnYigwLCAxNzgsIDE3MSkiLAogICAgICAvLyAgIC8vICJyZ2IoNiwgMjE0LCAxNjApIiwKICAgICAgLy8gICAicmdiKDI1NSwgMTIwLCA5MCkiLAogICAgICAvLyAgICJyZ2IoMTI1LCA5OCwgMjExKSIsCiAgICAgIC8vICAgInJnYigyNTUsIDExMywgMjEyKSIsCiAgICAgIC8vICAgInJnYigxMTIsIDIxNCwgMjU1KSIsCiAgICAgIC8vICAgInJnYigyNTUsIDE1OSwgMjgpIiwKICAgICAgLy8gICAicmdiKDI1NSwgNzcsIDEwOSkiLAogICAgICAvLyBdLAogICAgICBtRGFya2NvbG9yOiBbInJnYig5NSwgMzksIDE3OSkiLCAicmdiKDIyMSwgODMsIDcyKSIsICJyZ2IoMCwgMTU4LCAxNDgpIiwgInJnYig5MywgODgsIDIwMikiLCAicmdiKDE4MCwgNzIsIDc5KSIsICJyZ2IoMjAyLCAxMzQsIDMyKSIsICJyZ2IoNDYsIDE3NCwgMjAyKSJdLAogICAgICBtTGlnbnRjb2xvcjogWyIjZmY5YzljIiwgIiNjYzg4YjAiLCAiI2ZmYThmZiIsICIjZTNiMDk3IiwgIiNmNGMzZDAiLCAiI2Y0ZjRkMCIsICIjZmZkOGIxIiwgIiM5ZWNhYzIiLCAiI2E4Y2NmZiIsICIjOTdlM2JhIiwgIiM2ZjhiZTAiLCAicmdiKDAsMTIyLDI0NCkiLCAiI2I2YTJmNyIsICJyZ2IoMTY4LDE2OCwyNTUpIiwgInJnYigyMDAsMjAwLDIwMCkiXSwKICAgICAgZWRpdFZpZGVvSmFnZTogZmFsc2UsCiAgICAgIGVkaXRWaWRlb1NQOiBbXSwKICAgICAgZWRpdFZpZGVvRVA6IFtdCiAgICB9OwogIH0sCiAgd2F0Y2g6IHsKICAgIHR5cGU6IGZ1bmN0aW9uIHR5cGUodmFsKSB7fSwKICAgIHN3aXRjaEw6IHsKICAgICAgZGVlcDogdHJ1ZSwKICAgICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcih2YWwpIHsKICAgICAgICB0aGlzLmJ0blJlbCA9IHZhbFswXTsKICAgICAgICB0aGlzLmJ0blNpbSA9IHZhbFsxXTsKICAgICAgICB0aGlzLmJ0bkFzbyA9IHZhbFsyXTsKICAgICAgICB0aGlzLmJ0bkVkaSA9IHZhbFszXTsKICAgICAgICB0aGlzLnVwZGF0YVJlbCgpOwogICAgICB9CiAgICB9LAogICAgcmVjb2duaXplVGV4dDogZnVuY3Rpb24gcmVjb2duaXplVGV4dCh2YWwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIF90aGlzLiRidXMuJGVtaXQoInJlY29nbml6ZVRleHQiLCBbMSwgdmFsXSk7CiAgICB9LAogICAgdGltZUF4aXNYOiBmdW5jdGlvbiB0aW1lQXhpc1godmFsKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBfdGhpcy51cGRhdGFUaW1lQXhpc0R1cihfdGhpcy5UaW1lQXhpc1N2ZywgX3RoaXMudGltZUF4aXNYLCBfdGhpcy50aW1lQXhpc1cpOwogICAgfSwKICAgIGN1ckVudElkOiBmdW5jdGlvbiBjdXJFbnRJZCh2YWwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIF90aGlzLm92ZXJFbnRpdHlJZCA9IHZhbDsKICAgICAgY29uc29sZS5sb2codmFsKTsKCiAgICAgIF90aGlzLiRidXMuJGVtaXQoInNlbGVjdEUiLCB2YWwpOwoKICAgICAgdmFyIGVudGl0eUxvY2F0aW9uRGF0YSA9IF90aGlzLmRyYXdFbnRpdHlMb2NhdGlvbjsKICAgICAgdmFyIHJlbERhdGEgPSBfdGhpcy5yZWxEYXRhOwogICAgICB2YXIgc2hvd0phZ2VEYXRhID0gX3RoaXMuc2hvd0VudGl0eUxpc3Q7CiAgICAgIHZhciBiYXNpY1JlbCA9IHJlbERhdGFbJ2Jhc2ljUmVsJ107CgogICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChyKSB7CiAgICAgICAgdmFyIHNvcmNlSWQgPSBiYXNpY1JlbFtyXVswXTsKICAgICAgICB2YXIgdGFyZ2V0SWQgPSBiYXNpY1JlbFtyXVsxXTsKICAgICAgICB2YXIgc29yY2VKYWdlID0gc2hvd0phZ2VEYXRhLmZpbmQoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgIHJldHVybiBkWydpZCddID09IHNvcmNlSWQ7CiAgICAgICAgfSlbJ3Nob3cnXTsKICAgICAgICB2YXIgdGFyZ2V0SmFnZSA9IHNob3dKYWdlRGF0YS5maW5kKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICByZXR1cm4gZFsnaWQnXSA9PSB0YXJnZXRJZDsKICAgICAgICB9KVsnc2hvdyddOwoKICAgICAgICBpZiAoc29yY2VKYWdlICYmIHRhcmdldEphZ2UpIHsKICAgICAgICAgIHZhciB0cm5JZCA9ICctMSc7CgogICAgICAgICAgaWYgKHNvcmNlSWQgPT0gcGFyc2VJbnQodmFsKSkgewogICAgICAgICAgICB0cm5JZCA9IHRhcmdldElkOwogICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXRJZCA9PSBwYXJzZUludCh2YWwpKSB7CiAgICAgICAgICAgIHRybklkID0gc29yY2VJZDsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAodHJuSWQgIT0gJy0xJykgewogICAgICAgICAgICB2YXIgY3VyRW50ID0gZW50aXR5TG9jYXRpb25EYXRhLmZpbmQoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoZFsnaWQnXSkgPT0gdHJuSWQ7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBfdGhpcy5hc3Npc3RHVHJhbnNmb3JtWCA9IHBhcnNlSW50KC1jdXJFbnRbJ3gnXSkgKyBwYXJzZUZsb2F0KGN1ckVudFsnciddKSArIDE1MDsKICAgICAgICAgICAgX3RoaXMuYXNzaXN0R1RyYW5zZm9ybVkgPSBwYXJzZUludCgtY3VyRW50Wyd5J10pICsgcGFyc2VGbG9hdChjdXJFbnRbJ3InXSkgKyAzMDA7CgogICAgICAgICAgICBfdGhpcy51cGRhdGFBc3Npc3RHcmFwaFBhbmVsKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OwoKICAgICAgZm9yICh2YXIgciA9IDA7IHIgPCBiYXNpY1JlbC5sZW5ndGg7IHIrKykgewogICAgICAgIF9sb29wKHIpOwogICAgICB9CgogICAgICA7CiAgICAgIHZhciBzaW1pbGFyaXR5UmVsID0gcmVsRGF0YVsnc2ltaWxhcml0eVJlbCddOwoKICAgICAgdmFyIF9sb29wMiA9IGZ1bmN0aW9uIF9sb29wMihfcikgewogICAgICAgIHZhciBzb3JjZUlkID0gc2ltaWxhcml0eVJlbFtfcl1bMF07CiAgICAgICAgdmFyIHRhcmdldElkID0gc2ltaWxhcml0eVJlbFtfcl1bMV07CiAgICAgICAgdmFyIHNvcmNlSmFnZSA9IHNob3dKYWdlRGF0YS5maW5kKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICByZXR1cm4gZFsnaWQnXSA9PSBzb3JjZUlkOwogICAgICAgIH0pWydzaG93J107CiAgICAgICAgdmFyIHRhcmdldEphZ2UgPSBzaG93SmFnZURhdGEuZmluZChmdW5jdGlvbiAoZCkgewogICAgICAgICAgcmV0dXJuIGRbJ2lkJ10gPT0gdGFyZ2V0SWQ7CiAgICAgICAgfSlbJ3Nob3cnXTsKCiAgICAgICAgaWYgKHNvcmNlSmFnZSAmJiB0YXJnZXRKYWdlKSB7CiAgICAgICAgICB2YXIgdHJuSWQgPSAnLTEnOwoKICAgICAgICAgIGlmIChzb3JjZUlkID09IHBhcnNlSW50KHZhbCkpIHsKICAgICAgICAgICAgdHJuSWQgPSB0YXJnZXRJZDsKICAgICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0SWQgPT0gcGFyc2VJbnQodmFsKSkgewogICAgICAgICAgICB0cm5JZCA9IHNvcmNlSWQ7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHRybklkICE9ICctMScpIHsKICAgICAgICAgICAgdmFyIGN1ckVudCA9IGVudGl0eUxvY2F0aW9uRGF0YS5maW5kKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGRbJ2lkJ10pID09IHRybklkOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgX3RoaXMuYXNzaXN0R1RyYW5zZm9ybVggPSBwYXJzZUludCgtY3VyRW50Wyd4J10pICsgcGFyc2VGbG9hdChjdXJFbnRbJ3InXSkgKyAxNTA7CiAgICAgICAgICAgIF90aGlzLmFzc2lzdEdUcmFuc2Zvcm1ZID0gcGFyc2VJbnQoLWN1ckVudFsneSddKSArIHBhcnNlRmxvYXQoY3VyRW50WydyJ10pICsgMzAwOwoKICAgICAgICAgICAgX3RoaXMudXBkYXRhQXNzaXN0R3JhcGhQYW5lbCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfTsKCiAgICAgIGZvciAodmFyIF9yID0gMDsgX3IgPCBzaW1pbGFyaXR5UmVsLmxlbmd0aDsgX3IrKykgewogICAgICAgIF9sb29wMihfcik7CiAgICAgIH0KCiAgICAgIDsKICAgIH0sCiAgICBvdmVyRW50aXR5SWQ6IGZ1bmN0aW9uIG92ZXJFbnRpdHlJZCh2YWwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIF90aGlzLiRidXMuJGVtaXQoIm92ZXJFbnRpdHlJZCIsIHZhbCk7CgogICAgICB2YXIgcmVsTGlzdCA9IFtdOwogICAgICB2YXIgcmVsUm9vdExpc3QgPSBbXTsKICAgICAgdmFyIHJlbERhdGEgPSBfdGhpcy5yZWxEYXRhOwogICAgICB2YXIgb0RhdGEgPSBfdGhpcy5kcmF3RW50aXR5TG9jYXRpb247CiAgICAgIHZhciBiYXNpY1JlbCA9IHJlbERhdGFbJ2Jhc2ljUmVsJ107CiAgICAgIGQzLnNlbGVjdEFsbCgnLnRpbWVUZXh0JykuYXR0cigib3BhY2l0eSIsIDApOwogICAgICBkMy5zZWxlY3RBbGwoJy50aW1lQXhpc0VudCcpLmF0dHIoInN0cm9rZS13aWR0aCIsIDApLmF0dHIoIm9wYWNpdHkiLCAwLjQpLmF0dHIoInN0cm9rZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgY2lkID0gZDMuc2VsZWN0KHRoaXMpLmF0dHIoImlkIikuc3BsaXQoIl8iKVsxXTsKICAgICAgICB2YXIgbmQgPSBvRGF0YS5maW5kKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICByZXR1cm4gZFsnaWQnXSA9PSBjaWQ7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIG5kWydjb2xvckQnXTsKICAgICAgfSk7CgogICAgICB2YXIgX2xvb3AzID0gZnVuY3Rpb24gX2xvb3AzKHJlKSB7CiAgICAgICAgdmFyIHNvcmNlSWQgPSBiYXNpY1JlbFtyZV1bMF07CiAgICAgICAgdmFyIHRhcmdldElkID0gYmFzaWNSZWxbcmVdWzFdOwogICAgICAgIHZhciBjTm9kZSA9ICcnOwoKICAgICAgICBpZiAoc29yY2VJZCA9PSB2YWwpIHsKICAgICAgICAgIGNOb2RlID0gb0RhdGEuZmluZChmdW5jdGlvbiAoZCkgewogICAgICAgICAgICByZXR1cm4gZFsnaWQnXSA9PSB0YXJnZXRJZDsKICAgICAgICAgIH0pOwogICAgICAgICAgcmVsTGlzdC5wdXNoKHRhcmdldElkKTsKICAgICAgICAgIHJlbFJvb3RMaXN0LnB1c2goY05vZGVbJ3Jvb3RJbmRleCddKTsKICAgICAgICB9CgogICAgICAgIGlmICh0YXJnZXRJZCA9PSB2YWwpIHsKICAgICAgICAgIGNOb2RlID0gb0RhdGEuZmluZChmdW5jdGlvbiAoZCkgewogICAgICAgICAgICByZXR1cm4gZFsnaWQnXSA9PSBzb3JjZUlkOwogICAgICAgICAgfSk7CiAgICAgICAgICByZWxMaXN0LnB1c2goc29yY2VJZCk7CiAgICAgICAgICByZWxSb290TGlzdC5wdXNoKGNOb2RlWydyb290SW5kZXgnXSk7CiAgICAgICAgfQogICAgICB9OwoKICAgICAgZm9yICh2YXIgcmUgPSAwOyByZSA8IGJhc2ljUmVsLmxlbmd0aDsgcmUrKykgewogICAgICAgIF9sb29wMyhyZSk7CiAgICAgIH0KCiAgICAgIDsKICAgICAgcmVsTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChzZWxmLCBpbmR4LCBhcnIpIHsKICAgICAgICBkMy5zZWxlY3QoIiN0aW1lQXhpc0VudF8iLmNvbmNhdChzZWxmKSkuYXR0cigic3Ryb2tlIiwgJ3doaXRlJykuYXR0cigic3Ryb2tlLXdpZHRoIiwgMikuYXR0cigib3BhY2l0eSIsIDEpOwogICAgICAgIGQzLnNlbGVjdCgiI3RpbWVUZXh0XyIuY29uY2F0KHNlbGYsICJfMCIpKS5hdHRyKCJvcGFjaXR5IiwgMSk7CiAgICAgIH0pOwogICAgICBkMy5zZWxlY3QoIiN0aW1lQXhpc0VudF8iLmNvbmNhdCh2YWwpKS5hdHRyKCJzdHJva2Utd2lkdGgiLCAyKS5hdHRyKCJvcGFjaXR5IiwgMSk7CiAgICAgIGQzLnNlbGVjdCgiI3RpbWVUZXh0XyIuY29uY2F0KHZhbCwgIl8wIikpLmF0dHIoIm9wYWNpdHkiLCAxKTsKICAgIH0sCiAgICBzaG93RW50aXR5UmVsSWRMaXN0OiBmdW5jdGlvbiBzaG93RW50aXR5UmVsSWRMaXN0KHZhbCkgewogICAgICB0aGlzLnVwZGF0YVJlbCgpOwogICAgfSwKICAgIGdyb3Vwc1N2ZzogewogICAgICBkZWVwOiB0cnVlLAogICAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKCkgewogICAgICAgIHRoaXMudXBkYXRhQXNzaXN0R3JhcGhQYW5lbCgpOwogICAgICB9CiAgICB9LAogICAgZ0RhdGE6IGZ1bmN0aW9uIGdEYXRhKHZhbCkge30sCiAgICBsYXlvdXRTaG93OiBmdW5jdGlvbiBsYXlvdXRTaG93KHZhbCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIHNob3dFbnRpdHlMaXN0ID0gdG9vbHMuZGVlcENsb25lKF90aGlzLmRhdGEpOwoKICAgICAgZm9yICh2YXIgZSBpbiBzaG93RW50aXR5TGlzdCkgewogICAgICAgIGlmIChwYXJzZUludChzaG93RW50aXR5TGlzdFtlXVsnbGF5b3V0J10pIDwgcGFyc2VJbnQodmFsKSkgc2hvd0VudGl0eUxpc3RbZV1bJ3Nob3cnXSA9IHRydWU7ZWxzZSB7CiAgICAgICAgICBzaG93RW50aXR5TGlzdFtlXVsnc2hvdyddID0gZmFsc2U7CiAgICAgICAgfQogICAgICB9CgogICAgICBfdGhpcy5zaG93RW50aXR5TGlzdCA9IHNob3dFbnRpdHlMaXN0OwoKICAgICAgX3RoaXMudXBkYXRhR3JhcGgoKTsKICAgIH0sCiAgICBkYXRhOiBmdW5jdGlvbiBkYXRhKHZhbCkge30sCiAgICB2aWRlb1RpbWU6IGZ1bmN0aW9uIHZpZGVvVGltZSh2YWwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBlbnRpdHlMb2NhdGlvbkRhdGEgPSBfdGhpcy5kcmF3RW50aXR5TG9jYXRpb247CgogICAgICBmb3IgKHZhciBlID0gMDsgZSA8IGVudGl0eUxvY2F0aW9uRGF0YS5sZW5ndGg7IGUrKykgewogICAgICAgIHZhciBjdXJEID0gZW50aXR5TG9jYXRpb25EYXRhW2VdOwogICAgICAgIHZhciB0aW1lU3RhcnQgPSB0b29scy50aW1lMnNlY29uZHMoZW50aXR5TG9jYXRpb25EYXRhW2VdWyd0aW1lJ11bMF0pOwogICAgICAgIHZhciB0aW1lRW5kID0gdG9vbHMudGltZTJzZWNvbmRzKGVudGl0eUxvY2F0aW9uRGF0YVtlXVsndGltZSddWzFdKTsKCiAgICAgICAgaWYgKHZhbCA+IHRpbWVTdGFydCAmJiB2YWwgPCB0aW1lRW5kKSB7CiAgICAgICAgICB2YXIgZW50WCA9IGVudGl0eUxvY2F0aW9uRGF0YVtlXVsneCddOwogICAgICAgICAgdmFyIGVudFkgPSBlbnRpdHlMb2NhdGlvbkRhdGFbZV1bJ3knXTsKICAgICAgICAgIHZhciBlbnRSID0gZW50aXR5TG9jYXRpb25EYXRhW2VdWydyJ107CiAgICAgICAgICB2YXIgbW92ZUxpbmVhciA9IGQzLnNjYWxlTGluZWFyKFt0aW1lU3RhcnQsIHRpbWVFbmRdLCBbZW50WCAtIGVudFIsIGVudFggKyBlbnRSXSk7CiAgICAgICAgICBfdGhpcy5ncmFwaEdUcmFuc2Zvcm1YID0gLW1vdmVMaW5lYXIodmFsKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBncmFwaEdNb3ZlWDogZnVuY3Rpb24gZ3JhcGhHTW92ZVgodmFsKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgZGF0YSA9IF90aGlzLmRyYXdFbnRpdHlMb2NhdGlvbjsKICAgICAgdmFyIHN0amcgPSAwOwogICAgICB2YXIgZW5qZyA9IDA7CiAgICAgIHZhciBzbm9kZSA9ICcnOwogICAgICB2YXIgZW5vZGUgPSAnJzsKICAgICAgdmFyIHdpZHRoID0gMTU5MDsKICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChzZWxmLCBpbmR4LCBhcnIpIHsKICAgICAgICB2YXIgZW50eCA9IHNlbGZbJ3gnXSAqIF90aGlzLmdyYXBoR1RyYW5zZm9ybUs7CiAgICAgICAgdmFyIHRyYW5zZm9ybVggPSBlbnR4ICsgdmFsOwoKICAgICAgICBpZiAodHJhbnNmb3JtWCA+IDAgJiYgdHJhbnNmb3JtWCA8IHdpZHRoKSB7CiAgICAgICAgICBzdGpnKys7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmIChzdGpnID4gMCAmJiBlbmpnID09IDApIHsKICAgICAgICAgICAgZW5vZGUgPSBzZWxmOwogICAgICAgICAgICBlbmpnID0gMTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChzdGpnID09IDEpIHsKICAgICAgICAgIHNub2RlID0gc2VsZjsKICAgICAgICB9CiAgICAgIH0pOwogICAgICB2YXIgZXcgPSBlbm9kZVsndGltZVcnXTsKCiAgICAgIGlmIChzbm9kZSA9PSAnJykgewogICAgICAgIF90aGlzLnRpbWVBeGlzWCA9IDA7CiAgICAgIH0gZWxzZSBfdGhpcy50aW1lQXhpc1ggPSBzbm9kZVsndGltZVgnXTsKCiAgICAgIF90aGlzLnRpbWVBeGlzVyA9IGVub2RlWyd0aW1lWCddIC0gc25vZGVbJ3RpbWVYJ10gKyBlbm9kZVsndGltZVcnXTsKCiAgICAgIGlmIChldyA9PSB1bmRlZmluZWQpIHsKICAgICAgICBfdGhpcy50aW1lQXhpc1cgPSB3aWR0aCAtIHNub2RlWyd0aW1lWCddOwogICAgICB9CiAgICB9LAogICAgZ3JhcGhHVHJhbnNmb3JtWDogZnVuY3Rpb24gZ3JhcGhHVHJhbnNmb3JtWCh2YWwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBncm91cHMgPSBfdGhpcy5ncm91cHNTdmc7CiAgICAgIF90aGlzLmdyYXBoR01vdmVYID0gX3RoaXMuZ3JhcGhHVHJhbnNmb3JtWDsKICAgICAgdmFyIGdyYXBoR1RyYW5zZm9ybVggPSBfdGhpcy5ncmFwaEdUcmFuc2Zvcm1YOwogICAgICB2YXIgZ3JhcGhHVHJhbnNmb3JtWSA9IF90aGlzLmdyYXBoR1RyYW5zZm9ybVk7CiAgICAgIHZhciBncmFwaEdUcmFuc2Zvcm1LID0gX3RoaXMuZ3JhcGhHVHJhbnNmb3JtSzsKICAgICAgZ3JvdXBzLmF0dHIoInRyYW5zZm9ybSIsICJ0cmFuc2xhdGUoIiArIGdyYXBoR1RyYW5zZm9ybVggKyAnLCcgKyBncmFwaEdUcmFuc2Zvcm1ZICsgIikgc2NhbGUoIiArIGdyYXBoR1RyYW5zZm9ybUsgKyAiKSIpOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgYWRkTm9kZTogZnVuY3Rpb24gYWRkTm9kZSgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIF90aGlzLmVkaXRDb25maXJtU2hvdyA9IHRydWUsIF90aGlzLlZpZGVvRWRpdFBhbmVsU2hvdyA9IHRydWUsIF90aGlzLmVkaXREaXZTaG93ID0gZmFsc2U7CgogICAgICBfdGhpcy4kYnVzLiRlbWl0KCJyZWNvZ25pemVUZXh0IiwgWzEsICJQbGVhc2Ugc2VsZWN0IG9uIHRoZSB2aWRlbyJdKTsKCiAgICAgIGQzLnNlbGVjdCgiI1ZpZGVvRWRpdFBhbmVsIikuc2VsZWN0KCJzdmciKS5yZW1vdmUoKTsKICAgICAgdmFyIHN2ZyA9IGQzLnNlbGVjdCgiI1ZpZGVvRWRpdFBhbmVsIikuYXBwZW5kKCJzdmciKS5hdHRyKCJ3aWR0aCIsICI5NDYiKS5hdHRyKCJoZWlnaHQiLCAiNTUzIik7CiAgICAgIHN2Zy5vbigibW91c2Vkb3duIiwgZnVuY3Rpb24gKGQpIHsKICAgICAgICBfdGhpcy5lZGl0VmlkZW9TUCA9IFtkLmxheWVyWCwgZC5sYXllclldOwogICAgICAgIF90aGlzLmVkaXRWaWRlb0phZ2UgPSB0cnVlOwogICAgICB9KS5vbigibW91c2Vtb3ZlIiwgZnVuY3Rpb24gKGQpIHsKICAgICAgICBpZiAoX3RoaXMuZWRpdFZpZGVvSmFnZSkgewogICAgICAgICAgdmFyIHNQID0gX3RoaXMuZWRpdFZpZGVvU1A7CiAgICAgICAgICBfdGhpcy5lZGl0VmlkZW9FUCA9IFtkLmxheWVyWCwgZC5sYXllclldOwogICAgICAgICAgdmFyIGVQID0gW2QubGF5ZXJYLCBkLmxheWVyWV07CiAgICAgICAgICB2YXIgZVggPSBzUFswXSA+IGVQWzBdID8gc1BbMF0gOiBlUFswXTsKICAgICAgICAgIHZhciBlWSA9IHNQWzFdID4gZVBbMV0gPyBzUFsxXSA6IGVQWzFdOwogICAgICAgICAgdmFyIHNYID0gc1BbMF0gPCBlUFswXSA/IHNQWzBdIDogZVBbMF07CiAgICAgICAgICB2YXIgc1kgPSBzUFsxXSA8IGVQWzFdID8gc1BbMV0gOiBlUFsxXTsKCiAgICAgICAgICBfdGhpcy5kcmF3UmVjdChzdmcsIHNYLCBzWSwgTWF0aC5hYnMoZVggLSBzWCksIE1hdGguYWJzKGVZIC0gc1kpLCAwLCAwLCAicmdiYSgwLDAsMCwwKSIsIDEsICJyZWQiLCAidmlkZW9SZWN0Iik7CiAgICAgICAgfQogICAgICB9KS5vbigibW91c2V1cCIsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgX3RoaXMuZWRpdFZpZGVvSmFnZSA9IGZhbHNlOwogICAgICAgIHZhciBzUCA9IF90aGlzLmVkaXRWaWRlb1NQOwogICAgICAgIHZhciBlUCA9IFtkLmxheWVyWCwgZC5sYXllclldOwogICAgICAgIDsKICAgICAgICB2YXIgZVggPSBzUFswXSA+IGVQWzBdID8gc1BbMF0gOiBlUFswXTsKICAgICAgICB2YXIgZVkgPSBzUFsxXSA+IGVQWzFdID8gc1BbMV0gOiBlUFsxXTsKICAgICAgICB2YXIgc1ggPSBzUFswXSA8IGVQWzBdID8gc1BbMF0gOiBlUFswXTsKICAgICAgICB2YXIgc1kgPSBzUFsxXSA8IGVQWzFdID8gc1BbMV0gOiBlUFsxXTsKICAgICAgICB2YXIgcGxheWVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInBsYXlWaWRlbyIpOyAvL+iOt+WPlnZpZGVv55qERG9t6IqC54K5CgogICAgICAgIHBsYXllci5zZXRBdHRyaWJ1dGUoImNyb3NzT3JpZ2luIiwgImFub255bW91cyIpOyAvL+a3u+WKoHNyb3NzT3JpZ2lu5bGe5oCn77yM6Kej5Yaz6Leo5Z+f6Zeu6aKYCgogICAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJjYW52YXMiKTsKICAgICAgICBjYW52YXMud2lkdGggPSBwbGF5ZXIuY2xpZW50V2lkdGg7CiAgICAgICAgY2FudmFzLmhlaWdodCA9IHBsYXllci5jbGllbnRIZWlnaHQ7IC8vIGNhbnZhcyA9IGNhbnZhcy5nZXRDb250ZXh0KCIyZCIpCgogICAgICAgIGNhbnZhcy5nZXRDb250ZXh0KCIyZCIpLmRyYXdJbWFnZShwbGF5ZXIsIDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7IC8v5oiqCgogICAgICAgIHZhciBkYXRhID0gY2FudmFzLmdldENvbnRleHQoIjJkIikuZ2V0SW1hZ2VEYXRhKHNYLCBzWSwgZVggLSBzWCwgZVkgLSBzWSk7IC8vIGNvbnN0IGRhdGEgPSBjYW52YXMuZ2V0Q29udGV4dCgiMmQiKS5nZXRJbWFnZURhdGEoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTsKCiAgICAgICAgdmFyIGNhbnZhc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJjYW52YXMiKTsKICAgICAgICBjYW52YXNzLndpZHRoID0gZVggLSBzWDsKICAgICAgICBjYW52YXNzLmhlaWdodCA9IGVZIC0gc1k7CiAgICAgICAgY2FudmFzcy5nZXRDb250ZXh0KCIyZCIpLnB1dEltYWdlRGF0YShkYXRhLCAwLCAwKTsKICAgICAgICB2YXIgZGF0YVVSTCA9IGNhbnZhc3MudG9EYXRhVVJMKCJpbWFnZS9wbmciKTsgLy/lsIblm77niYfovazmiJBiYXNlNjTmoLzlvI8KCiAgICAgICAgdmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpOwogICAgICAgIGltZy5zcmMgPSBkYXRhVVJMOwogICAgICAgIFRlc3NlcmFjdC5yZWNvZ25pemUoY2FudmFzcywgJ2VuZycsIHsKICAgICAgICAgIGxvZ2dlcjogZnVuY3Rpb24gbG9nZ2VyKG0pIHsKICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKG0pOwogICAgICAgICAgfQogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGQpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKGQuZGF0YS50ZXh0KTsKCiAgICAgICAgICBfdGhpcy4kYnVzLiRlbWl0KCJyZWNvZ25pemVUZXh0IiwgWzEsIGQuZGF0YS50ZXh0XSk7CiAgICAgICAgfSk7IC8vIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJWaWRlb0VkaXRQYW5lbCIpLmFwcGVuZENoaWxkKGltZyk7ICAgLy/mmL7npLrlnKjpobXpnaLkuK0KICAgICAgICAvLyB2YXIgc3RyaW5nID0gb2NyYWQoY2FudmFzcyk7CiAgICAgICAgLy8gY29uc29sZS5sb2coc3RyaW5nKQogICAgICAgIC8vIGFsZXJ0KHN0cmluZyk7CiAgICAgIH0pOwogICAgfSwKICAgIC8vIFZpZGVvRWRpdFBhbmVsU2hvdyh2YWwpIHsKICAgIC8vICAgY29uc3QgX3RoaXMgPSB0aGlzOwogICAgLy8gICBpZiAodmFsKSB7CiAgICAvLyAgICAgbGV0IHdpZHRoID0gX3RoaXMuJHJlZnMuVmlkZW9FZGl0UGFuZWwub2Zmc2V0V2lkdGg7CiAgICAvLyAgICAgbGV0IGhlaWdodCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJWaWRlb0VkaXRQYW5lbCIpLmNsaWVudEhlaWdodDsKICAgIC8vICAgICBkMy5zZWxlY3QoIiNWaWRlb0VkaXRQYW5lbCIpLnNlbGVjdCgic3ZnIikucmVtb3ZlKCkKICAgIC8vICAgICB2YXIgc3ZnID0gZDMuc2VsZWN0KCIjVmlkZW9FZGl0UGFuZWwiKS5hcHBlbmQoInN2ZyIpCiAgICAvLyAgICAgICAuYXR0cigid2lkdGgiLCB3aWR0aCkKICAgIC8vICAgICAgIC5hdHRyKCJoZWlnaHQiLCBoZWlnaHQpOwogICAgLy8gICB9CiAgICAvLyB9LAogICAgYWRkTm9kZU46IGZ1bmN0aW9uIGFkZE5vZGVOKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgX3RoaXMuZWRpdERpdlNob3cgPSBmYWxzZTsKICAgIH0sCiAgICBkZWxOb2RlOiBmdW5jdGlvbiBkZWxOb2RlKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgX3RoaXMuZWRpdERpdlNob3cgPSBmYWxzZTsKICAgIH0sCiAgICBlZGl0VG9vbENsazogZnVuY3Rpb24gZWRpdFRvb2xDbGsoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBpZiAoX3RoaXMuY3VyVG9vbFN0YXRlID09ICdlZGl0JykgX3RoaXMuY3VyVG9vbFN0YXRlID0gJ3VuRWRpdCc7ZWxzZSBpZiAoX3RoaXMuY3VyVG9vbFN0YXRlICE9ICdlZGl0JykgX3RoaXMuY3VyVG9vbFN0YXRlID0gJ2VkaXQnOwogICAgICB0aGlzLiRlbWl0KCJ0b29sU3RhdGUiLCB0aGlzLmN1clRvb2xTdGF0ZSk7CiAgICB9LAogICAgZWRpdENvbmZpcm06IGZ1bmN0aW9uIGVkaXRDb25maXJtKCkgewogICAgICBjb25zb2xlLmxvZygiY29uZmlybSIpOwoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIF90aGlzLmxvYWRMb2FkaW5nID0gdHJ1ZTsKICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgX3RoaXMubG9hZExvYWRpbmcgPSBmYWxzZTsKICAgICAgfSwgMjAwMCk7CiAgICAgIF90aGlzLmVkaXREaXZTaG93ID0gZmFsc2U7CiAgICAgIF90aGlzLmVkaXRDb25maXJtU2hvdyA9IGZhbHNlOwogICAgICBfdGhpcy5WaWRlb0VkaXRQYW5lbFNob3cgPSBmYWxzZTsKCiAgICAgIF90aGlzLiRidXMuJGVtaXQoInJlY29nbml6ZVRleHQiLCBbMCwgIiJdKTsKICAgIH0sCiAgICB1cGRhdGFSZWw6IGZ1bmN0aW9uIHVwZGF0YVJlbCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciByZWxEYXRhID0gX3RoaXMucmVsRGF0YTsKICAgICAgdmFyIG9EYXRhID0gX3RoaXMuZHJhd0VudGl0eUxvY2F0aW9uOwogICAgICB2YXIgc2hvd0phZ2VEYXRhID0gX3RoaXMuc2hvd0VudGl0eUxpc3Q7CiAgICAgIHZhciBzaG93UmVsID0gX3RoaXMuc2hvd0VudGl0eVJlbElkTGlzdDsKICAgICAgdmFyIGJhc2ljUmVsID0gcmVsRGF0YVsnYmFzaWNSZWwnXTsKCiAgICAgIGlmIChfdGhpcy5idG5SZWwpIHsKICAgICAgICBpZiAoX3RoaXMuYnRuU2ltKSB7CiAgICAgICAgICBkMy5zZWxlY3RBbGwoJy5zaW1pbGFyaXR5UmVsJykuYXR0cignb3BhY2l0eScsIDEpOwogICAgICAgIH0gZWxzZSBpZiAoIV90aGlzLmJ0blNpbSkgewogICAgICAgICAgZDMuc2VsZWN0QWxsKCcuc2ltaWxhcml0eVJlbCcpLmF0dHIoJ29wYWNpdHknLCAwKTsKICAgICAgICB9CgogICAgICAgIGlmIChfdGhpcy5idG5Bc28pIHsKICAgICAgICAgIGQzLnNlbGVjdEFsbCgnLmJhc2ljUmVsJykuYXR0cignb3BhY2l0eScsIDEpOwogICAgICAgIH0gZWxzZSBpZiAoIV90aGlzLmJ0bkFzbykgewogICAgICAgICAgZDMuc2VsZWN0QWxsKCcuYmFzaWNSZWwnKS5hdHRyKCdvcGFjaXR5JywgMCk7CiAgICAgICAgfSAvLyBkMy5zZWxlY3RBbGwoJy5zaW1pbGFyaXR5UmVsJykuYXR0cignb3BhY2l0eScsIDEpOwogICAgICAgIC8vIGQzLnNlbGVjdEFsbCgnLmJhc2ljUmVsJykuYXR0cignb3BhY2l0eScsIDEpOwoKICAgICAgfSBlbHNlIGlmICghX3RoaXMuYnRuUmVsKSB7CiAgICAgICAgZDMuc2VsZWN0QWxsKCcuc2ltaWxhcml0eVJlbCcpLmF0dHIoJ29wYWNpdHknLCAwKTsKICAgICAgICBkMy5zZWxlY3RBbGwoJy5iYXNpY1JlbCcpLmF0dHIoJ29wYWNpdHknLCAwKTsKICAgICAgfQoKICAgICAgaWYgKCFfdGhpcy5idG5SZWwgfHwgIV90aGlzLmJ0bkFzbykgewogICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgYmFzaWNSZWwubGVuZ3RoOyByKyspIHsKICAgICAgICAgIHZhciBzb3JjZUlkID0gYmFzaWNSZWxbcl1bMF07CiAgICAgICAgICB2YXIgdGFyZ2V0SWQgPSBiYXNpY1JlbFtyXVsxXTsKICAgICAgICAgIHZhciBpZE4gPSAiYmFzaWNSZWwiICsgc29yY2VJZCArICJfIiArIHRhcmdldElkOwoKICAgICAgICAgIGlmIChfdGhpcy5vdmVyVGFyZ2V0RW50aXR5SWQgPT0gJycpIHsKICAgICAgICAgICAgaWYgKHNob3dSZWwuaW5jbHVkZXMoc29yY2VJZCkgfHwgc2hvd1JlbC5pbmNsdWRlcyh0YXJnZXRJZCkpIHsKICAgICAgICAgICAgICBkMy5zZWxlY3QoIiMiLmNvbmNhdChpZE4pKS5hdHRyKCdvcGFjaXR5JywgMSkuYXR0cignc3Ryb2tlJywgJ2dyZXknKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBkMy5zZWxlY3QoIiMiLmNvbmNhdChpZE4pKS5hdHRyKCdvcGFjaXR5JywgMCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChzaG93UmVsLmluY2x1ZGVzKHNvcmNlSWQgKyAnJykgfHwgc2hvd1JlbC5pbmNsdWRlcyh0YXJnZXRJZCArICcnKSkgewogICAgICAgICAgICAgIGQzLnNlbGVjdCgiIyIuY29uY2F0KGlkTikpLmF0dHIoJ29wYWNpdHknLCAxKS5hdHRyKCdzdHJva2UnLCAnZ3JleScpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGQzLnNlbGVjdCgiIyIuY29uY2F0KGlkTikpLmF0dHIoJ29wYWNpdHknLCAwKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHNob3dSZWwuaW5jbHVkZXMoc29yY2VJZCArICcnKSAmJiB0YXJnZXRJZCA9PSBfdGhpcy5vdmVyVGFyZ2V0RW50aXR5SWQpIHsKICAgICAgICAgICAgICBkMy5zZWxlY3QoIiMiLmNvbmNhdChpZE4pKS5hdHRyKCdvcGFjaXR5JywgMSkuYXR0cignc3Ryb2tlJywgJ2RhcmtzbGF0ZWJsdWUnKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChzaG93UmVsLmluY2x1ZGVzKHRhcmdldElkICsgJycpICYmIHNvcmNlSWQgPT0gX3RoaXMub3ZlclRhcmdldEVudGl0eUlkKSB7CiAgICAgICAgICAgICAgZDMuc2VsZWN0KCIjIi5jb25jYXQoaWROKSkuYXR0cignb3BhY2l0eScsIDEpLmF0dHIoJ3N0cm9rZScsICdkYXJrc2xhdGVibHVlJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIDsKICAgICAgfQogICAgfSwKICAgIGRyYXdSZWxhdGlvbnNoaXBMaW5lOiBmdW5jdGlvbiBkcmF3UmVsYXRpb25zaGlwTGluZShzdmcpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciByZWxEYXRhID0gX3RoaXMucmVsRGF0YTsKICAgICAgdmFyIG9EYXRhID0gX3RoaXMuZHJhd0VudGl0eUxvY2F0aW9uOwogICAgICB2YXIgc2hvd0phZ2VEYXRhID0gX3RoaXMuc2hvd0VudGl0eUxpc3Q7CiAgICAgIHZhciBtYXJnaW4gPSBfdGhpcy5tYXJnaW47CiAgICAgIHZhciBoZWlnaHQgPSBzdmcuYXR0cignaGVpZ2h0Jyk7CiAgICAgIHZhciBiYXNpY1JlbCA9IHJlbERhdGFbJ2Jhc2ljUmVsJ107CgogICAgICB2YXIgX2xvb3A0ID0gZnVuY3Rpb24gX2xvb3A0KHIpIHsKICAgICAgICB2YXIgc29yY2VJZCA9IGJhc2ljUmVsW3JdWzBdOwogICAgICAgIHZhciB0YXJnZXRJZCA9IGJhc2ljUmVsW3JdWzFdOwogICAgICAgIHZhciBpZE4gPSAiYmFzaWNSZWwiICsgc29yY2VJZCArICJfIiArIHRhcmdldElkOwogICAgICAgIHZhciBjbGFzc04gPSAiYmFzaWNSZWwgc291cmNlIiArIHNvcmNlSWQgKyAiIHRhcmdldCIgKyB0YXJnZXRJZDsKICAgICAgICB2YXIgc29yY2VOb2RlID0gb0RhdGEuZmluZChmdW5jdGlvbiAoZCkgewogICAgICAgICAgcmV0dXJuIGRbJ2lkJ10gPT0gc29yY2VJZDsKICAgICAgICB9KTsKICAgICAgICB2YXIgdGFyZ2V0Tm9kZSA9IG9EYXRhLmZpbmQoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgIHJldHVybiBkWydpZCddID09IHRhcmdldElkOwogICAgICAgIH0pOwogICAgICAgIHZhciBzb3JjZUphZ2UgPSBzaG93SmFnZURhdGEuZmluZChmdW5jdGlvbiAoZCkgewogICAgICAgICAgcmV0dXJuIGRbJ2lkJ10gPT0gc29yY2VJZDsKICAgICAgICB9KVsnc2hvdyddOwogICAgICAgIHZhciB0YXJnZXRKYWdlID0gc2hvd0phZ2VEYXRhLmZpbmQoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgIHJldHVybiBkWydpZCddID09IHRhcmdldElkOwogICAgICAgIH0pWydzaG93J107CgogICAgICAgIGlmIChzb3JjZUphZ2UgJiYgdGFyZ2V0SmFnZSkgewogICAgICAgICAgaWYgKHNvcmNlTm9kZVsneCddID4gdGFyZ2V0Tm9kZVsneCddKSB7CiAgICAgICAgICAgIHZhciB0cCA9IHNvcmNlTm9kZTsKICAgICAgICAgICAgc29yY2VOb2RlID0gdGFyZ2V0Tm9kZTsKICAgICAgICAgICAgdGFyZ2V0Tm9kZSA9IHRwOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciBwYXRoID0gZDMucGF0aCgpOwogICAgICAgICAgdmFyIHN0YXJ0WCA9IHNvcmNlTm9kZVsneCddOwogICAgICAgICAgdmFyIGVuZFggPSB0YXJnZXROb2RlWyd4J107CiAgICAgICAgICB2YXIgbWlkWCA9IChzdGFydFggKyBlbmRYKSAvIDI7CiAgICAgICAgICB2YXIgZmxhZyA9IHNvcmNlTm9kZVsnc29uRmxhZyddIHx8IHRhcmdldE5vZGVbJ3NvbkZsYWcnXTsgLy8gaWYoKHRhcmdldE5vZGVbJ2lkJ10gPT0gIjQiKXx8KChzb3JjZU5vZGVbJ2lkJ109PSIxIikmJih0YXJnZXROb2RlWydpZCddPT0iNiIpKXx8KChzb3JjZU5vZGVbJ2lkJ109PSIyIikmJih0YXJnZXROb2RlWydpZCddPT0iNyIpKXx8KChzb3JjZU5vZGVbJ2lkJ109PSIzIikmJih0YXJnZXROb2RlWydpZCddPT0iOCIpKSl7CiAgICAgICAgICAvLyAgIGZsYWcgPSB0cnVlOwogICAgICAgICAgLy8gfQoKICAgICAgICAgIGlmICh0YXJnZXROb2RlWydpZCddID09ICI0IikgewogICAgICAgICAgICBmbGFnID0gdHJ1ZTsKICAgICAgICAgIH0gLy8gaWYodGFyZ2V0Tm9kZVsnaWQnXSA9PSAiMzAiKXsKICAgICAgICAgIC8vICAgZmxhZyA9IHRydWU7CiAgICAgICAgICAvLyB9CgoKICAgICAgICAgIHZhciByc291cmNlaW50ID0gc29yY2VOb2RlWydzb25GbGFnJ10gPyA0OSA6IDI7CiAgICAgICAgICB2YXIgcnRhcmdldGludCA9IHRhcmdldE5vZGVbJ3NvbkZsYWcnXSA/IDQ5IDogMjsKICAgICAgICAgIHZhciBzdGFydFkgPSBmbGFnID8gc29yY2VOb2RlWyd5J10gLSBzb3JjZU5vZGVbJ3InXSAtIHJzb3VyY2VpbnQgOiBzb3JjZU5vZGVbJ3knXSArIHNvcmNlTm9kZVsnciddICsgcnNvdXJjZWludDsKICAgICAgICAgIHZhciBlbmRZID0gZmxhZyA/IHRhcmdldE5vZGVbJ3knXSAtIHRhcmdldE5vZGVbJ3InXSAtIHJ0YXJnZXRpbnQgOiB0YXJnZXROb2RlWyd5J10gKyB0YXJnZXROb2RlWydyJ10gKyBydGFyZ2V0aW50OwogICAgICAgICAgdmFyIGNueDEgPSBzdGFydFggLSA1MDsKICAgICAgICAgIHZhciBjbngyID0gZW5kWCArIDUwOwogICAgICAgICAgdmFyIG1pZFkgPSAoc3RhcnRZICsgZW5kWSkgLyAyOyAvLyBpZigoKHNvcmNlTm9kZVsnaWQnXT09IjEiKSYmKHRhcmdldE5vZGVbJ2lkJ109PSI2IikpfHwoKHNvcmNlTm9kZVsnaWQnXT09IjIiKSYmKHRhcmdldE5vZGVbJ2lkJ109PSI3IikpfHwoKHNvcmNlTm9kZVsnaWQnXT09IjMiKSYmKHRhcmdldE5vZGVbJ2lkJ109PSI4IikpKXsKICAgICAgICAgIC8vICAgbWlkWS09MTQwCiAgICAgICAgICAvLyB9CgogICAgICAgICAgdmFyIGggPSAoZW5kWCAtIHN0YXJ0WCkgLyA1ID4gcGFyc2VJbnQoaGVpZ2h0KSArIDEwMCA/IHBhcnNlSW50KGhlaWdodCkgKyAxMDAgOiAoZW5kWCAtIHN0YXJ0WCkgLyA1OwogICAgICAgICAgdmFyIGNueSA9IGZsYWcgPyBtaWRZIC0gaCA6IG1pZFkgKyBoOwogICAgICAgICAgdmFyIGNueTEgPSBjbnk7CiAgICAgICAgICB2YXIgY255MiA9IGNueTsKCiAgICAgICAgICBpZiAoc29yY2VOb2RlWydsYXlvdXQnXSA9PSAyICYmIGNueSA8IDAgfHwgc29yY2VOb2RlWydsYXlvdXQnXSA9PSAwICYmIGNueSA+IDApIHsKICAgICAgICAgICAgY254MSAtPSAyNTA7CiAgICAgICAgICAgIGNueTEgPSBjbnkgKiAxLjM7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHRhcmdldE5vZGVbJ2xheW91dCddID09IDIgJiYgY255IDwgMCB8fCB0YXJnZXROb2RlWydsYXlvdXQnXSA9PSAwICYmIGNueSA+IDApIHsKICAgICAgICAgICAgY254MiArPSAyNTA7CiAgICAgICAgICAgIGNueTIgPSBjbnkgKiAxLjM7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHNvcmNlSWQgPT0gJzE0JyAmJiB0YXJnZXRJZCA9PSAnNycpIHsKICAgICAgICAgICAgY255ICo9IDEuNDsKICAgICAgICAgIH0gLy8gbGV0IG1pZFAgPSBbKHN0YXJ0UFswXStlbmRQWzBdKS8yLChzdGFydFBbMV0pPihlbmRQWzFdKT8oc3RhcnRQWzFdLTEwMCk6KGVuZFBbMV0tMTAwKV07CgoKICAgICAgICAgIHBhdGgubW92ZVRvKHN0YXJ0WCwgc3RhcnRZKTsKICAgICAgICAgIHBhdGguYmV6aWVyQ3VydmVUbyhtaWRYLCBjbnksIG1pZFgsIGNueSwgZW5kWCwgZW5kWSk7CgogICAgICAgICAgX3RoaXMuZHJhd1RpbWVMaW5lKHN2ZywgcGF0aCwgInJnYigyMDAsMjAwLDIwMCkiLCA1LCAiOSw5IiwgaWROLCBjbGFzc04pOwogICAgICAgIH0KICAgICAgfTsKCiAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgYmFzaWNSZWwubGVuZ3RoOyByKyspIHsKICAgICAgICBfbG9vcDQocik7CiAgICAgIH0KCiAgICAgIDsKICAgICAgdmFyIHNpbWlsYXJpdHlSZWwgPSByZWxEYXRhWydzaW1pbGFyaXR5UmVsJ107IC8vIGxldCBiYXNpY1JlbCA9IHJlbERhdGFbJ2Jhc2ljUmVsJ107CgogICAgICB2YXIgX2xvb3A1ID0gZnVuY3Rpb24gX2xvb3A1KF9yMikgewogICAgICAgIHZhciBzb3JjZUlkID0gc2ltaWxhcml0eVJlbFtfcjJdWzBdOwogICAgICAgIHZhciB0YXJnZXRJZCA9IHNpbWlsYXJpdHlSZWxbX3IyXVsxXTsKICAgICAgICB2YXIgaWROID0gInNpbWlsYXJpdHlSZWwiICsgc29yY2VJZCArICJfIiArIHRhcmdldElkOwogICAgICAgIHZhciBjbGFzc04gPSAic2ltaWxhcml0eVJlbCBzb3VyY2UiICsgc29yY2VJZCArICIgdGFyZ2V0IiArIHRhcmdldElkOwogICAgICAgIHZhciBzb3JjZU5vZGUgPSBvRGF0YS5maW5kKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICByZXR1cm4gZFsnaWQnXSA9PSBzb3JjZUlkOwogICAgICAgIH0pOwogICAgICAgIHZhciB0YXJnZXROb2RlID0gb0RhdGEuZmluZChmdW5jdGlvbiAoZCkgewogICAgICAgICAgcmV0dXJuIGRbJ2lkJ10gPT0gdGFyZ2V0SWQ7CiAgICAgICAgfSk7CiAgICAgICAgdmFyIHNvcmNlSmFnZSA9IHNob3dKYWdlRGF0YS5maW5kKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICByZXR1cm4gZFsnaWQnXSA9PSBzb3JjZUlkOwogICAgICAgIH0pWydzaG93J107CiAgICAgICAgdmFyIHRhcmdldEphZ2UgPSBzaG93SmFnZURhdGEuZmluZChmdW5jdGlvbiAoZCkgewogICAgICAgICAgcmV0dXJuIGRbJ2lkJ10gPT0gdGFyZ2V0SWQ7CiAgICAgICAgfSlbJ3Nob3cnXTsKCiAgICAgICAgaWYgKHNvcmNlSmFnZSAmJiB0YXJnZXRKYWdlKSB7CiAgICAgICAgICBpZiAoc29yY2VOb2RlWyd4J10gPiB0YXJnZXROb2RlWyd4J10pIHsKICAgICAgICAgICAgdmFyIHRwID0gc29yY2VOb2RlOwogICAgICAgICAgICBzb3JjZU5vZGUgPSB0YXJnZXROb2RlOwogICAgICAgICAgICB0YXJnZXROb2RlID0gdHA7CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIHBhdGggPSBkMy5wYXRoKCk7CiAgICAgICAgICB2YXIgc3RhcnRYID0gc29yY2VOb2RlWyd4J10gKyBzb3JjZU5vZGVbJ3InXSAvIDI7CiAgICAgICAgICB2YXIgZW5kWCA9IHRhcmdldE5vZGVbJ3gnXSAtIHRhcmdldE5vZGVbJ3InXSAvIDI7CiAgICAgICAgICB2YXIgbWlkWCA9IChzdGFydFggKyBlbmRYKSAvIDI7CiAgICAgICAgICB2YXIgZmxhZyA9IHNvcmNlTm9kZVsnc29uRmxhZyddIHx8IHRhcmdldE5vZGVbJ3NvbkZsYWcnXTsKICAgICAgICAgIHZhciByc291cmNlaW50ID0gc29yY2VOb2RlWydzb25GbGFnJ10gPyAyMCA6IDI7CiAgICAgICAgICB2YXIgcnRhcmdldGludCA9IHRhcmdldE5vZGVbJ3NvbkZsYWcnXSA/IDIwIDogMjsKICAgICAgICAgIHZhciBzdGFydFkgPSBmbGFnID8gc29yY2VOb2RlWyd5J10gLSBzb3JjZU5vZGVbJ3InXSAtIHJzb3VyY2VpbnQgOiBzb3JjZU5vZGVbJ3knXSArIHNvcmNlTm9kZVsnciddICsgcnNvdXJjZWludDsKICAgICAgICAgIHZhciBlbmRZID0gZmxhZyA/IHRhcmdldE5vZGVbJ3knXSAtIHRhcmdldE5vZGVbJ3InXSAtIHJ0YXJnZXRpbnQgOiB0YXJnZXROb2RlWyd5J10gKyB0YXJnZXROb2RlWydyJ10gKyBydGFyZ2V0aW50OwogICAgICAgICAgdmFyIG1pZFkgPSAoc3RhcnRZICsgZW5kWSkgLyAyOyAvLyBsZXQgaDFTY2FsZV9saW5lYXIgPSBkMy5zY2FsZUxpbmVhcihbMCwgX3RoaXMud2lkdGhdLCBbKHNvcmNlTm9kZVsneSddPnRhcmdldE5vZGVbJ3knXSk/KHNvcmNlTm9kZVsneSddKjIpOih0YXJnZXROb2RlWyd5J10qMikscGFyc2VJbnQoaGVpZ2h0KV0pCgogICAgICAgICAgdmFyIGggPSAoZW5kWCAtIHN0YXJ0WCkgLyAxNCA+IHBhcnNlSW50KGhlaWdodCkgLSAxMCA/IHBhcnNlSW50KGhlaWdodCkgLSAxMCA6IChlbmRYIC0gc3RhcnRYKSAvIDE0OwogICAgICAgICAgdmFyIGhTY2FsZV9saW5lYXIgPSBkMy5zY2FsZUxpbmVhcihbMCwgX3RoaXMud2lkdGggLyAyXSwgWzAsIChoIC0gODApIC8gMyAqIDJdKTsKICAgICAgICAgIHZhciBjbnkgPSBmbGFnID8gbWlkWSAtIGhTY2FsZV9saW5lYXIoZW5kWCkgOiBtaWRZICsgaFNjYWxlX2xpbmVhcihlbmRYKTsgLy8gaWYgKHNvcmNlTm9kZVsnaWQnXSA9PSAnNycpIHsgY255IC09IDIwIH0KCiAgICAgICAgICBpZiAoY255IDwgLTE1MCkgewogICAgICAgICAgICBzdGFydFkgPSBzb3JjZU5vZGVbJ3knXSArIHNvcmNlTm9kZVsnciddICsgcnNvdXJjZWludDsKICAgICAgICAgICAgZW5kWSA9IHRhcmdldE5vZGVbJ3knXSArIHRhcmdldE5vZGVbJ3InXSArIHJ0YXJnZXRpbnQ7CiAgICAgICAgICAgIGNueSA9IGhlaWdodCAtIGNueSAtIDMwMDsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAodGFyZ2V0SWQgPT0gIjUiIHx8IHNvcmNlSWQgPT0gIjUiKSB7CiAgICAgICAgICAgIGNueSArPSAyNTA7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHRhcmdldElkID09ICI2IiB8fCBzb3JjZUlkID09ICI2IikgewogICAgICAgICAgICBjbnkgKz0gMTUwOwogICAgICAgICAgfQoKICAgICAgICAgIHBhdGgubW92ZVRvKHN0YXJ0WCwgc3RhcnRZKTsKICAgICAgICAgIHBhdGgubGluZVRvKHN0YXJ0WCwgY255KTsKICAgICAgICAgIHBhdGgubGluZVRvKGVuZFgsIGNueSk7CiAgICAgICAgICBwYXRoLmxpbmVUbyhlbmRYLCBlbmRZKTsKCiAgICAgICAgICBfdGhpcy5kcmF3VGltZUxpbmUoc3ZnLCBwYXRoLCAicmdiKDIwMCwyMDAsMjAwKSIsIDUsICIwIiwgaWROLCBjbGFzc04pOwogICAgICAgIH0KICAgICAgfTsKCiAgICAgIGZvciAodmFyIF9yMiA9IDA7IF9yMiA8IHNpbWlsYXJpdHlSZWwubGVuZ3RoOyBfcjIrKykgewogICAgICAgIF9sb29wNShfcjIpOwogICAgICB9CgogICAgICA7CgogICAgICBfdGhpcy51cGRhdGFSZWwoKTsKICAgIH0sCiAgICBkcmF3TWFpbjogZnVuY3Rpb24gZHJhd01haW4oc3ZnKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgZGF0YSA9IF90aGlzLmRhdGE7CiAgICAgIHZhciBtYXJnaW4gPSBfdGhpcy5tYXJnaW47CiAgICAgIHZhciB3aWR0aCA9IF90aGlzLndpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7CiAgICAgIHZhciBoZWlnaHQgPSBfdGhpcy5oZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTsKICAgICAgdmFyIGdyYXBoR1RyYW5zZm9ybVggPSBfdGhpcy5ncmFwaEdUcmFuc2Zvcm1YOwogICAgICB2YXIgZ3JhcGhHVHJhbnNmb3JtWSA9IF90aGlzLmdyYXBoR1RyYW5zZm9ybVk7CiAgICAgIHZhciBncmFwaEdUcmFuc2Zvcm1LID0gX3RoaXMuZ3JhcGhHVHJhbnNmb3JtSzsKICAgICAgdmFyIGF4aXNHcm91cHMgPSBzdmcuYXBwZW5kKCJnIikuYXR0cigiaWQiLCAiYXhpc0dyb3VwcyIpLmF0dHIoIndpZHRoIiwgd2lkdGgpLmF0dHIoImhlaWdodCIsIGhlaWdodCk7IC8vIC5hdHRyKCJ0cmFuc2Zvcm0iLCAidHJhbnNsYXRlKCIgKyBncmFwaEdUcmFuc2Zvcm1YICsgJywnICsgZ3JhcGhHVHJhbnNmb3JtWSArICIpIHNjYWxlKCIgKyBncmFwaEdUcmFuc2Zvcm1LICsgIikiKTsKCiAgICAgIHZhciBncm91cHMgPSBzdmcuYXBwZW5kKCJnIikuYXR0cigiaWQiLCAiZ3JvdXBzIikuYXR0cigid2lkdGgiLCB3aWR0aCkuYXR0cigiaGVpZ2h0IiwgaGVpZ2h0KS5hdHRyKCJ0cmFuc2Zvcm0iLCAidHJhbnNsYXRlKCIgKyBncmFwaEdUcmFuc2Zvcm1YICsgJywnICsgZ3JhcGhHVHJhbnNmb3JtWSArICIpIHNjYWxlKCIgKyBncmFwaEdUcmFuc2Zvcm1LICsgIikiKTsKICAgICAgdGhpcy5ncm91cHNTdmcgPSBncm91cHM7CiAgICAgIHZhciBiYWNrRyA9IGdyb3Vwcy5hcHBlbmQoImciKS5hdHRyKCJpZCIsICJiYWNrRyIpLmF0dHIoIndpZHRoIiwgd2lkdGgpLmF0dHIoImhlaWdodCIsIGhlaWdodCk7CiAgICAgIHZhciBhcmNHID0gZ3JvdXBzLmFwcGVuZCgiZyIpLmF0dHIoImlkIiwgImFyY0ciKS5hdHRyKCJ3aWR0aCIsIHdpZHRoKS5hdHRyKCJoZWlnaHQiLCBoZWlnaHQpOwogICAgICB2YXIgdGltZUxpbmVHID0gZ3JvdXBzLmFwcGVuZCgiZyIpLmF0dHIoImlkIiwgInRpbWVMaW5lRyIpLmF0dHIoIndpZHRoIiwgd2lkdGgpLmF0dHIoImhlaWdodCIsIGhlaWdodCk7CiAgICAgIHZhciBjaXJjbGVHID0gZ3JvdXBzLmFwcGVuZCgiZyIpLmF0dHIoImlkIiwgImNpcmNsZUciKS5hdHRyKCJ3aWR0aCIsIHdpZHRoKS5hdHRyKCJoZWlnaHQiLCBoZWlnaHQpOwogICAgICBfdGhpcy5hcmNHID0gYXJjRzsKICAgICAgdmFyIHN0ZXBYID0gX3RoaXMuc3RlcFg7CiAgICAgIHZhciBzdGVwWSA9IF90aGlzLnN0ZXBZOwogICAgICB2YXIgaW50ZXJ2YWwgPSBfdGhpcy5jaXJjbGVJbnRlcnZhbDsKICAgICAgdmFyIHNjYWxlUHJlID0gX3RoaXMuZ3JhcGhTdmdTY2FsZTsKICAgICAgdmFyIHN0eCA9IDA7CiAgICAgIHZhciBzdHkgPSAwOwogICAgICB2YXIgc3RrID0gMTsKICAgICAgdmFyIGdyYXBoWm9vbSA9IGQzLnpvb20oKS5zY2FsZUV4dGVudChbMCwgMTBdKS5vbigic3RhcnQiLCBmdW5jdGlvbiAoZSkgewogICAgICAgIHN0eSA9IGUudHJhbnNmb3JtLnk7CiAgICAgICAgc3R4ID0gZS50cmFuc2Zvcm0ueDsKICAgICAgICBzdGsgPSBlLnRyYW5zZm9ybS5rOwogICAgICB9KS5vbignem9vbScsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgZ3JhcGhHVHJhbnNmb3JtWCA9IF90aGlzLmdyYXBoR1RyYW5zZm9ybVggKyBlLnRyYW5zZm9ybS54IC0gc3R4OwogICAgICAgIGdyYXBoR1RyYW5zZm9ybVkgPSBfdGhpcy5ncmFwaEdUcmFuc2Zvcm1ZICsgZS50cmFuc2Zvcm0ueSAtIHN0eTsKICAgICAgICBncmFwaEdUcmFuc2Zvcm1LID0gX3RoaXMuZ3JhcGhHVHJhbnNmb3JtSyArIGUudHJhbnNmb3JtLmsgLSBzdGs7CiAgICAgICAgX3RoaXMuZ3JhcGhHTW92ZVggPSBncmFwaEdUcmFuc2Zvcm1YOwogICAgICAgIGdyb3Vwcy5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBncmFwaEdUcmFuc2Zvcm1YICsgJywnICsgZ3JhcGhHVHJhbnNmb3JtWSArICcpIHNjYWxlKCcgKyBncmFwaEdUcmFuc2Zvcm1LICsgJyknKTsKICAgICAgfSkub24oJ2VuZCcsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgX3RoaXMuZ3JhcGhHVHJhbnNmb3JtWCA9IGdyYXBoR1RyYW5zZm9ybVg7CiAgICAgICAgX3RoaXMuZ3JhcGhHVHJhbnNmb3JtWSA9IGdyYXBoR1RyYW5zZm9ybVk7CiAgICAgICAgX3RoaXMuZ3JhcGhHVHJhbnNmb3JtSyA9IGdyYXBoR1RyYW5zZm9ybUs7CiAgICAgICAgZ3JvdXBzLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIGdyYXBoR1RyYW5zZm9ybVggKyAnLCcgKyBncmFwaEdUcmFuc2Zvcm1ZICsgJykgc2NhbGUoJyArIGdyYXBoR1RyYW5zZm9ybUsgKyAnKScpOwogICAgICB9KTsKICAgICAgc3ZnLmNhbGwoZ3JhcGhab29tKTsgLy8gLmNhbGwoZ3JhcGhab29tLnRyYW5zZm9ybSwgZDMuem9vbUlkZW50aXR5LnNjYWxlKDEpKQoKICAgICAgdmFyIHBhdGggPSBkMy5wYXRoKCk7CiAgICAgIHBhdGgubW92ZVRvKG1hcmdpbi5sZWZ0LCBtYXJnaW4udG9wKTsKICAgICAgdmFyIHggPSBtYXJnaW4ubGVmdDsKICAgICAgdmFyIHByZXggPSBtYXJnaW4ubGVmdDsKICAgICAgdmFyIHByZXkgPSBtYXJnaW4udG9wOwogICAgICB2YXIgcHJlciA9IDA7CiAgICAgIHZhciBwcmVTb25MZW4gPSAwOwogICAgICB2YXIgbGF5b3V0U2hvdyA9IF90aGlzLmxheW91dFNob3c7CiAgICAgIHZhciBzdW1Ub3RhbER1cmF0aW9uID0gMDsKICAgICAgdmFyIHJvb3RJbmRleCA9IC0xOwoKICAgICAgdmFyIF9sb29wNiA9IGZ1bmN0aW9uIF9sb29wNihpKSB7CiAgICAgICAgdmFyIGxheSA9IHBhcnNlSW50KGRhdGFbaV1bJ2xheW91dCddKTsKICAgICAgICB2YXIgY29sb3JzID0gX3RoaXMubWNvbG9yOwogICAgICAgIHZhciBjb2xvcnNEID0gX3RoaXMubURhcmtjb2xvcjsKICAgICAgICB2YXIgZW50aXR5TG9jYXRpb25EYXRhID0gdG9vbHMuZGVlcENsb25lKGRhdGFbaV0pOwoKICAgICAgICBpZiAobGF5ID09IDApIHsKICAgICAgICAgIHJvb3RJbmRleCsrOwogICAgICAgIH0KCiAgICAgICAgZW50aXR5TG9jYXRpb25EYXRhWydyb290SW5kZXgnXSA9IHJvb3RJbmRleDsKICAgICAgICBlbnRpdHlMb2NhdGlvbkRhdGFbJ2NvbG9yJ10gPSBjb2xvcnNbcm9vdEluZGV4ICUgY29sb3JzLmxlbmd0aF07CiAgICAgICAgZW50aXR5TG9jYXRpb25EYXRhWydjb2xvckQnXSA9IGNvbG9yc0Rbcm9vdEluZGV4ICUgY29sb3JzRC5sZW5ndGhdOwogICAgICAgIHZhciB0aW1lTGlzdCA9IGRhdGFbaV1bJ3RpbWUnXTsKICAgICAgICB2YXIgZHVyYXRpb24gPSB0b29scy50aW1lMnNlY29uZHModGltZUxpc3RbMV0pIC0gdG9vbHMudGltZTJzZWNvbmRzKHRpbWVMaXN0WzBdKTsKICAgICAgICBzdW1Ub3RhbER1cmF0aW9uICs9IGR1cmF0aW9uOwoKICAgICAgICB2YXIgc2hvd0VudGl0eSA9IF90aGlzLnNob3dFbnRpdHlMaXN0LmZpbmQoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgIHJldHVybiBkWydpZCddID09IGRhdGFbaV1bJ2lkJ107CiAgICAgICAgfSk7CgogICAgICAgIGlmIChzaG93RW50aXR5WydzaG93J10gPT0gdHJ1ZSkgewogICAgICAgICAgdmFyIHkgPSBtYXJnaW4udG9wICsgbGF5ICogc3RlcFk7CiAgICAgICAgICB2YXIgcmVsZXZhbmNlVmFsdWUgPSBkYXRhW2ldWydhdHRyaWJ1dGUnXVsncmVsZXZhbmNlJ107CiAgICAgICAgICB2YXIgdG90YWxEdXJhdGlvblZhbHVlID0gZGF0YVtpXVsndG90YWxEdXJhdGlvbiddOwogICAgICAgICAgdmFyIHJTY2FsZSA9IF90aGlzLnRvdGFsRHVyYXRpb25TY2FsZV9saW5lYXI7CiAgICAgICAgICB2YXIgciA9IHJTY2FsZSh0b3RhbER1cmF0aW9uVmFsdWUpOwogICAgICAgICAgdmFyIHN0ZXBMID0gciArIHN0ZXBYIC8gMiArIGludGVydmFsIC8gMTA7CiAgICAgICAgICB2YXIgY29udHJvbFAxeCA9IHByZXggKyBpbnRlcnZhbCAvIDE7CiAgICAgICAgICB2YXIgY29udHJvbFAyeCA9IHggLSBpbnRlcnZhbCAvIDE7CiAgICAgICAgICB2YXIgY3VyTGluZXggPSB4IC0gciAtIGludGVydmFsOwogICAgICAgICAgdmFyIHJlbERhdGEgPSBfdGhpcy5yZWxEYXRhOwogICAgICAgICAgdmFyIG9EYXRhID0gX3RoaXMuZHJhd0VudGl0eUxvY2F0aW9uOwogICAgICAgICAgdmFyIGJhc2ljUmVsID0gcmVsRGF0YVsnYmFzaWNSZWwnXTsKICAgICAgICAgIHZhciBkYUlkID0gZGF0YVtpXVsnaWQnXTsKICAgICAgICAgIHZhciBqZyA9IDA7CgogICAgICAgICAgZm9yICh2YXIgcmUgPSAwOyByZSA8IGJhc2ljUmVsLmxlbmd0aDsgcmUrKykgewogICAgICAgICAgICB2YXIgc29yY2VJZCA9IGJhc2ljUmVsW3JlXVswXTsKICAgICAgICAgICAgdmFyIHRhcmdldElkID0gYmFzaWNSZWxbcmVdWzFdOwogICAgICAgICAgICB2YXIgY05vZGUgPSAnJzsKCiAgICAgICAgICAgIGlmIChzb3JjZUlkID09IGRhSWQgfHwgdGFyZ2V0SWQgPT0gZGFJZCkgewogICAgICAgICAgICAgIGpnID0gMTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIDsKICAgICAgICAgIHZhciBzb25GbGFnID0gMTsKCiAgICAgICAgICBpZiAoaSA+IDAgJiYgcHJlU29uTGVuID09IDAgJiYgZGF0YVtpXVsnc29uJ10ubGVuZ3RoID09IDApIHsKICAgICAgICAgICAgc29uRmxhZyA9IDA7CiAgICAgICAgICAgIHN0ZXBMID0gciArIHN0ZXBYIC8gMS4yICsgaW50ZXJ2YWwgLyAxMDsKICAgICAgICAgICAgeCArPSBzdGVwTDsKICAgICAgICAgICAgY29udHJvbFAxeCA9IHByZXggKyBpbnRlcnZhbCAvIDE7CiAgICAgICAgICAgIGNvbnRyb2xQMnggPSB4IC0gciAtIGludGVydmFsIC8gMiAtIGludGVydmFsIC8gMTsKICAgICAgICAgICAgY3VyTGluZXggPSByICsgaW50ZXJ2YWwgLyAxMDsKICAgICAgICAgIH0gZWxzZSBpZiAoaSA+IDAgJiYgcHJlU29uTGVuICE9IDAgJiYgZGF0YVtpXVsnc29uJ10ubGVuZ3RoID09IDApIHsKICAgICAgICAgICAgc29uRmxhZyA9IDA7CiAgICAgICAgICAgIHN0ZXBMID0gciArIHN0ZXBYICsgaW50ZXJ2YWwgKyAzMDsKICAgICAgICAgICAgeCArPSBzdGVwTDsKICAgICAgICAgICAgY29udHJvbFAxeCA9IHByZXggKyBpbnRlcnZhbCAvIDE7CiAgICAgICAgICAgIGNvbnRyb2xQMnggPSB4IC0gciAtIGludGVydmFsIC8gMSAtIGludGVydmFsIC8gMTsKICAgICAgICAgICAgY3VyTGluZXggPSByICsgaW50ZXJ2YWwgLyAxMDsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN0ZXBMID0gciArIHN0ZXBYICsgaW50ZXJ2YWwgKyAxMDsKICAgICAgICAgICAgeCArPSBzdGVwTDsKICAgICAgICAgICAgY29udHJvbFAxeCA9IHByZXggKyBpbnRlcnZhbCAvIDE7CiAgICAgICAgICAgIGNvbnRyb2xQMnggPSB4IC0gciAtIGludGVydmFsIC0gaW50ZXJ2YWwgLyAxOwogICAgICAgICAgICBjdXJMaW5leCA9IHIgKyBpbnRlcnZhbDsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoamcgPT0gMSAmJiBkYXRhW2ldWyd0eXBlJ10gPT0gMCAmJiBkYXRhW2ldWydzb24nXS5sZW5ndGggPT0gMCkgewogICAgICAgICAgICBjdXJMaW5leCArPSByICogMS41OwogICAgICAgICAgfQoKICAgICAgICAgIF90aGlzLmRyYXdFbnRpdHkoY2lyY2xlRywgeCwgeSwgciwgZGF0YVtpXSk7CgogICAgICAgICAgcGF0aC5iZXppZXJDdXJ2ZVRvKGNvbnRyb2xQMXgsIHByZXksIGNvbnRyb2xQMngsIHksIHggLSBjdXJMaW5leCwgeSk7IC8vIHBhdGgubGluZVRvKGNvbnRyb2xQMXgsIHByZXkpCiAgICAgICAgICAvLyBwYXRoLmxpbmVUbyhjb250cm9sUDJ4LCB5KQogICAgICAgICAgLy8gcGF0aC5saW5lVG8oeCAtIGN1ckxpbmV4LCB5KQoKICAgICAgICAgIHBhdGgubW92ZVRvKHggKyBjdXJMaW5leCwgeSk7CiAgICAgICAgICBwcmV4ID0geCArIGN1ckxpbmV4OwogICAgICAgICAgcHJleSA9IHk7CiAgICAgICAgICBwcmVyID0gcjsKICAgICAgICAgIHByZVNvbkxlbiA9IGRhdGFbaV1bJ3NvbiddLmxlbmd0aDsKICAgICAgICAgIGVudGl0eUxvY2F0aW9uRGF0YVsneCddID0geDsKICAgICAgICAgIGVudGl0eUxvY2F0aW9uRGF0YVsneSddID0geTsKICAgICAgICAgIGVudGl0eUxvY2F0aW9uRGF0YVsnciddID0gcjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZW50aXR5TG9jYXRpb25EYXRhWyd4J10gPSBwcmV4OwogICAgICAgICAgZW50aXR5TG9jYXRpb25EYXRhWyd5J10gPSBwcmV5OwogICAgICAgICAgZW50aXR5TG9jYXRpb25EYXRhWydyJ10gPSBwcmVyOwogICAgICAgIH0KCiAgICAgICAgZW50aXR5TG9jYXRpb25EYXRhWydzb25GbGFnJ10gPSBlbnRpdHlMb2NhdGlvbkRhdGFbJ3NvbiddLmxlbmd0aCA+IDAgPyAxIDogMDsgLy8gZW50aXR5TG9jYXRpb25EYXRhWydzaG93UmVsJ10gPSBmYWxzZTsKCiAgICAgICAgX3RoaXMuZHJhd0VudGl0eUxvY2F0aW9uLnB1c2goZW50aXR5TG9jYXRpb25EYXRhKTsKICAgICAgfTsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykgewogICAgICAgIF9sb29wNihpKTsKICAgICAgfQoKICAgICAgdmFyIGVudGl0eUxvY2F0aW9uRGF0YSA9IF90aGlzLmRyYXdFbnRpdHlMb2NhdGlvbjsKICAgICAgdmFyIGNvbG9ycyA9IF90aGlzLm1jb2xvcjsKICAgICAgdmFyIGNvbG9ySW5kZXggPSAwOwogICAgICB2YXIgY29sb3Jyb290SW5kZXggPSAwOwogICAgICBfdGhpcy5zdW1Ub3RhbER1cmF0aW9uID0gc3VtVG90YWxEdXJhdGlvbjsKCiAgICAgIHZhciBfbG9vcDcgPSBmdW5jdGlvbiBfbG9vcDcoX2kpIHsKICAgICAgICB2YXIgeCA9IGVudGl0eUxvY2F0aW9uRGF0YVtfaV1bJ3gnXTsKICAgICAgICB2YXIgeSA9IGVudGl0eUxvY2F0aW9uRGF0YVtfaV1bJ3knXTsKICAgICAgICB2YXIgciA9IGVudGl0eUxvY2F0aW9uRGF0YVtfaV1bJ3InXTsKCiAgICAgICAgdmFyIHNob3dFbnRpdHkgPSBfdGhpcy5zaG93RW50aXR5TGlzdC5maW5kKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICByZXR1cm4gZFsnaWQnXSA9PSBlbnRpdHlMb2NhdGlvbkRhdGFbX2ldWydpZCddOwogICAgICAgIH0pOwoKICAgICAgICBpZiAoZW50aXR5TG9jYXRpb25EYXRhW19pXVsndHlwZSddID09IDAgJiYgc2hvd0VudGl0eVsnc2hvdyddID09IHRydWUpIHsKICAgICAgICAgIF90aGlzLmRyYXdFbnRpdHlUaW1lQXhpcyhjaXJjbGVHLCBlbnRpdHlMb2NhdGlvbkRhdGFbX2ldKTsKICAgICAgICB9CgogICAgICAgIGlmIChlbnRpdHlMb2NhdGlvbkRhdGFbX2ldWydsYXlvdXQnXSA9PSAnMCcgJiYgZW50aXR5TG9jYXRpb25EYXRhW19pXVsnbmFtZSddICE9ICdUZXN0JykgewogICAgICAgICAgY29sb3JJbmRleCA9IGNvbG9ycm9vdEluZGV4OwogICAgICAgICAgY29sb3Jyb290SW5kZXgrKzsKICAgICAgICB9CgogICAgICAgIGlmIChlbnRpdHlMb2NhdGlvbkRhdGFbX2ldWydzb24nXS5sZW5ndGggIT0gMCAmJiBfdGhpcy5zaG93RW50aXR5TGlzdC5maW5kKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICByZXR1cm4gZFsnaWQnXSA9PSBlbnRpdHlMb2NhdGlvbkRhdGFbX2ldWydzb24nXVswXTsKICAgICAgICB9KVsnc2hvdyddKSB7CiAgICAgICAgICB2YXIgbWF4eHMgPSBlbnRpdHlMb2NhdGlvbkRhdGFbX2ldWyd4J10gLSBlbnRpdHlMb2NhdGlvbkRhdGFbX2ldWydyJ10gLSA0MDsKICAgICAgICAgIHZhciBtYXh5cyA9IGVudGl0eUxvY2F0aW9uRGF0YVtfaV1bJ3knXSAtIGVudGl0eUxvY2F0aW9uRGF0YVtfaV1bJ3InXSAtIDQwOwogICAgICAgICAgdmFyIG1pbnhzID0gdG9vbHMuZGVlcENsb25lKG1heHhzKTsKICAgICAgICAgIHZhciBtaW55cyA9IHRvb2xzLmRlZXBDbG9uZShtYXh5cyk7CiAgICAgICAgICB2YXIgcmVjdFBvaW50cyA9IFtbbWF4eHMsIG1heHlzXV07CiAgICAgICAgICB2YXIgc29ucyA9IHRvb2xzLmRlZXBDbG9uZShkYXRhW19pXVsnc29uJ10pOwoKICAgICAgICAgIHZhciBfbG9vcDggPSBmdW5jdGlvbiBfbG9vcDgoKSB7CiAgICAgICAgICAgIHZhciBzID0gc29uc1swXTsKICAgICAgICAgICAgc29ucy5zcGxpY2UoMCwgMSk7CiAgICAgICAgICAgIHZhciBjdXJzb24gPSBlbnRpdHlMb2NhdGlvbkRhdGEuZmluZChmdW5jdGlvbiAoZCkgewogICAgICAgICAgICAgIHJldHVybiBkWydpZCddID09IHM7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB2YXIgY3VyZ3NvbiA9IGN1cnNvblsnc29uJ107CiAgICAgICAgICAgIHZhciBjdXJ4ID0gY3Vyc29uWyd4J10gKyBjdXJzb25bJ3InXSAqIDI7CiAgICAgICAgICAgIHZhciBjdXJ5ID0gY3Vyc29uWyd5J10gKyBjdXJzb25bJ3InXSAqIDI7CgogICAgICAgICAgICBpZiAoY3VyeCA+IG1heHhzKSB7CiAgICAgICAgICAgICAgbWF4eHMgPSBjdXJ4OwogICAgICAgICAgICB9IC8vIGlmKGN1cnNvblsneSddPG1heHlzKW1heHlzID0gY3Vyc29uWyd5J107CgoKICAgICAgICAgICAgaWYgKGN1cnkgPCBtaW55cykgbWlueXMgPSBjdXJ5OwogICAgICAgICAgICBpZiAoY3VyeSA+IG1heHlzKSBtYXh5cyA9IGN1cnk7CgogICAgICAgICAgICBmb3IgKHZhciBncyA9IDA7IGdzIDwgY3VyZ3Nvbi5sZW5ndGg7IGdzKyspIHsKICAgICAgICAgICAgICBzb25zLnB1c2goY3VyZ3Nvbltnc10pOwogICAgICAgICAgICB9CiAgICAgICAgICB9OwoKICAgICAgICAgIHdoaWxlIChzb25zLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgX2xvb3A4KCk7CiAgICAgICAgICB9CgogICAgICAgICAgcmVjdFBvaW50cyA9IFtbbWlueHMsIG1pbnlzXSwgW21pbnhzLCBtYXh5c10sIFttYXh4cywgbWF4eXNdLCBbbWF4eHMsIG1pbnlzXV07IC8vIF90aGlzLmRyYXdwb2x5Z29uKGJhY2tHLCBjb2xvcnNbY29sb3JJbmRleF0sIHJlY3RQb2ludHMsICJyZ2IoMjU1LDI1NSwyNTUpIiwwLjMpOwoKICAgICAgICAgIF90aGlzLmRyYXdSZWN0KGJhY2tHLCBtaW54cywgbWlueXMsIE1hdGguYWJzKG1heHhzIC0gbWlueHMpLCBNYXRoLmFicyhtYXh5cyAtIG1pbnlzKSwgMjAsIDIwLCBjb2xvcnNbY29sb3JJbmRleF0sIDAuMSwgIndoaXRlIiwgImJhY2tSZWN0Ii5jb25jYXQoX2kpKTsKCiAgICAgICAgICBjb2xvckluZGV4Kys7CiAgICAgICAgICBjb2xvckluZGV4ICU9IGNvbG9ycy5sZW5ndGg7CiAgICAgICAgfSAvLyBlbnRpdHlMb2NhdGlvbkRhdGFbaV1bJ2NvbG9yJ10gPSBjb2xvcnNbY29sb3JJbmRleCAtIDFdOwogICAgICAgIC8vIGlmICgoZW50aXR5TG9jYXRpb25EYXRhW2ldWydsYXlvdXQnXSA9PSAnMCcpICYmICgoZW50aXR5TG9jYXRpb25EYXRhW2ldWyduYW1lJ10gPT0gJ1Rlc3QnKSB8fCAoZW50aXR5TG9jYXRpb25EYXRhW2ldWyduYW1lJ10gPT0gJ0V4YW1wbGUnKSkpIHsKICAgICAgICAvLyAgIGVudGl0eUxvY2F0aW9uRGF0YVtpXVsnY29sb3InXSA9IGNvbG9yc1tjb2xvckluZGV4XQogICAgICAgIC8vIH0KCiAgICAgIH07CgogICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZW50aXR5TG9jYXRpb25EYXRhLmxlbmd0aDsgX2krKykgewogICAgICAgIF9sb29wNyhfaSk7CiAgICAgIH0KCiAgICAgIF90aGlzLmRyYXdUaW1lTGluZSh0aW1lTGluZUcsIHBhdGgsICJyZ2IoMjAwLDIwMCwyMDApIiwgNSwgJzAnLCAndGltZUxpbmUgJywgJ3RpbWVMaW5lICcpOwoKICAgICAgX3RoaXMuZHJhd1JlbGF0aW9uc2hpcExpbmUodGltZUxpbmVHKTsKCiAgICAgIF90aGlzLmRyYXdUaW1lQXhpcyhfdGhpcy5UaW1lQXhpc1N2Zyk7CgogICAgICBfdGhpcy5kcmF3VHlwZVJpdmVyKF90aGlzLlRpbWVBeGlzU3ZnKTsKCiAgICAgIF90aGlzLnVwZGF0YVRpbWVBeGlzRHVyKF90aGlzLlRpbWVBeGlzU3ZnLCBfdGhpcy50aW1lQXhpc1gsIF90aGlzLnRpbWVBeGlzVyk7CiAgICB9LAogICAgdXBkYXRhVGltZUF4aXNEdXI6IGZ1bmN0aW9uIHVwZGF0YVRpbWVBeGlzRHVyKHN2ZywgeCwgd2lkdGgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBtYXJnaW4gPSBfdGhpcy5tYXJnaW47CiAgICAgIHZhciB0b3RhbFdpZHRoID0gX3RoaXMud2lkdGg7IC8vbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7CgogICAgICB2YXIgeSA9IDA7CiAgICAgIHZhciBoID0gMjAwOwoKICAgICAgX3RoaXMuZHJhd1JlY3Qoc3ZnLCAwLCB5LCB4LCBoLCAzLCAzLCAnd2hpdGUnLCAwLjMsICcnLCAidGltZUF4aXNSZWN0MSIpOwoKICAgICAgdmFyIGN1clJlY3QgPSBfdGhpcy5kcmF3UmVjdChzdmcsIHgsIHkgLSAwLCB3aWR0aCwgaCAtIDUsIDMsIDMsICdyZ2JhKDAsMCwwLDApJywgMSwgJ3JnYigxNDUsIDE4MCwgMTg5KScsICd3aW5SZWN0JywgMik7IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgIC8vIGN1clJlY3Qub24oJ21vdXNlbW92ZScsIGZ1bmN0aW9uIChlKSB7CiAgICAgIC8vICAgZDMuc2VsZWN0KHRoaXMpLmF0dHIoImN1cnNvciIsICdwb2ludGVyJyk7CiAgICAgIC8vICAgaWYgKF90aGlzLnRpbWVBeGlzRHJvcEZsYWcgPT0gMSkgewogICAgICAvLyAgICAgbGV0IG14ID0gZS5jbGllbnRYIC0gX3RoaXMudGltZUF4aXNEb3duWDsKICAgICAgLy8gICAgIF90aGlzLnRpbWVBeGlzWCA9IGUubGF5ZXJYIC0gNDUwIC0gX3RoaXMudGltZUF4aXNXIC8gMjsKICAgICAgLy8gICB9CiAgICAgIC8vIH0pCiAgICAgIC8vIGN1clJlY3Qub24oJ21vdXNlZG93bicsIGZ1bmN0aW9uIChlKSB7CiAgICAgIC8vICAgX3RoaXMudGltZUF4aXNEb3duWCA9IGUuY2xpZW50WDsKICAgICAgLy8gICBfdGhpcy50aW1lQXhpc0Ryb3BGbGFnID0gMTsKICAgICAgLy8gfSkKICAgICAgLy8gY3VyUmVjdC5vbignbW91c2V1cCcsIGZ1bmN0aW9uIChlKSB7CiAgICAgIC8vICAgX3RoaXMudGltZUF4aXNEb3duWCA9IGUuY2xpZW50WDsKICAgICAgLy8gICBfdGhpcy50aW1lQXhpc0Ryb3BGbGFnID0gMDsKICAgICAgLy8gfSkKICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKCiAgICAgIF90aGlzLmRyYXdSZWN0KHN2ZywgeCArIHdpZHRoLCB5LCB0b3RhbFdpZHRoIC0gd2lkdGgsIGgsIDMsIDMsICd3aGl0ZScsIDAuMywgJycsICJ0aW1lQXhpc1JlY3QyIik7CiAgICB9LAogICAgZHJhd1R5cGVSaXZlcjogZnVuY3Rpb24gZHJhd1R5cGVSaXZlcihzdmcpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBvcmlEYXRhID0gX3RoaXMuZGF0YTsKICAgICAgdmFyIHJlc0RhdGEgPSBbXTsKICAgICAgdmFyIHRyaUxpID0gW107CiAgICAgIHZhciBleGVMaSA9IFtdOwogICAgICB2YXIgZGVmcyA9IHN2Zy5hcHBlbmQoImRlZnMiKTsKICAgICAgdmFyIGZpbHRlciA9IGRlZnMuYXBwZW5kKCJmaWx0ZXIiKS5hdHRyKCJpZCIsICJjb29sU2hhZG93IikuYXR0cigieCIsICItMTAwJSIpLmF0dHIoInkiLCAiLTEwMCUiKSAvLwogICAgICAuYXR0cigid2lkdGgiLCAiMzAwJSIpLmF0dHIoImhlaWdodCIsICIzMDAlIik7IC8vCgogICAgICBmaWx0ZXIuYXBwZW5kKCJmZU1vcnBob2xvZ3kiKS5hdHRyKCJpbiIsICJTb3VyY2VHcmFwaGljIikuYXR0cigicmVzdWx0IiwgInVwcGVyTGF5ZXIiKS5hdHRyKCJvcGVyYXRvciIsICJkaWxhdGUiKS5hdHRyKCJyYWRpdXMiLCAiMC4yIDAuMiIpOwogICAgICBmaWx0ZXIuYXBwZW5kKCJmZU1vcnBob2xvZ3kiKS5hdHRyKCJpbiIsICJTb3VyY2VBbHBoYSIpLmF0dHIoInJlc3VsdCIsICJlbmxhcmdlZEFscGhhIikuYXR0cigib3BlcmF0b3IiLCAiZGlsYXRlIikuYXR0cigicmFkaXVzIiwgIjAuMiAwLjIiKTsKICAgICAgZmlsdGVyLmFwcGVuZCgiZmVHYXVzc2lhbkJsdXIiKS5hdHRyKCJpbiIsICJlbmxhcmdlZEFscGhhIikuYXR0cigicmVzdWx0IiwgImJsdXJlZEFscGhhIikuYXR0cigic3RkRGV2aWF0aW9uIiwgIjMiKTsKICAgICAgZmlsdGVyLmFwcGVuZCgiZmVPZmZzZXQiKS5hdHRyKCJpbiIsICJibHVyZWRBbHBoYSIpLmF0dHIoInJlc3VsdCIsICJsb3dlckxheWVyIikuYXR0cigiZHkiLCAiMSIpOyAvLwoKICAgICAgdmFyIGZlTWVyZ2UgPSBmaWx0ZXIuYXBwZW5kKCJmZU1lcmdlIik7CiAgICAgIGZlTWVyZ2UuYXBwZW5kKCJmZU1lcmdlTm9kZSIpLmF0dHIoImluIiwgImxvd2VyTGF5ZXIiKTsKICAgICAgZmVNZXJnZS5hcHBlbmQoImZlTWVyZ2VOb2RlIikuYXR0cigiaW4iLCAidXBwZXJMYXllciIpOwogICAgICB2YXIgdG90YWwgPSAwOwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcmlEYXRhLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIGN1ckVudCA9IG9yaURhdGFbaV07CiAgICAgICAgdmFyIHRwID0ge307CiAgICAgICAgdHBbJ29kJ10gPSBpOwogICAgICAgIHRwWydkdSddID0gdG90YWw7CiAgICAgICAgdG90YWwgKz0gY3VyRW50Wyd0b3RhbER1cmF0aW9uJ107CiAgICAgICAgY29uc29sZS5sb2coY3VyRW50KTsKCiAgICAgICAgaWYgKGN1ckVudFsndHlwZSddID09ICIxIikgewogICAgICAgICAgdHJpTGkucHVzaCh0cCk7CiAgICAgICAgfQoKICAgICAgICBpZiAoY3VyRW50Wyd0eXBlJ10gPT0gIjIiKSB7CiAgICAgICAgICBleGVMaS5wdXNoKHRwKTsKICAgICAgICB9CgogICAgICAgIHZhciB0eXBlRGF0YSA9IGN1ckVudFsiYXR0cmlidXRlIl1bImV4cHJlc3Npb25zIl07CiAgICAgICAgdmFyIHRvdGFsRHVyID0gMDsKCiAgICAgICAgZm9yICh2YXIgdCBpbiB0eXBlRGF0YSkgewogICAgICAgICAgLy8gbGV0IGNvbG9yID0gdHlwZUNvbG9yW2ldOwogICAgICAgICAgdmFyIHR5cGVEdXJpdGlvbiA9IHR5cGVEYXRhW3RdOwogICAgICAgICAgdmFyIHRvdGFsVHlwZVNlY29uZHMgPSAwOwoKICAgICAgICAgIGZvciAodmFyIGQgaW4gdHlwZUR1cml0aW9uKSB7CiAgICAgICAgICAgIHRvdGFsVHlwZVNlY29uZHMgKz0gdG9vbHMudGltZTJzZWNvbmRzKHR5cGVEdXJpdGlvbltkXVsxXSkgLSB0b29scy50aW1lMnNlY29uZHModHlwZUR1cml0aW9uW2RdWzBdKTsKICAgICAgICAgIH0KCiAgICAgICAgICB0b3RhbER1ciArPSB0b3RhbFR5cGVTZWNvbmRzOwogICAgICAgICAgdHBbdF0gPSB0b3RhbFR5cGVTZWNvbmRzOwogICAgICAgIH0KCiAgICAgICAgZm9yICh2YXIgX3QgaW4gdHApIHsKICAgICAgICAgIGlmIChfdCAhPSAnb2QnICYmIF90ICE9ICdkdScpIHsKICAgICAgICAgICAgdHBbX3RdIC89IHRvdGFsRHVyOwoKICAgICAgICAgICAgaWYgKHRvdGFsRHVyID09IDApIHsKICAgICAgICAgICAgICB0cFtfdF0gPSAwOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXNEYXRhLnB1c2godHApOwogICAgICB9CgogICAgICB2YXIgZGF0YSA9IHJlc0RhdGE7CiAgICAgIHZhciBzdGFjayA9IGQzLnN0YWNrKCkua2V5cyhbJzEnLCAnMicsICczJ10pLm9yZGVyKGQzLnN0YWNrT3JkZXJJbnNpZGVPdXQpLm9mZnNldChkMy5zdGFja09mZnNldFdpZ2dsZSk7CiAgICAgIHZhciB5UmFuZ2VXaWR0aCA9IDcwOwogICAgICB2YXIgdyA9IHBhcnNlSW50KHN2Zy5hdHRyKCJ3aWR0aCIpKSArIDMwOwogICAgICB2YXIgeFN0ZXAgPSB3IC8gb3JpRGF0YS5sZW5ndGg7CiAgICAgIHZhciB4U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbMCwgdG90YWxdKS5yYW5nZShbMCwgd10pOwogICAgICB2YXIgeVNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWy0xLCAxXSkucmFuZ2UoWzAsIDcwXSk7CiAgICAgIHZhciBhcmVhID0gZDMuYXJlYSgpLmN1cnZlKGQzLmN1cnZlQmFzaXMpLngoZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gMTUgKyB4U2NhbGUoZC5kYXRhLmR1KSArIGQuZGF0YS5vZCAqIDEwOyAvL3hTdGVwICsgMTU7CiAgICAgIH0pLnkwKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuIDE1MyArIHlSYW5nZVdpZHRoIC0geVNjYWxlKGRbMF0pOwogICAgICB9KS55MShmdW5jdGlvbiAoZCkgewogICAgICAgIHJldHVybiAxNTMgKyB5UmFuZ2VXaWR0aCAtIHlTY2FsZShkWzFdKTsKICAgICAgfSk7CiAgICAgIHZhciBzdGFja0RhdGEgPSBzdGFjayhkYXRhKTsKICAgICAgY29uc29sZS5sb2coInN0YWNrIiwgcmVzRGF0YSwgc3RhY2tEYXRhKTsKICAgICAgdmFyIGxlblRocmVzaG9sZCA9IDAuNDsKICAgICAgdmFyIGljb25MaSA9IHt9OwoKICAgICAgZm9yICh2YXIgcyBpbiBzdGFja0RhdGEpIHsKICAgICAgICBpY29uTGlbc10gPSBbXTsKCiAgICAgICAgZm9yICh2YXIgX2kyIGluIHN0YWNrRGF0YVtzXSkgewogICAgICAgICAgdmFyIGxlbkFyZWEgPSBzdGFja0RhdGFbc11bX2kyXTsKCiAgICAgICAgICBpZiAobGVuQXJlYVsxXSAtIGxlbkFyZWFbMF0gPiAwLjQpIHsKICAgICAgICAgICAgaWNvbkxpW3NdLnB1c2goW19pMiwgbGVuQXJlYV0pOwogICAgICAgICAgfQoKICAgICAgICAgIGZvciAodmFyIGxpIGluIGljb25MaVtzXSkgewogICAgICAgICAgICBpZiAoX2kyIDwgaWNvbkxpW3NdW2xpXVswXSArIDIpIHsKICAgICAgICAgICAgICB2YXIgc2VsZWN0QXJlYSA9IGljb25MaVtzXVtsaV1bMV07CgogICAgICAgICAgICAgIGlmIChzZWxlY3RBcmVhWzFdIC0gbGVuQXJlYVsxXSAtIChzZWxlY3RBcmVhWzBdIC0gbGVuQXJlYVswXSkgPCAwLjIpIHsKICAgICAgICAgICAgICAgIGljb25MaVtzXS5zcGxpY2UocywgMSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IC8vIGxldCBhcmVhRyA9IHN2Zy5hcHBlbmQoImciKQoKCiAgICAgIHZhciB0eXBlQ29sb3IgPSB7CiAgICAgICAgIjEiOiAiI2ZmOWM5YyIsCiAgICAgICAgIjIiOiAiI2Y0ZjRkMCIsCiAgICAgICAgIjMiOiAiIzZmOGJlMCIKICAgICAgfTsKICAgICAgdmFyIGNvbG9yTGkgPSBfdGhpcy5tY29sb3I7CiAgICAgIHN2Zy5zZWxlY3RBbGwoInBhdGgiKS5kYXRhKHN0YWNrRGF0YSkuam9pbigicGF0aCIpLmF0dHIoImlkIiwgZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gZC5rZXk7CiAgICAgIH0pLmF0dHIoImNsYXNzIiwgInJpdmVyIikuYXR0cigiZCIsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuIGFyZWEoZCk7CiAgICAgIH0pLmF0dHIoImZpbGwiLCBmdW5jdGlvbiAoZCwgaSkgewogICAgICAgIHJldHVybiB0eXBlQ29sb3JbZC5rZXldOwogICAgICB9KS5vbigibW91c2VvdmVyIiwgZnVuY3Rpb24gKGQpIHsKICAgICAgICBkMy5zZWxlY3RBbGwoIi5yaXZlciIpLnN0eWxlKCJmaWx0ZXIiLCAidXJsKCkiKTsKICAgICAgICBkMy5zZWxlY3QodGhpcykuc3R5bGUoImZpbHRlciIsICJ1cmwoI2Nvb2xTaGFkb3cpIik7CiAgICAgIH0pOwoKICAgICAgZm9yICh2YXIgX3QyIGluIHRyaUxpKSB7CiAgICAgICAgdmFyIF9hcmVhID0gdG9vbHMuY2FsY1RyaWFuZ2xlKHRyaUxpW190Ml1bJ29kJ10gKiB4U3RlcCwgLTMwLCAxNCk7CgogICAgICAgIF90aGlzLmRyYXdUcmlhbmdsZShzdmcsICJyZ2IoMjUwLCAxOTksIDg4KSIsIF9hcmVhLCAicmdiKDI1MCwgMTk5LCA4OCkiLCAxLCAxNSwgImVudEUiLCAiZW50RV8iLmNvbmNhdChkYXRhWydpZCddKSk7CgogICAgICAgIF90aGlzLmRyYXdUeHQoc3ZnLCB0cmlMaVtfdDJdWydvZCddICogeFN0ZXAsIC0yMywgIlQiLCAid2hpdGUiLCAwLCAibWlkZGxlIiwgMTgpOwogICAgICB9CgogICAgICBmb3IgKHZhciBfdDMgaW4gZXhlTGkpIHsKICAgICAgICB2YXIgX2FyZWEyID0gdG9vbHMuY2FsY1RyaWFuZ2xlKGV4ZUxpW190M11bJ29kJ10gKiB4U3RlcCwgLTMwLCAxNCk7CgogICAgICAgIF90aGlzLmRyYXdUcmlhbmdsZShzdmcsICJyZ2IoMjUwLCAxOTksIDg4KSIsIF9hcmVhMiwgInJnYigyNTAsIDE5OSwgODgpIiwgMSwgMTUsICJlbnRFIiwgImVudEVfIi5jb25jYXQoZGF0YVsnaWQnXSkpOwoKICAgICAgICBfdGhpcy5kcmF3VHh0KHN2ZywgZXhlTGlbX3QzXVsnb2QnXSAqIHhTdGVwLCAtMjMsICJFIiwgIndoaXRlIiwgMCwgIm1pZGRsZSIsIDE4KTsKICAgICAgfQogICAgfSwKICAgIGRyYXdUaW1lQXhpczogZnVuY3Rpb24gZHJhd1RpbWVBeGlzKHN2ZykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIHN1bVRvdGFsRHVyYXRpb24gPSBfdGhpcy5zdW1Ub3RhbER1cmF0aW9uOwogICAgICB2YXIgZGF0YSA9IF90aGlzLmRyYXdFbnRpdHlMb2NhdGlvbjsKICAgICAgdmFyIGFkZERhdGEgPSB0b29scy5kZWVwQ2xvbmUoX3RoaXMuZHJhd0VudGl0eUxvY2F0aW9uKTsKICAgICAgdmFyIG1hcmdpbiA9IF90aGlzLm1hcmdpbjsKICAgICAgdmFyIHByZXggPSBtYXJnaW4ubGVmdDsKICAgICAgdmFyIHByZXkgPSA1MDsKICAgICAgdmFyIHdpZHRoID0gc3ZnLmF0dHIoIndpZHRoIikgLSAyMDsgLy9tYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDsKCiAgICAgIHZhciBoZWlnaHQgPSBfdGhpcy5oZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTsKICAgICAgdmFyIHdpZHRoU2NhbGUgPSBkMy5zY2FsZUxpbmVhcihbMCwgc3VtVG90YWxEdXJhdGlvbl0sIFswLCB3aWR0aF0pOwogICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKHNlbGYsIGluZHgsIGFycikgewogICAgICAgIHZhciB0b3RhbER1cmF0aW9uVmFsdWUgPSBzZWxmWyd0b3RhbER1cmF0aW9uJ107CiAgICAgICAgdmFyIHRpbWVMaXN0ID0gc2VsZlsndGltZSddOwogICAgICAgIHZhciBpZCA9IHNlbGZbJ2lkJ107CiAgICAgICAgdmFyIGR1cmF0aW9uID0gdG9vbHMudGltZTJzZWNvbmRzKHRpbWVMaXN0WzFdKSAtIHRvb2xzLnRpbWUyc2Vjb25kcyh0aW1lTGlzdFswXSk7IC8vIGNvbnNvbGUubG9nKHRpbWVMaXN0LHRvb2xzLnRpbWUyc2Vjb25kcyh0aW1lTGlzdFswXSkpCgogICAgICAgIHZhciBldldpZHRoID0gd2lkdGhTY2FsZShkdXJhdGlvbikgLSA0OwogICAgICAgIHZhciBldlRXaWR0aCA9IHdpZHRoU2NhbGUodG90YWxEdXJhdGlvblZhbHVlKTsKICAgICAgICB2YXIgbGF5ID0gcGFyc2VJbnQoc2VsZlsnbGF5b3V0J10pOwogICAgICAgIHZhciBldkhpZ2h0ID0gODAgLSAyMCAqIGxheTsKICAgICAgICB2YXIgeCA9IHByZXg7CiAgICAgICAgdmFyIHkgPSBwcmV5ICsgMjAgKiBsYXk7CiAgICAgICAgcHJleCArPSBldldpZHRoICsgNDsKICAgICAgICB2YXIgY3IgPSAzOyAvLyBpZihzZWxmWyd0eXBlJ109PTApewoKICAgICAgICBpZiAoMSkgewogICAgICAgICAgaWYgKGxheSA9PSAwKSB7CiAgICAgICAgICAgIF90aGlzLmRyYXdSZWN0KHN2ZywgeCAtIDEsIHkgLSA1OSwgMywgNDIsIDAsIDAsIHNlbGZbJ2NvbG9yJ10sIDAuNCwgJ3doaXRlJywgInRpbWVBeGlzRW50QmxfIi5jb25jYXQoaW5keCksIDAsICd0aW1lQXhpc0VudEJsJyk7CgogICAgICAgICAgICBfdGhpcy5kcmF3VHh0KHN2ZywgeCArIDIzLCB5IC0gMjMsIDEwLCBbc2VsZlsndGltZSddWzBdLnNwbGl0KCI6Iikuc3BsaWNlKDEpLmpvaW4oIjoiKV0sIHNlbGZbJ2NvbG9yJ10sIDE1LCAidGltZUR1clRleHRfIi5jb25jYXQoaWQpLCAndGltZUR1eXJUZXh0Jyk7CgogICAgICAgICAgICBfdGhpcy5kcmF3UmVjdChzdmcsIHggLSAyLCB5IC0gMjAsIGV2VFdpZHRoLCAxMDAsIDYsIDYsIHNlbGZbJ2NvbG9yJ10sIDAuMywgJ3doaXRlJywgInRpbWVBeGlzRW50Ql8iLmNvbmNhdChpbmR4KSwgMS41LCAndGltZUF4aXNFbnRCJyk7CiAgICAgICAgICB9CgogICAgICAgICAgX3RoaXMuZHJhd1JlY3Qoc3ZnLCB4LCB5LCBldldpZHRoLCBldkhpZ2h0LCAzLCAzLCBzZWxmWydjb2xvciddLCAwLjQsIHNlbGZbJ2NvbG9yRCddLCAidGltZUF4aXNFbnRfIi5jb25jYXQoaWQpLCAxLjUsICd0aW1lQXhpc0VudCcpOwoKICAgICAgICAgIF90aGlzLmRyYXdUeHQoc3ZnLCB4ICsgZXZXaWR0aCAvIDIsIHkgKyBldkhpZ2h0ICsgMjAsIDEwLCBbc2VsZlsnbmFtZSddLnNwbGl0KCIgIikuam9pbigiICIpXSwgImdyZXkiLCAxNiwgInRpbWVUZXh0XyIuY29uY2F0KGlkKSwgJ3RpbWVUZXh0Jyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmIChsYXkgPT0gMCkgewogICAgICAgICAgICBfdGhpcy5kcmF3UmVjdChzdmcsIHggLSAyLCB5IC0gMjAsIGV2VFdpZHRoLCAxMDAsIDYsIDYsIHNlbGZbJ2NvbG9yJ10sIDAuMywgJ3doaXRlJywgInRpbWVBeGlzRW50Ql8iLmNvbmNhdChpZCksIDEuNSwgJ3RpbWVBeGlzRW50Jyk7CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIGFyZWEgPSBbW3ggKyBjciwgeSArIGV2SGlnaHQgLSBjcl0sIFt4IC0gY3IgKyBldldpZHRoLCB5ICsgZXZIaWdodCAtIGNyXSwgW3ggKyBldldpZHRoIC8gMiwgeV1dOwoKICAgICAgICAgIF90aGlzLmRyYXdUcmlhbmdsZShzdmcsIHNlbGZbJ2NvbG9yJ10sIGFyZWEsIHNlbGZbJ2NvbG9yJ10sIDEsIGNyICogMiwgImVudEUiLCAiZW50RV8iLmNvbmNhdChkYXRhWydpZCddKSk7CiAgICAgICAgfQoKICAgICAgICBhZGREYXRhW2luZHhdWyd0aW1lWCddID0geDsKICAgICAgICBhZGREYXRhW2luZHhdWyd0aW1lVyddID0gZXZXaWR0aDsKICAgICAgfSk7CiAgICAgIGQzLnNlbGVjdEFsbCgnLnRpbWVUZXh0JykuYXR0cigib3BhY2l0eSIsIDApOwogICAgICBfdGhpcy5kcmF3RW50aXR5TG9jYXRpb24gPSBhZGREYXRhOwogICAgfSwKICAgIGRyYXdUcmlhbmdsZTogZnVuY3Rpb24gZHJhd1RyaWFuZ2xlKHN2ZywgY29sb3IsIHBvaW50cywgc3Ryb2tlKSB7CiAgICAgIHZhciBvcGFjaXR5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAxOwogICAgICB2YXIgc3Ryb2tlVyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogMTU7CiAgICAgIHZhciBjbGFzc05hID0gYXJndW1lbnRzLmxlbmd0aCA+IDYgPyBhcmd1bWVudHNbNl0gOiB1bmRlZmluZWQ7CiAgICAgIHZhciBpZE5hID0gYXJndW1lbnRzLmxlbmd0aCA+IDcgPyBhcmd1bWVudHNbN10gOiB1bmRlZmluZWQ7CgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgc3ZnLmFwcGVuZCgicG9seWdvbiIpLmF0dHIoInBvaW50cyIsIHBvaW50cykuYXR0cigiZmlsbCIsIGNvbG9yKS5hdHRyKCJpZCIsIGlkTmEpLmF0dHIoImNsYXNzIiwgY2xhc3NOYSkuYXR0cigic3Ryb2tlLWxpbmVqb2luIiwgInJvdW5kIikuYXR0cigib3BhY2l0eSIsIG9wYWNpdHkpLmF0dHIoInN0cm9rZSIsIHN0cm9rZSkub24oIm1vdXNlb3ZlciIsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgLy8gZDMuc2VsZWN0KHRoaXMpLmF0dHIoInIiLCByICogMS4xKQogICAgICAgIHZhciBjbGFzc04gPSBkMy5zZWxlY3QodGhpcykuYXR0cigiY2xhc3MiKTsKICAgICAgICB2YXIgaWROID0gZDMuc2VsZWN0KHRoaXMpLmF0dHIoImlkIikuc3BsaXQoIl8iKVsxXTsKICAgICAgICBfdGhpcy5vdmVyRW50aXR5SWQgPSBpZE47CiAgICAgICAgdmFyIHNob3dSZWwgPSBfdGhpcy5zaG93RW50aXR5UmVsSWRMaXN0OwoKICAgICAgICBpZiAoIXNob3dSZWwuaW5jbHVkZXMocGFyc2VJbnQoaWROKSkpIHsKICAgICAgICAgIHNob3dSZWwucHVzaChwYXJzZUludChpZE4pKTsKICAgICAgICAgIF90aGlzLnNob3dFbnRpdHlSZWxJZE92ZXJTdGF0ZSA9IDA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIF90aGlzLnNob3dFbnRpdHlSZWxJZE92ZXJTdGF0ZSA9IDE7CiAgICAgICAgfQoKICAgICAgICBfdGhpcy5zaG93RW50aXR5UmVsSWRMaXN0ID0gc2hvd1JlbDsKCiAgICAgICAgaWYgKGNsYXNzTiA9PSAnbGluZVBvaW50JykgewogICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmF0dHIoIm9wYWNpdHkiLCAxKS5hdHRyKCJyIiwgNSk7CiAgICAgICAgfSAvLyBlbHNlIHsKICAgICAgICAvLyAgIGQzLnNlbGVjdEFsbCgiLmYiICsgZGF0YVsnaWQnXSkKICAgICAgICAvLyAgICAgLmF0dHIoInRyYW5zZm9ybSIsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgLy8gICAgICAgbGV0IHRyYW5zZm9ybWQgPSBkMy5zZWxlY3QodGhpcykuYXR0cigidHJhbnNmb3JtIikKICAgICAgICAvLyAgICAgICByZXR1cm4gdHJhbnNmb3JtZC5zcGxpdCgiICIpWzBdICsgIiBzY2FsZSgxLjEpIgogICAgICAgIC8vICAgICB9KQogICAgICAgIC8vICAgZDMuc2VsZWN0QWxsKCIuYmFzaWNSZWwiKQogICAgICAgIC8vICAgICAuYXR0cigiY2xhc3MiLCBmdW5jdGlvbiAoZCkgewogICAgICAgIC8vICAgICAgIGxldCBjbGFzc04gPSBkMy5zZWxlY3QodGhpcykuYXR0cigiY2xhc3MiKTsKICAgICAgICAvLyAgICAgICBsZXQgY2xhc3NOTGlzdCA9IGNsYXNzTi5zcGxpdCgiICIpOwogICAgICAgIC8vICAgICAgIGxldCBqZyA9IDA7CiAgICAgICAgLy8gICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjbGFzc05MaXN0Lmxlbmd0aCAtIDE7IGkrKykgewogICAgICAgIC8vICAgICAgICAgaWYgKCdzb3VyY2UnICsgZGF0YVsnaWQnXSA9PSBjbGFzc05MaXN0W2ldKSB7IGpnID0gMTsgfQogICAgICAgIC8vICAgICAgICAgaWYgKCd0YXJnZXQnICsgZGF0YVsnaWQnXSA9PSBjbGFzc05MaXN0W2ldKSB7IGpnID0gMTsgfQogICAgICAgIC8vICAgICAgIH0KICAgICAgICAvLyAgICAgICBpZiAoamcgPT0gMSkgewogICAgICAgIC8vICAgICAgICAgLy8gY2xhc3NOICs9ICIgYWN0aXZlUyI7CiAgICAgICAgLy8gICAgICAgfQogICAgICAgIC8vICAgICAgIHJldHVybiBjbGFzc047CiAgICAgICAgLy8gICAgIH0pCiAgICAgICAgLy8gfQoKICAgICAgfSkub24oIm1vdXNlbGVhdmUiLCBmdW5jdGlvbiAoZCkgewogICAgICAgIC8vIGQzLnNlbGVjdCh0aGlzKS5hdHRyKCJyIiwgcikKICAgICAgICBfdGhpcy5vdmVyRW50aXR5SWQgPSAiIjsgLy9fdGhpcy5jdXJFbnRJZDsKCiAgICAgICAgdmFyIGNsYXNzTiA9IGQzLnNlbGVjdCh0aGlzKS5hdHRyKCJjbGFzcyIpOwogICAgICAgIHZhciBpZE4gPSBkMy5zZWxlY3QodGhpcykuYXR0cigiaWQiKS5zcGxpdCgiXyIpWzFdOwogICAgICAgIHZhciBzaG93UmVsID0gX3RoaXMuc2hvd0VudGl0eVJlbElkTGlzdDsKCiAgICAgICAgaWYgKF90aGlzLnNob3dFbnRpdHlSZWxJZE92ZXJTdGF0ZSA9PSAxKSB7CiAgICAgICAgICBzaG93UmVsLnB1c2gocGFyc2VJbnQoaWROKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHNob3dSZWwuc3BsaWNlKHNob3dSZWwuaW5kZXhPZihwYXJzZUludChpZE4pKSwgMSk7CiAgICAgICAgfQoKICAgICAgICBfdGhpcy5zaG93RW50aXR5UmVsSWRMaXN0ID0gc2hvd1JlbDsKCiAgICAgICAgaWYgKGNsYXNzTiA9PSAnbGluZVBvaW50JykgewogICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmF0dHIoIm9wYWNpdHkiLCAwKS5hdHRyKCJyIiwgNSk7CiAgICAgICAgfSAvLyBlbHNlIHsKICAgICAgICAvLyAgIGQzLnNlbGVjdEFsbCgiLmYiICsgZGF0YVsnaWQnXSkKICAgICAgICAvLyAgICAgLmF0dHIoInRyYW5zZm9ybSIsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgLy8gICAgICAgbGV0IHRyYW5zZm9ybWQgPSBkMy5zZWxlY3QodGhpcykuYXR0cigidHJhbnNmb3JtIikKICAgICAgICAvLyAgICAgICByZXR1cm4gdHJhbnNmb3JtZC5zcGxpdCgiICIpWzBdICsgIiBzY2FsZSgxKSIKICAgICAgICAvLyAgICAgfSkKICAgICAgICAvLyAgIGQzLnNlbGVjdCgiI2dyYXBoUGFuZWwiKS5zZWxlY3RBbGwoInBhdGgiKQogICAgICAgIC8vICAgICAuYXR0cigiY2xhc3MiLCBmdW5jdGlvbiAoZCkgewogICAgICAgIC8vICAgICAgIGxldCB0aGlzU2VsZWN0ID0gZDMuc2VsZWN0KHRoaXMpCiAgICAgICAgLy8gICAgICAgbGV0IGNsYXNzTiA9IHRoaXNTZWxlY3QuYXR0cigiY2xhc3MiKTsKICAgICAgICAvLyAgICAgICBsZXQgY2xhc3NOTGlzdCA9IGNsYXNzTi5zcGxpdCgiICIpCiAgICAgICAgLy8gICAgICAgaWYgKGNsYXNzTkxpc3RbY2xhc3NOTGlzdC5sZW5ndGggLSAxXSA9PSAiYWN0aXZlUyIpIHsKICAgICAgICAvLyAgICAgICAgIGNsYXNzTiA9ICIiOwogICAgICAgIC8vICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjbGFzc05MaXN0Lmxlbmd0aCAtIDE7IGkrKykgewogICAgICAgIC8vICAgICAgICAgICBjbGFzc04gKz0gIiAiICsgY2xhc3NOTGlzdFtpXTsKICAgICAgICAvLyAgICAgICAgIH0KICAgICAgICAvLyAgICAgICB9CiAgICAgICAgLy8gICAgICAgcmV0dXJuIGNsYXNzTgogICAgICAgIC8vICAgICB9KQogICAgICAgIC8vIH0KCiAgICAgIH0pLm9uKCJjbGljayIsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgdmFyIGlkTiA9IGQzLnNlbGVjdCh0aGlzKS5hdHRyKCJpZCIpLnNwbGl0KCJfIilbMV07CiAgICAgICAgdmFyIHNob3dSZWwgPSBfdGhpcy5zaG93RW50aXR5UmVsSWRMaXN0OyAvLyAgLSBfdGhpcy5zaG93RW50aXR5UmVsSWRPdmVyU3RhdGU7CgogICAgICAgIGlmICghc2hvd1JlbC5pbmNsdWRlcyhwYXJzZUludChpZE4pKSkgewogICAgICAgICAgc2hvd1JlbCA9IFtwYXJzZUludChpZE4pXTsKICAgICAgICAgIF90aGlzLnNob3dFbnRpdHlSZWxJZE92ZXJTdGF0ZSA9IDE7CiAgICAgICAgfSBlbHNlIGlmIChzaG93UmVsLmluY2x1ZGVzKHBhcnNlSW50KGlkTikpKSB7CiAgICAgICAgICAvLyBzaG93UmVsLmZpbHRlcihpdGVtPT57cmV0dXJuIGl0ZW09PXBhcnNlSW50KGlkTil9KQogICAgICAgICAgX3RoaXMuc2hvd0VudGl0eVJlbElkT3ZlclN0YXRlID0gMDsKICAgICAgICAgIHNob3dSZWwuc3BsaWNlKHNob3dSZWwuaW5kZXhPZihwYXJzZUludChpZE4pKSwgMSk7CiAgICAgICAgfQoKICAgICAgICBfdGhpcy5zaG93RW50aXR5UmVsSWRMaXN0ID0gc2hvd1JlbDsgLy8gZDMuc2VsZWN0KHRoaXMpLmF0dHIoInIiLCByKTsKICAgICAgICAvLyBkMy5zZWxlY3RBbGwoIi5mIiArIGRhdGFbJ2lkJ10pCiAgICAgICAgLy8gICAuYXR0cigidHJhbnNmb3JtIiwgZnVuY3Rpb24gKGQpIHsKICAgICAgICAvLyAgICAgbGV0IHRyYW5zZm9ybWQgPSBkMy5zZWxlY3QodGhpcykuYXR0cigidHJhbnNmb3JtIikKICAgICAgICAvLyAgICAgcmV0dXJuIHRyYW5zZm9ybWQuc3BsaXQoIiAiKVswXSArICIgc2NhbGUoMSkiCiAgICAgICAgLy8gICB9KQoKICAgICAgICB2YXIgdGhpc0lkID0gdGhpcy5pZC5zcGxpdCgiXyIpWzFdOwogICAgICAgIF90aGlzLmN1ckVudElkID0gdGhpc0lkOwoKICAgICAgICB2YXIgdGhpc0RhdGEgPSBfdGhpcy5kcmF3RW50aXR5TG9jYXRpb24uZmluZChmdW5jdGlvbiAoYSkgewogICAgICAgICAgcmV0dXJuIGFbJ2lkJ10gPT0gdGhpc0lkOwogICAgICAgIH0pOwoKICAgICAgICB2YXIgdGhpc1RpbWUgPSB0aGlzRGF0YVsndGltZSddOwoKICAgICAgICBfdGhpcy5jbGlja19FbnQodGhpc1RpbWUpOwoKICAgICAgICB2YXIgcHN2ZyA9IGQzLnNlbGVjdCgiI2VudEciKTsKICAgICAgICB2YXIgZHcgPSBwc3ZnLmF0dHIoIndpZHRoIik7CiAgICAgICAgdmFyIGRoID0gcHN2Zy5hdHRyKCJoZWlnaHQiKTsKICAgICAgICBwc3ZnLnJlbW92ZSgpOwogICAgICAgIHZhciBzdmcgPSBkMy5zZWxlY3QoJyNlZGl0RW50JykuYXBwZW5kKCJnIikuYXR0cigiaWQiLCAiZW50RyIpLmF0dHIoIndpZHRoIiwgZHcpLmF0dHIoImhlaWdodCIsIGRoKTsKCiAgICAgICAgX3RoaXMuZHJhd0VudGl0eShzdmcsIGR3IC8gMiwgMTAwLCA1MCwgdGhpc0RhdGEsIDEpOyAvLyBpZiAodGhpc0RhdGFbJ3R5cGUnXSA9PSAwICkgewogICAgICAgIC8vIF90aGlzLmRyYXdFbnRpdHlUaW1lQXhpcyhzdmcsdGhpc0RhdGEsW2R3LzIsMTAwLDEwXSk7CiAgICAgICAgLy8gfQogICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXNUaW1lLHRoaXNJZCx0aGlzRGF0YSkKCiAgICAgIH0pLmF0dHIoInN0cm9rZS13aWR0aCIsIHN0cm9rZVcpOwogICAgfSwKICAgIGRyYXdwb2x5Z29uOiBmdW5jdGlvbiBkcmF3cG9seWdvbihzdmcsIGNvbG9yLCBhcmVhcywgc3Ryb2tlKSB7CiAgICAgIHZhciBvcGFjaXR5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAxOwogICAgICBzdmcuYXBwZW5kKCJwb2x5Z29uIikuYXR0cigicG9pbnRzIiwgYXJlYXMpLmF0dHIoImZpbGwiLCBjb2xvcikuYXR0cigib3BhY2l0eSIsIG9wYWNpdHkpLmF0dHIoInN0cm9rZSIsIHN0cm9rZSkuYXR0cigic3Ryb2tlLXdpZHRoIiwgIjEuNXB4Iik7CiAgICB9LAogICAgZHJhd0VudGl0eVRpbWVBeGlzOiBmdW5jdGlvbiBkcmF3RW50aXR5VGltZUF4aXMoc3ZnLCBlbnREYXRhKSB7CiAgICAgIHZhciBjb3B5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAwOwoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciB4ID0gZW50RGF0YVsneCddOwogICAgICB2YXIgciA9IGVudERhdGFbJ3InXTsKICAgICAgdmFyIHkgPSBlbnREYXRhWyd5J10gKyByIC8gMjsKCiAgICAgIGlmIChjb3B5ICE9IDApIHsKICAgICAgICB4ID0gY29weVswXTsKICAgICAgICByID0gY29weVsyXTsKICAgICAgICB5ID0gY29weVsxXSArIHIgLyAyOwogICAgICB9CgogICAgICB2YXIgcGF0aDEgPSBkMy5wYXRoKCk7CiAgICAgIHZhciBqZzEgPSAwOwogICAgICB2YXIgcGF0aDIgPSBkMy5wYXRoKCk7CiAgICAgIHZhciBqZzIgPSAwOwogICAgICB2YXIgZGFJZCA9IGVudERhdGFbJ2lkJ107CiAgICAgIHZhciBlbnREYXRhTyA9IF90aGlzLmRyYXdFbnRpdHlMb2NhdGlvbjsKICAgICAgdmFyIHN1bVRvdGFsRHVyYXRpb24gPSBfdGhpcy5zdW1Ub3RhbER1cmF0aW9uOwogICAgICB2YXIgd2lkdGhTY2FsZSA9IGQzLnNjYWxlTGluZWFyKFswLCBzdW1Ub3RhbER1cmF0aW9uXSwgWzAsIE1hdGguUEldKTsKICAgICAgdmFyIHRpbWVTdGVwUiA9IDA7CiAgICAgIHZhciB0aW1lU3RhcnRSID0gLU1hdGguUEkgLyAyOwogICAgICB2YXIgaW50ZXIgPSAwOwogICAgICB2YXIgc29ucyA9IHRvb2xzLmRlZXBDbG9uZShlbnREYXRhWydzb24nXSk7CiAgICAgIHZhciByZWxMaXN0ID0gW107CiAgICAgIHZhciByZWxSb290TGlzdCA9IFtdOwogICAgICB2YXIgcHNOdW0gPSAwLjU7CgogICAgICBpZiAoc29ucy5sZW5ndGggPiAwKSB7CiAgICAgICAgaW50ZXIgPSAxNDsKICAgICAgfQoKICAgICAgdmFyIHJlbERhdGEgPSBfdGhpcy5yZWxEYXRhOwogICAgICB2YXIgb0RhdGEgPSBfdGhpcy5kcmF3RW50aXR5TG9jYXRpb247CiAgICAgIHZhciBiYXNpY1JlbCA9IHJlbERhdGFbJ2Jhc2ljUmVsJ107CgogICAgICB2YXIgX2xvb3A5ID0gZnVuY3Rpb24gX2xvb3A5KHJlKSB7CiAgICAgICAgdmFyIHNvcmNlSWQgPSBiYXNpY1JlbFtyZV1bMF07CiAgICAgICAgdmFyIHRhcmdldElkID0gYmFzaWNSZWxbcmVdWzFdOwogICAgICAgIHZhciBjTm9kZSA9ICcnOwoKICAgICAgICBpZiAoc29yY2VJZCA9PSBkYUlkKSB7CiAgICAgICAgICBjTm9kZSA9IG9EYXRhLmZpbmQoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgICAgcmV0dXJuIGRbJ2lkJ10gPT0gdGFyZ2V0SWQ7CiAgICAgICAgICB9KTsKICAgICAgICAgIHJlbExpc3QucHVzaCh0YXJnZXRJZCk7CiAgICAgICAgICByZWxSb290TGlzdC5wdXNoKGNOb2RlWydyb290SW5kZXgnXSk7CiAgICAgICAgfQoKICAgICAgICBpZiAodGFyZ2V0SWQgPT0gZGFJZCkgewogICAgICAgICAgY05vZGUgPSBvRGF0YS5maW5kKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICAgIHJldHVybiBkWydpZCddID09IHNvcmNlSWQ7CiAgICAgICAgICB9KTsKICAgICAgICAgIHJlbExpc3QucHVzaChzb3JjZUlkKTsKICAgICAgICAgIHJlbFJvb3RMaXN0LnB1c2goY05vZGVbJ3Jvb3RJbmRleCddKTsKICAgICAgICB9CiAgICAgIH07CgogICAgICBmb3IgKHZhciByZSA9IDA7IHJlIDwgYmFzaWNSZWwubGVuZ3RoOyByZSsrKSB7CiAgICAgICAgX2xvb3A5KHJlKTsKICAgICAgfQoKICAgICAgOyAvLyBpZihlbnREYXRhW10pIAoKICAgICAgdmFyIHdsaW5lID0gMDsKICAgICAgdmFyIHN1bVRvdGFsRHVyYXRpb25GID0gMDsKICAgICAgZW50RGF0YU8uZm9yRWFjaChmdW5jdGlvbiAoc2VsZiwgaW5keCwgYXJyKSB7CiAgICAgICAgdmFyIHRvdGFsRHVyYXRpb25WYWx1ZSA9IHNlbGZbJ3RvdGFsRHVyYXRpb24nXTsKICAgICAgICB2YXIgdGltZUxpc3QgPSBzZWxmWyd0aW1lJ107CiAgICAgICAgdmFyIGxheW91dCA9IHNlbGZbJ2xheW91dCddOwogICAgICAgIHZhciByb290SW5kZXggPSBzZWxmWydyb290SW5kZXgnXTsKICAgICAgICB2YXIgZHVyYXRpb24gPSB0b29scy50aW1lMnNlY29uZHModGltZUxpc3RbMV0pIC0gdG9vbHMudGltZTJzZWNvbmRzKHRpbWVMaXN0WzBdKTsKICAgICAgICB0aW1lU3RlcFIgPSB3aWR0aFNjYWxlKGR1cmF0aW9uKTsKCiAgICAgICAgaWYgKCFyZWxSb290TGlzdC5pbmNsdWRlcyhyb290SW5kZXgpKSB7CiAgICAgICAgICB3bGluZSArPSB0aW1lU3RlcFIgKiBwc051bTsKICAgICAgICAgIHN1bVRvdGFsRHVyYXRpb25GICs9IGR1cmF0aW9uOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHZhciB3aWR0aFNjYWxlQSA9IGQzLnNjYWxlTGluZWFyKFswLCBzdW1Ub3RhbER1cmF0aW9uIC0gc3VtVG90YWxEdXJhdGlvbkZdLCBbMCwgTWF0aC5QSSAtIHdsaW5lXSk7IC8vIGlmKHJvb3RFbnRpdHlMaXN0Lmxlbmd0aD09MCl7CiAgICAgIC8vICAgd2lkdGhTY2FsZUEgPSB3aWR0aFNjYWxlCiAgICAgIC8vIH0KICAgICAgLy8gbGV0IHdsaW5lID0gMDsKCiAgICAgIGVudERhdGFPLmZvckVhY2goZnVuY3Rpb24gKHNlbGYsIGluZHgsIGFycikgewogICAgICAgIHZhciB0b3RhbER1cmF0aW9uVmFsdWUgPSBzZWxmWyd0b3RhbER1cmF0aW9uJ107CiAgICAgICAgdmFyIHRpbWVMaXN0ID0gc2VsZlsndGltZSddOwogICAgICAgIHZhciBsYXlvdXQgPSBzZWxmWydsYXlvdXQnXTsKICAgICAgICB2YXIgcm9vdEluZGV4ID0gc2VsZlsncm9vdEluZGV4J107CiAgICAgICAgdmFyIGNJZCA9IHNlbGZbJ2lkJ107CiAgICAgICAgdmFyIGR1cmF0aW9uID0gdG9vbHMudGltZTJzZWNvbmRzKHRpbWVMaXN0WzFdKSAtIHRvb2xzLnRpbWUyc2Vjb25kcyh0aW1lTGlzdFswXSk7CiAgICAgICAgdGltZVN0ZXBSID0gd2lkdGhTY2FsZShkdXJhdGlvbik7CgogICAgICAgIGlmICghcmVsUm9vdExpc3QuaW5jbHVkZXMocm9vdEluZGV4KSkgewogICAgICAgICAgaWYgKHJlbFJvb3RMaXN0Lmxlbmd0aCAhPSAwKSB7CiAgICAgICAgICAgIHRpbWVTdGVwUiA9IHBzTnVtICogd2lkdGhTY2FsZShkdXJhdGlvbik7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRpbWVTdGVwUiA9IHdpZHRoU2NhbGVBKGR1cmF0aW9uKTsKICAgICAgICB9CgogICAgICAgIHZhciBlbmRBbmdsZXQgPSB0aW1lU3RhcnRSICsgdGltZVN0ZXBSOwogICAgICAgIHZhciBkYXRhc2V0ID0gewogICAgICAgICAgc3RhcnRBbmdsZTogdGltZVN0YXJ0UiwKICAgICAgICAgIGVuZEFuZ2xlOiBlbmRBbmdsZXQKICAgICAgICB9OyAvL+WIm+W7uuS4gOS4quW8p+eUn+aIkOWZqAoKICAgICAgICB0aW1lU3RhcnRSID0gZW5kQW5nbGV0OwogICAgICAgIHZhciBjb2xvciA9ICdibHVlJzsKICAgICAgICB2YXIgcmggPSAzMDsKICAgICAgICB2YXIgaCA9IHJoOwogICAgICAgIHZhciBuaCA9IDA7CgogICAgICAgIGlmIChyZWxSb290TGlzdC5sZW5ndGggIT0gMCkgewogICAgICAgICAgaCA9IHJoICogMC4zMiArIHJoICogMC42IC0gMyAqIGxheW91dDsKICAgICAgICAgIG5oID0gcmggKiAwLjM7CiAgICAgICAgfQoKICAgICAgICBpZiAoIXJlbFJvb3RMaXN0LmluY2x1ZGVzKHNlbGZbJ3Jvb3RJbmRleCddKSkgewogICAgICAgICAgaCA9IHJoICogMC43OwogICAgICAgICAgbmggPSBoICogMCArIGggKiAwLjY7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGRhdGFzZXQuc3RhcnRBbmdsZSArPSAwLjAwMzsKICAgICAgICAgIGRhdGFzZXQuZW5kQW5nbGUgLT0gMC4wMDM7CiAgICAgICAgfQoKICAgICAgICB2YXIgYXJjUGF0aCA9IGQzLmFyYygpLmlubmVyUmFkaXVzKHIgKyBpbnRlciArIG5oKS5vdXRlclJhZGl1cyhyICsgaW50ZXIgKyBoKTsKICAgICAgICB2YXIgcGF0aEFyYyA9IGFyY1BhdGgoZGF0YXNldCk7CiAgICAgICAgdmFyIGFyYzsKCiAgICAgICAgaWYgKHJlbFJvb3RMaXN0Lmxlbmd0aCAhPSAwKSB7CiAgICAgICAgICB2YXIgamlhbnRvdVBhdGggPSBkMy5wYXRoKCk7CiAgICAgICAgICBqaWFudG91UGF0aC5hcmMoeCwgeSAtIHIgLyAyLCByICsgaCArIGludGVyLCAtTWF0aC5QSSwgMCk7IC8vIF90aGlzLmRyYXdUaW1lTGluZShfdGhpcy5hcmNHLCBqaWFudG91UGF0aCwgInJnYigyMDAsMjAwLDIwMCkiLCAxLCAnOSw1JywgJ3RpbWVMYXlvdXQgJywgJ3RpbWVMYXlvdXQgJyk7CgogICAgICAgICAgaWYgKHJlbFJvb3RMaXN0LmluY2x1ZGVzKHNlbGZbJ3Jvb3RJbmRleCddKSkgewogICAgICAgICAgICBpZiAocmVsTGlzdC5pbmNsdWRlcyhwYXJzZUludChzZWxmWydpZCddKSkpIHsKICAgICAgICAgICAgICBpZiAoY29weSAhPSAwICYmIGpnMSA9PSAwKSB7CiAgICAgICAgICAgICAgICBqZzEgPSAxOwogICAgICAgICAgICAgICAgcGF0aDEubW92ZVRvKDIsIDI1KTsKICAgICAgICAgICAgICAgIHBhdGgxLmxpbmVUbygxNTAsIDI1KTsKICAgICAgICAgICAgICAgIHZhciBhbmcgPSBkYXRhc2V0LnN0YXJ0QW5nbGUgKyBNYXRoLlBJIC8gMjsKCiAgICAgICAgICAgICAgICBfdGhpcy5kcmF3VHh0KHN2ZywgNzAsIDIwLCAxMDAsIFsiQXNzb2NpYXRlZCBDb25jZXB0Il0sICJncmV5IiwgMTUsICJ0ZXh0c18xIik7IC8vIHBhdGgxLmxpbmVUbygoeCsxMCksKHktci8yKzEwKSkKCgogICAgICAgICAgICAgICAgcGF0aDEubGluZVRvKHggLSAociArIGludGVyICsgaCkgKiBNYXRoLmNvcyhhbmcpLCB5IC0gciAvIDIgLSAociArIGludGVyICsgaCkgKiBNYXRoLnNpbihhbmcpKTsKCiAgICAgICAgICAgICAgICBfdGhpcy5kcmF3VGltZUxpbmUoc3ZnLCBwYXRoMSwgInJnYigyMDAsMjAwLDIwMCkiLCAyLCAnOSw1JywgJ21tICcsICdtbSAnKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGFyYyA9IF90aGlzLmRyYXdBcmMoc3ZnLCB4LCB5IC0gciAvIDIsIHBhdGhBcmMsIHNlbGZbJ2NvbG9yJ10sIHNlbGZbJ2NvbG9yJ10sICJ0aW1lQXhpc0ZvciBmIi5jb25jYXQoZW50RGF0YVsnaWQnXSwgIiAiKS5jb25jYXQoc2VsZlsnaWQnXSksICcwJywgMCwgMSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLy8gcGF0aDEubGluZVRvKDAsMCkgCiAgICAgICAgICAgICAgYXJjID0gX3RoaXMuZHJhd0FyYyhzdmcsIHgsIHkgLSByIC8gMiwgcGF0aEFyYywgIndoaXRlIiwgc2VsZlsnY29sb3InXSwgInRpbWVBeGlzRm9yIGYiLmNvbmNhdChlbnREYXRhWydpZCddLCAiICIpLmNvbmNhdChzZWxmWydpZCddKSwgJzAnLCAwLjAsIDAuNCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGFyYyA9IF90aGlzLmRyYXdBcmMoc3ZnLCB4LCB5IC0gciAvIDIsIHBhdGhBcmMsIHNlbGZbJ2NvbG9yJ10sIHNlbGZbJ2NvbG9yJ10sICJ0aW1lQXhpc0ZvciBmIi5jb25jYXQoZW50RGF0YVsnaWQnXSwgIiAiKS5jb25jYXQoc2VsZlsnaWQnXSksICcwJywgMCwgMC4yKTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoZGFJZCA9PSBzZWxmWydpZCddKSB7CiAgICAgICAgICAgIHZhciBfY29sb3IgPSBkMy5zZWxlY3QoIiNlbnRDaXJjbGVfIi5jb25jYXQoc2VsZlsnaWQnXSkpLmF0dHIoImZpbGwiKTsKCiAgICAgICAgICAgIHZhciBkYSA9IHRvb2xzLmRlZXBDbG9uZShkYXRhc2V0KTsKICAgICAgICAgICAgZGEuc3RhcnRBbmdsZSA9IChkYXRhc2V0LmVuZEFuZ2xlICsgZGF0YXNldC5zdGFydEFuZ2xlKSAvIDIgLSAwLjAwMTsKICAgICAgICAgICAgZGEuZW5kQW5nbGUgPSAoZGF0YXNldC5lbmRBbmdsZSArIGRhdGFzZXQuc3RhcnRBbmdsZSkgLyAyICsgMC4wMDAxOwogICAgICAgICAgICB2YXIgYXJjUGEgPSBkMy5hcmMoKS5pbm5lclJhZGl1cyhyICsgaW50ZXIgKyAobmggKyBoKSAvIDIpLm91dGVyUmFkaXVzKHIgKyBpbnRlciArIChuaCArIGgpIC8gMik7CiAgICAgICAgICAgIHZhciBwYXRoQSA9IGFyY1BhKGRhKTsKCiAgICAgICAgICAgIGlmIChjb3B5ICE9IDAgJiYgamcyID09IDApIHsKICAgICAgICAgICAgICBqZzIgPSAxOwogICAgICAgICAgICAgIHBhdGgyLm1vdmVUbyg0MDAsIDEyNSk7CiAgICAgICAgICAgICAgcGF0aDIubGluZVRvKDI5MCwgMTI1KTsKCiAgICAgICAgICAgICAgdmFyIF9hbmcgPSBkYS5zdGFydEFuZ2xlICsgMC4wMDEgKyBNYXRoLlBJIC8gMjsKCiAgICAgICAgICAgICAgX3RoaXMuZHJhd1R4dChzdmcsIDM1MCwgMTIwLCAxMDAsIFsiQ3VycmVudCBDb25jZXB0Il0sICJncmV5IiwgMTUsICJ0ZXh0c18xIik7IC8vIHBhdGgxLmxpbmVUbygoeCsxMCksKHktci8yKzEwKSkKCgogICAgICAgICAgICAgIHBhdGgyLmxpbmVUbyh4IC0gKHIgKyBpbnRlciArIGgpICogTWF0aC5jb3MoX2FuZyksIHkgLSByIC8gMiAtIChyICsgaW50ZXIgKyBoKSAqIE1hdGguc2luKF9hbmcpKTsKCiAgICAgICAgICAgICAgX3RoaXMuZHJhd1RpbWVMaW5lKHN2ZywgcGF0aDIsICJyZ2IoMjAwLDIwMCwyMDApIiwgMiwgJzksNScsICdtbSAnLCAnbW0gJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIF90aGlzLmRyYXdBcmMoc3ZnLCB4LCB5IC0gciAvIDIsIHBhdGhBLCBfY29sb3IsIHNlbGZbJ2NvbG9yJ10sICJ0aW1lQXhpc3NlbGYgZiIuY29uY2F0KHNlbGZbJ2lkJ10pLCAnMCcsIDYsIDEpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChjb3B5ICE9IDApIHsvLyBfdGhpcy5kcmF3VGltZUxpbmUoc3ZnLCBwYXRoMSwgInJnYigyMDAsMjAwLDIwMCkiLCAzLCAnOSw1JywgJ21tICcsICdtbSAnKTsKICAgICAgICAgIH0KCiAgICAgICAgICBhcmMub24oIm1vdXNlb3ZlciIsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICAgIHZhciBjbGFzc04gPSBkMy5zZWxlY3QodGhpcykuYXR0cigiY2xhc3MiKTsKICAgICAgICAgICAgdmFyIHNJZCA9IChjbGFzc04uc3BsaXQoIiAiKVsxXSArICIiKS5zbGljZSgxKTsKICAgICAgICAgICAgdmFyIHRJZCA9IGNsYXNzTi5zcGxpdCgiICIpWzJdOwogICAgICAgICAgICBfdGhpcy5zaG93RW50aXR5UmVsSWRMaXN0ID0gW3NJZF07CiAgICAgICAgICAgIF90aGlzLm92ZXJFbnRpdHlJZCA9IHNJZDsKICAgICAgICAgICAgX3RoaXMub3ZlclRhcmdldEVudGl0eUlkID0gdElkOwogICAgICAgICAgfSk7CiAgICAgICAgICBhcmMub24oIm1vdXNlbGVhdmUiLCBmdW5jdGlvbiAoZCkgewogICAgICAgICAgICB2YXIgY2xhc3NOID0gZDMuc2VsZWN0KHRoaXMpLmF0dHIoImNsYXNzIik7CiAgICAgICAgICAgIHZhciBzSWQgPSAoY2xhc3NOLnNwbGl0KCIgIilbMV0gKyAiIikuc2xpY2UoMSk7CiAgICAgICAgICAgIHZhciBzaG93UmVsID0gX3RoaXMuc2hvd0VudGl0eVJlbElkTGlzdDsKICAgICAgICAgICAgX3RoaXMub3ZlclRhcmdldEVudGl0eUlkID0gJyc7CiAgICAgICAgICAgIF90aGlzLm92ZXJFbnRpdHlJZCA9ICIiOyAvL190aGlzLmN1ckVudElkOwoKICAgICAgICAgICAgaWYgKF90aGlzLnNob3dFbnRpdHlSZWxJZE92ZXJTdGF0ZSA9PSAxKSB7CiAgICAgICAgICAgICAgc2hvd1JlbC5wdXNoKHBhcnNlSW50KHNJZCkpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHNob3dSZWwuc3BsaWNlKHNob3dSZWwuaW5kZXhPZihwYXJzZUludChzSWQpKSwgMSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgZHJhd0VudGl0eTogZnVuY3Rpb24gZHJhd0VudGl0eShzdmcsIHgsIHksIHIsIGRhdGEpIHsKICAgICAgdmFyIGNvcHkgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IDA7CgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGNvbG9yX2xpbmVhciA9IF90aGlzLmltcG9ydGFuY2VDb2xvcl9saW5lYXI7CiAgICAgIHZhciBjb21wdXRlX2NvbG9yID0gX3RoaXMuaW1wb3J0YW5jZUNvbXB1dGVfY29sb3I7CiAgICAgIHZhciByU2NhbGUgPSBfdGhpcy5yZWxldmFuY2VTY2FsZV9saW5lYXI7CiAgICAgIHZhciBvRGF0YSA9IF90aGlzLmRhdGE7CiAgICAgIHZhciBwYXRoMSA9IGQzLnBhdGgoKTsKICAgICAgdmFyIHBhdGgyID0gZDMucGF0aCgpOwogICAgICB2YXIgamcyID0gMDsKICAgICAgdmFyIGFuZzIgPSAwOwogICAgICB2YXIgcGF0aDMgPSBkMy5wYXRoKCk7CiAgICAgIHZhciBqZzMgPSAwOwogICAgICB2YXIgYW5nMyA9IDA7CiAgICAgIHZhciBpbXBvcnRhbmNlVmFsdWUgPSBkYXRhWydhdHRyaWJ1dGUnXVsnaW1wb3J0YW5jZSddOyAvLyBsZXQgcmVsZXZhbmNlVmFsdWFsZShyZWxldmFuY2VWYWx1ZSkKICAgICAgLy8geyAnaWQnOiBkYWUgPSBkYXRhWydhdHRyaWJ1dGUnXVsncmVsZXZhbmNlJ107CiAgICAgIC8vIGxldCByID0gclNjdGFbaV1bJ2lkJ10sICJ4IjogeCwgInIiOiByLCAibGF5b3V0IjogbGF5LCAieSI6IHksICJzb25GbGFnIjogc29uRmxhZyB9CgogICAgICBpZiAoZGF0YVsndHlwZSddID09ICcxJykgewogICAgICAgIHZhciBhcmVhID0gdG9vbHMuY2FsY1RyaWFuZ2xlKHgsIHksIHIpOwoKICAgICAgICBfdGhpcy5kcmF3VHJpYW5nbGUoc3ZnLCAicmdiKDI1MCwgMTk5LCA4OCkiLCBhcmVhLCAicmdiKDI1MCwgMTk5LCA4OCkiLCAxLCAxNSwgImVudFQiLCAiZW50VF8iLmNvbmNhdChkYXRhWydpZCddKSk7CgogICAgICAgIF90aGlzLmRyYXdUeHQoc3ZnLCB4LCB5ICsgOCwgMjAsIFsiVCJdLCAnd2hpdGUnLCAyOCwgIlQiKTsKICAgICAgfSBlbHNlIGlmIChkYXRhWyd0eXBlJ10gPT0gJzInKSB7CiAgICAgICAgdmFyIF9hcmVhMyA9IHRvb2xzLmNhbGNUcmlhbmdsZSh4LCB5LCByKTsKCiAgICAgICAgX3RoaXMuZHJhd1RyaWFuZ2xlKHN2ZywgInJnYigyNTAsIDE5OSwgODgpIiwgX2FyZWEzLCAicmdiKDI1MCwgMTk5LCA4OCkiLCAxLCAxNSwgImVudEUiLCAiZW50RV8iLmNvbmNhdChkYXRhWydpZCddKSk7CgogICAgICAgIF90aGlzLmRyYXdUeHQoc3ZnLCB4LCB5ICsgOCwgMjAsIFsiRSJdLCAnd2hpdGUnLCAyOCwgIkUiKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgdHlwZVN0YXJ0UjsKICAgICAgICB2YXIgdHlwZVN0ZXBSOwogICAgICAgIHZhciBkYXRhc2V0OwogICAgICAgIHZhciBhcmNQYXRoOwogICAgICAgIHZhciBwYXRoQXJjOwogICAgICAgIHZhciBzb25TdGFydFI7CiAgICAgICAgdmFyIGRhdGFzZXQ7CiAgICAgICAgdmFyIGFyY1BhdGg7CiAgICAgICAgdmFyIGFyY01pZFBhdGg7CiAgICAgICAgdmFyIHBhdGhBcmM7CiAgICAgICAgdmFyIG1pZERhdGFzZXQ7CiAgICAgICAgdmFyIHBhdGhNaWRBcmM7CgogICAgICAgIChmdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgY3kgPSB5OwogICAgICAgICAgdmFyIHRvdGFsRHVyYXRpb24gPSBfdGhpcy50b3RhbER1cmF0aW9uOwogICAgICAgICAgdmFyIHRpbWVMaW5lU2NhbGVfbGluZWFyID0gZDMuc2NhbGVMaW5lYXIoWzAsIHRvdGFsRHVyYXRpb25dLCBbeCAtIHIgKiBNYXRoLnNxcnQoMykgLyAyLCB4ICsgciAqIE1hdGguc3FydCgzKSAvIDJdKTsKICAgICAgICAgIHZhciB0aW1lTGluZUhpZ2hTY2FsZV9saW5lYXIgPSBkMy5zY2FsZUxpbmVhcihbMCwgX3RoaXMubWF4VG90YWxEdXJhdGlvbiAtIDUwXSwgW3IgLyAyLCByICogKDEgKyBNYXRoLnNxcnQoMykgLyAzICogMildKTsKICAgICAgICAgIHZhciBjaXJjbGVDb2xvciA9IGNvbXB1dGVfY29sb3IoY29sb3JfbGluZWFyKGltcG9ydGFuY2VWYWx1ZSkpOwoKICAgICAgICAgIF90aGlzLmRyYXdDaXJjbGUoc3ZnLCB4LCBjeSwgciwgY2lyY2xlQ29sb3IsIGRhdGEsIDEsICJlbnRDaXJjbGUiLCAiZW50Q2lyY2xlXyIgKyBkYXRhWydpZCddKTsKCiAgICAgICAgICByID0gciAqIE1hdGguc3FydCgzKSAvIDI7CiAgICAgICAgICB5ICs9IHIgLyAyOwogICAgICAgICAgdmFyIHBhdGggPSBkMy5wYXRoKCk7CiAgICAgICAgICBwYXRoLm1vdmVUbyh4IC0gciwgeSk7CiAgICAgICAgICB2YXIgbGluZUxpID0gW2RhdGFdOwogICAgICAgICAgdmFyIGxpbmVQb2ludCA9IFt7CiAgICAgICAgICAgICdpZCc6IGRhdGFbJ2lkJ10sCiAgICAgICAgICAgICd0aW1lJzogZGF0YVsndGltZSddLAogICAgICAgICAgICAneCc6IDAsCiAgICAgICAgICAgICd5JzogMAogICAgICAgICAgfV07CiAgICAgICAgICB2YXIgamdpZEwgPSBbZGF0YVsnaWQnXV07CiAgICAgICAgICB2YXIgc2ltaWxhcml0eVJlbHNsaSA9IFtkYXRhWyJzaW1pbGFyaXR5UmVsIl1dOwoKICAgICAgICAgIHZhciBfbG9vcDEwID0gZnVuY3Rpb24gX2xvb3AxMCgpIHsKICAgICAgICAgICAgdmFyIHNpbWlsYXJpdHlSZWxzID0gc2ltaWxhcml0eVJlbHNsaVswXTsKICAgICAgICAgICAgc2ltaWxhcml0eVJlbHNsaS5zcGxpY2UoMCwgMSk7CiAgICAgICAgICAgIHZhciBqZyA9IDA7CgogICAgICAgICAgICB2YXIgX2xvb3AxNSA9IGZ1bmN0aW9uIF9sb29wMTUoc3JlbCkgewogICAgICAgICAgICAgIHZhciBjZGF0YSA9IG9EYXRhLmZpbmQoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBkWydpZCddID09IHNpbWlsYXJpdHlSZWxzW3NyZWxdOwogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBpZiAoamdpZEwuaW5kZXhPZihjZGF0YVsnaWQnXSkgPT0gLTEpIHsKICAgICAgICAgICAgICAgIHNpbWlsYXJpdHlSZWxzbGkucHVzaChjZGF0YVsic2ltaWxhcml0eVJlbCJdKTsKICAgICAgICAgICAgICAgIGpnID0gMTsKICAgICAgICAgICAgICAgIGxpbmVMaS5wdXNoKGNkYXRhKTsKICAgICAgICAgICAgICAgIGpnaWRMLnB1c2goY2RhdGFbJ2lkJ10pOwogICAgICAgICAgICAgICAgbGluZVBvaW50LnB1c2goewogICAgICAgICAgICAgICAgICAnaWQnOiBjZGF0YVsnaWQnXSwKICAgICAgICAgICAgICAgICAgJ3RpbWUnOiBjZGF0YVsndGltZSddLAogICAgICAgICAgICAgICAgICAneCc6IDAsCiAgICAgICAgICAgICAgICAgICd5JzogMAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwoKICAgICAgICAgICAgZm9yICh2YXIgc3JlbCBpbiBzaW1pbGFyaXR5UmVscykgewogICAgICAgICAgICAgIF9sb29wMTUoc3JlbCk7CiAgICAgICAgICAgIH0gLy8gaWYoamc9PTApewogICAgICAgICAgICAvLyBicmVhazsKICAgICAgICAgICAgLy8gfQoKICAgICAgICAgIH07CgogICAgICAgICAgd2hpbGUgKHNpbWlsYXJpdHlSZWxzbGkubGVuZ3RoID4gMCkgewogICAgICAgICAgICBfbG9vcDEwKCk7CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIHNvcnRtdCA9IGZ1bmN0aW9uIHNvcnRtdChhLCBiKSB7CiAgICAgICAgICAgIHJldHVybiB0b29scy50aW1lMnNlY29uZHMoYVswXSkgLSB0b29scy50aW1lMnNlY29uZHMoYlswXSk7CiAgICAgICAgICB9OwoKICAgICAgICAgIHZhciBzb3J0bHAgPSBmdW5jdGlvbiBzb3J0bHAoYSwgYikgewogICAgICAgICAgICByZXR1cm4gdG9vbHMudGltZTJzZWNvbmRzKGFbJ3RpbWUnXVswXSkgLSB0b29scy50aW1lMnNlY29uZHMoYlsndGltZSddWzBdKTsKICAgICAgICAgIH07CgogICAgICAgICAgbGluZUxpID0gbGluZUxpLnNvcnQoc29ydGxwKTsKICAgICAgICAgIGxpbmVQb2ludCA9IGxpbmVQb2ludC5zb3J0KHNvcnRscCk7CiAgICAgICAgICB2YXIgbGluZURhdGEgPSBbW3ggLSByICogTWF0aC5zcXJ0KDMpIC8gMiAtIDQsIHldXTsKCiAgICAgICAgICBmb3IgKHZhciB0ID0gMDsgdCA8IGxpbmVMaS5sZW5ndGg7IHQrKykgewogICAgICAgICAgICB2YXIgc3RhcnRUID0gbGluZUxpW3RdWyd0aW1lJ11bMF07CiAgICAgICAgICAgIHZhciBfZHVyYXRpb24gPSBsaW5lTGlbdF1bJ3RvdGFsRHVyYXRpb24nXTsgLy8gbGV0IGVuZFQgPSBsaW5lTGlbdF1bJ3RpbWUnXVsxXTsKCiAgICAgICAgICAgIHZhciBzdGFydFMgPSB0b29scy50aW1lMnNlY29uZHMoc3RhcnRUKTsKICAgICAgICAgICAgdmFyIGVuZFMgPSBzdGFydFMgKyBfZHVyYXRpb247IC8vIGxldCBzdGFydHggPSB0aW1lTGluZVNjYWxlX2xpbmVhcigoc3RhcnRTIC0gZHVyYXRpb24gKiAxMCkpOwogICAgICAgICAgICAvLyBsZXQgZW5keCA9IHRpbWVMaW5lU2NhbGVfbGluZWFyKChlbmRTICsgZHVyYXRpb24gKiAxMCkpOwoKICAgICAgICAgICAgdmFyIGxpbXN0ID0geCAtIHIgKiBNYXRoLnNxcnQoMykgLyAyOwogICAgICAgICAgICB2YXIgbGltZWQgPSB4ICsgciAqIE1hdGguc3FydCgzKSAvIDI7CiAgICAgICAgICAgIHZhciBzdGFydHggPSBsaW1zdCA8IHRpbWVMaW5lU2NhbGVfbGluZWFyKHN0YXJ0UykgPyB0aW1lTGluZVNjYWxlX2xpbmVhcihzdGFydFMpIDogbGltc3Q7CiAgICAgICAgICAgIHZhciBlbmR4ID0gbGltZWQgPiB0aW1lTGluZVNjYWxlX2xpbmVhcihlbmRTKSA/IHRpbWVMaW5lU2NhbGVfbGluZWFyKGVuZFMpIDogbGltZWQ7IC8vIGxldCBtaWR4ID0gdGltZUxpbmVTY2FsZV9saW5lYXIoKGVuZFMgKyBzdGFydFMpIC8gMik7CgogICAgICAgICAgICB2YXIgbWlkeCA9IChzdGFydHggKyBlbmR4KSAvIDI7CiAgICAgICAgICAgIHZhciB5cyA9IHk7CiAgICAgICAgICAgIHZhciB5eiA9IHkgLSB0aW1lTGluZUhpZ2hTY2FsZV9saW5lYXIoX2R1cmF0aW9uKTsKICAgICAgICAgICAgbGluZVBvaW50W3RdWyd4J10gPSBtaWR4OwogICAgICAgICAgICBsaW5lUG9pbnRbdF1bJ3knXSA9IHkgLSB0aW1lTGluZUhpZ2hTY2FsZV9saW5lYXIoX2R1cmF0aW9uKSAvIDEuNzsgLy8gaWYgKHN0YXJ0eCA8IChsaW5lRGF0YVtsaW5lRGF0YS5sZW5ndGggLSAxXVswXSkpIHsKCiAgICAgICAgICAgIGlmICh0ID4gMCkgewogICAgICAgICAgICAgIGxpbmVEYXRhLnNwbGljZShsaW5lRGF0YS5sZW5ndGggLSAxLCAxKTsKICAgICAgICAgICAgICBtaWR4ICs9IHQgKiA1OwogICAgICAgICAgICAgIHN0YXJ0eCA9IG1pZHggLSAobWlkeCAtIChsaW5lRGF0YVtsaW5lRGF0YS5sZW5ndGggLSAxXVswXSArIG1pZHgpIC8gMikgLyAyOwogICAgICAgICAgICAgIGVuZHggKz0gdCAqIDU7CiAgICAgICAgICAgICAgeXMgPSB5ICsgKHkgLSBsaW5lRGF0YVtsaW5lRGF0YS5sZW5ndGggLSAxXVsxXSkgLyAzOwogICAgICAgICAgICB9IC8vIH0KCgogICAgICAgICAgICBsaW5lRGF0YS5wdXNoKFtzdGFydHgsIHlzXSwgW21pZHgsIHl6XSwgW2VuZHgsIHldKTsgLy8gbGV0IHN0YXJ0eCA9IHRpbWVMaW5lU2NhbGVfbGluZWFyKChzdGFydFMgLSBkdXJhdGlvbiAqIDEwKSk7CiAgICAgICAgICAgIC8vIGxldCBlbmR4ID0gdGltZUxpbmVTY2FsZV9saW5lYXIoKGVuZFMgKyBkdXJhdGlvbiAqIDEwKSk7CiAgICAgICAgICAgIC8vIGxldCBzdGFydHlmID0geSArIHRpbWVMaW5lSGlnaFNjYWxlX2xpbmVhcigoZHVyYXRpb24pKSAvIDg7CiAgICAgICAgICAgIC8vIGxldCBzdGFydHlmMSA9IHkgKyB0aW1lTGluZUhpZ2hTY2FsZV9saW5lYXIoKGR1cmF0aW9uKSkgLyA4OwogICAgICAgICAgICAvLyBsZXQgZW5keWYgPSB5ICsgdGltZUxpbmVIaWdoU2NhbGVfbGluZWFyKChkdXJhdGlvbikpIC8gODsKICAgICAgICAgICAgLy8gbGV0IGVuZHlmMSA9IHkgKyB0aW1lTGluZUhpZ2hTY2FsZV9saW5lYXIoKGR1cmF0aW9uKSkgLyA4OwogICAgICAgICAgICAvLyBsZXQgeXogPSB5IC0gdGltZUxpbmVIaWdoU2NhbGVfbGluZWFyKChkdXJhdGlvbikpOwogICAgICAgICAgICAvLyBsZXQgbWlkeCA9IHRpbWVMaW5lU2NhbGVfbGluZWFyKChlbmRTICsgc3RhcnRTKSAvIDIpOwogICAgICAgICAgICAvLyBsaW5lUG9pbnRbdF1bJ3gnXSA9IG1pZHg7CiAgICAgICAgICAgIC8vIGxpbmVQb2ludFt0XVsneSddID0geSAtIHRpbWVMaW5lSGlnaFNjYWxlX2xpbmVhcihkdXJhdGlvbikgLyAxLjc7CiAgICAgICAgICAgIC8vIGxldCB5MSA9IHk7CiAgICAgICAgICAgIC8vIGlmIChzdGFydHggPCAobGluZURhdGFbbGluZURhdGEubGVuZ3RoIC0gMV1bMF0pKSB7CiAgICAgICAgICAgIC8vICAgaWYgKHQgPiAwKSB7CiAgICAgICAgICAgIC8vICAgICBsaW5lRGF0YS5zcGxpY2UobGluZURhdGEubGVuZ3RoIC0gMywgMyk7CiAgICAgICAgICAgIC8vICAgICBzdGFydHggPSAobGluZURhdGFbbGluZURhdGEubGVuZ3RoIC0gMV1bMF0gKyBtaWR4KSAvIDI7CiAgICAgICAgICAgIC8vICAgICB5MSA9IGxpbmVEYXRhW2xpbmVEYXRhLmxlbmd0aCAtIDFdWzFdICsgdGltZUxpbmVIaWdoU2NhbGVfbGluZWFyKChkdXJhdGlvbikpIC8gMjsKICAgICAgICAgICAgLy8gICAgIHN0YXJ0eWYgPSBsaW5lRGF0YVtsaW5lRGF0YS5sZW5ndGggLSAxXVsxXSArIHRpbWVMaW5lSGlnaFNjYWxlX2xpbmVhcigoZHVyYXRpb24pKSAvIDI7CiAgICAgICAgICAgIC8vICAgICBzdGFydHlmMSA9IGxpbmVEYXRhW2xpbmVEYXRhLmxlbmd0aCAtIDFdWzFdICsgdGltZUxpbmVIaWdoU2NhbGVfbGluZWFyKChkdXJhdGlvbikpIC8gMjsKICAgICAgICAgICAgLy8gICB9CiAgICAgICAgICAgIC8vIH0KICAgICAgICAgICAgLy8gbGV0IHN0YXJ0eDEgPSBzdGFydHggKyAodGltZUxpbmVTY2FsZV9saW5lYXIoKHN0YXJ0UyArIGR1cmF0aW9uKSkgLSB0aW1lTGluZVNjYWxlX2xpbmVhcigoc3RhcnRTKSkpOwogICAgICAgICAgICAvLyBsZXQgZW5keDEgPSBlbmR4IC0gKHRpbWVMaW5lU2NhbGVfbGluZWFyKChzdGFydFMgKyBkdXJhdGlvbikpIC0gdGltZUxpbmVTY2FsZV9saW5lYXIoKHN0YXJ0UykpKTsKICAgICAgICAgICAgLy8gbGV0IHN0YXJ0eDIgPSBzdGFydHgxICsgKHRpbWVMaW5lU2NhbGVfbGluZWFyKChzdGFydFMgKyBkdXJhdGlvbikpIC0gdGltZUxpbmVTY2FsZV9saW5lYXIoKHN0YXJ0UykpKTsKICAgICAgICAgICAgLy8gbGV0IGVuZHgyID0gZW5keDEgLSAodGltZUxpbmVTY2FsZV9saW5lYXIoKHN0YXJ0UyArIGR1cmF0aW9uKSkgLSB0aW1lTGluZVNjYWxlX2xpbmVhcigoc3RhcnRTKSkpOwogICAgICAgICAgICAvLyBpZiAoZW5keCA+IChyICsgeCkpIGVuZHggPSByICsgeDsKICAgICAgICAgICAgLy8gaWYgKHN0YXJ0eDEgPCAobGluZURhdGFbbGluZURhdGEubGVuZ3RoIC0gMV1bMF0pKSBzdGFydHgxID0gbGluZURhdGFbbGluZURhdGEubGVuZ3RoIC0gMV1bMF07CiAgICAgICAgICAgIC8vIGlmIChlbmR4MSA+IChyICsgeCkpIGVuZHgxID0gciArIHg7CiAgICAgICAgICAgIC8vIGlmIChzdGFydHgyIDwgKGxpbmVEYXRhW2xpbmVEYXRhLmxlbmd0aCAtIDFdWzBdKSkgc3RhcnR4MiA9IGxpbmVEYXRhW2xpbmVEYXRhLmxlbmd0aCAtIDFdWzBdOwogICAgICAgICAgICAvLyBpZiAoZW5keDIgPiAociArIHgpKSBlbmR4MiA9IHIgKyB4OwogICAgICAgICAgICAvLyBsaW5lRGF0YS5wdXNoKFtzdGFydHgsIHkxXSwgW3N0YXJ0eDEsIHN0YXJ0eWYxXSwgW3N0YXJ0eDIsIHN0YXJ0eWZdLCBbbWlkeCwgeXpdLCBbZW5keDIsIGVuZHlmXSwgW2VuZHgxLCBlbmR5ZjFdLCBbZW5keCwgeV0pCiAgICAgICAgICB9CgogICAgICAgICAgbGluZURhdGEucHVzaChbeCArIHIsIHldKTsKICAgICAgICAgIHZhciBjdXJ2ZV9nZW5lcmF0b3IgPSBkMy5saW5lKCkueChmdW5jdGlvbiAoZCkgewogICAgICAgICAgICByZXR1cm4gZFswXTsKICAgICAgICAgIH0pLnkoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgICAgdmFyIGggPSBNYXRoLnNxcnQoTWF0aC5wb3cociwgMikgLSBNYXRoLnBvdyhkWzBdIC0gKHggLSByKSwgMikpOwogICAgICAgICAgICBpZiAoeSAtIGRbMV0gPiBoICsgciAqIE1hdGguc3FydCgzKSAvIDIpIHJldHVybiB5IC0gKGggKyByICogTWF0aC5zcXJ0KDMpIC8gMikgKyAyOwogICAgICAgICAgICByZXR1cm4gZFsxXTsKICAgICAgICAgIH0pLmN1cnZlKGQzLmN1cnZlQnVuZGxlKTsgLy8gLmN1cnZlKGQzLmN1cnZlQ2F0bXVsbFJvbSAgKQogICAgICAgICAgLy8gLmN1cnZlKGQzLmN1cnZlQmFzaXMpCgogICAgICAgICAgX3RoaXMuZHJhd1RpbWVMaW5lKHN2ZywgY3VydmVfZ2VuZXJhdG9yKGxpbmVEYXRhKSwgIndoaXRlIiwgMiwgJzAnLCAnc29uTGluZSAnLCAnc29uTGluZSAnKTsKCiAgICAgICAgICBmb3IgKHZhciBwID0gMDsgcCA8IGxpbmVQb2ludC5sZW5ndGg7IHArKykgewogICAgICAgICAgICBfdGhpcy5kcmF3Q2lyY2xlKHN2ZywgbGluZVBvaW50W3BdWyd4J10sIGxpbmVQb2ludFtwXVsneSddLCA1LCAicmVkIiwgbGluZVBvaW50W3BdLCAwLCAibGluZVBvaW50IiwgImxpbmVQb2ludF8iICsgbGluZVBvaW50W3BdWydpZCddKTsKICAgICAgICAgIH0gLy8gIjEiOiAicmdiKDE0NSwgMjA0LCAxMTcpIiwKICAgICAgICAgIC8vICAgIjIiOiAicmdiKDg0LCAxMTIsIDE5OCkiLAogICAgICAgICAgLy8gICAiMyI6ICJyZ2IoMjM4LCAxMDIsIDEwMikiLAoKCiAgICAgICAgICB2YXIgdHlwZUNvbG9yID0gewogICAgICAgICAgICAiMSI6ICIjZmY5YzljIiwKICAgICAgICAgICAgIjIiOiAiI2Y0ZjRkMCIsCiAgICAgICAgICAgICIzIjogIiM2ZjhiZTAiCiAgICAgICAgICB9OwogICAgICAgICAgdmFyIGR1cmF0aW9uID0gdG9vbHMudGltZTJzZWNvbmRzKGRhdGFbJ3RpbWUnXVswXSkgLSB0b29scy50aW1lMnNlY29uZHMoZGF0YVsndGltZSddWzFdKTsKICAgICAgICAgIHZhciB0eXBlRGF0YSA9IGRhdGFbJ2F0dHJpYnV0ZSddWydleHByZXNzaW9ucyddOwogICAgICAgICAgdmFyIHNvbkxpc3QgPSBkYXRhWydzb24nXTsKICAgICAgICAgIHZhciBzb25zID0gW3Nvbkxpc3RdOwoKICAgICAgICAgIHZhciBfbG9vcDExID0gZnVuY3Rpb24gX2xvb3AxMSgpIHsKICAgICAgICAgICAgdmFyIGN1clNvbkxpc3QgPSBzb25zWzBdOwogICAgICAgICAgICBzb25zLnNwbGljZSgwLCAxKTsKCiAgICAgICAgICAgIGlmIChjdXJTb25MaXN0Lmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICB2YXIgX2xvb3AxNiA9IGZ1bmN0aW9uIF9sb29wMTYoX3MyKSB7CiAgICAgICAgICAgICAgICB2YXIgc29uRGF0YSA9IG9EYXRhLmZpbmQoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGRbJ2lkJ10gPT0gY3VyU29uTGlzdFtfczJdOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB2YXIgc29uVHlwZURhdGEgPSBzb25EYXRhWydhdHRyaWJ1dGUnXVsnZXhwcmVzc2lvbnMnXTsKCiAgICAgICAgICAgICAgICBmb3IgKHZhciBfdDUgaW4gc29uVHlwZURhdGEpIHsKICAgICAgICAgICAgICAgICAgdmFyIF90eXBlRHVyaXRpb24yID0gc29uVHlwZURhdGFbX3Q1XTsKCiAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9kMiBpbiBfdHlwZUR1cml0aW9uMikgewogICAgICAgICAgICAgICAgICAgIHR5cGVEYXRhW190NV0ucHVzaChfdHlwZUR1cml0aW9uMltfZDJdKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHNvbnMucHVzaChzb25EYXRhWydzb24nXSk7CiAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgZm9yICh2YXIgX3MyIGluIGN1clNvbkxpc3QpIHsKICAgICAgICAgICAgICAgIF9sb29wMTYoX3MyKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH07CgogICAgICAgICAgd2hpbGUgKHNvbnMubGVuZ3RoID4gMCkgewogICAgICAgICAgICBfbG9vcDExKCk7CiAgICAgICAgICB9CgogICAgICAgICAgdHlwZVN0YXJ0UiA9IDA7IC8vTWF0aC5QSS80OwoKICAgICAgICAgIHR5cGVTdGVwUiA9IE1hdGguUEkgLyAxOwoKICAgICAgICAgIGlmIChzb25MaXN0Lmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgdmFyIHR5cGVUb3RhbER1ciA9IDA7CgogICAgICAgICAgICBmb3IgKHZhciBfdDQgaW4gdHlwZURhdGEpIHsKICAgICAgICAgICAgICB2YXIgdHlwZUR1cml0aW9uID0gdHlwZURhdGFbX3Q0XTsKCiAgICAgICAgICAgICAgZm9yICh2YXIgZCBpbiB0eXBlRHVyaXRpb24pIHsKICAgICAgICAgICAgICAgIHR5cGVUb3RhbER1ciArPSB0b29scy50aW1lMnNlY29uZHModHlwZUR1cml0aW9uW2RdWzFdKSAtIHRvb2xzLnRpbWUyc2Vjb25kcyh0eXBlRHVyaXRpb25bZF1bMF0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIHR5cGVBcmNTY2FsZV9saW5lYXIgPSBkMy5zY2FsZUxpbmVhcihbMCwgdHlwZVRvdGFsRHVyXSwgWzAsIE1hdGguUEkgKiAyXSk7CgogICAgICAgICAgICBmb3IgKHZhciBpIGluIHR5cGVEYXRhKSB7CiAgICAgICAgICAgICAgdmFyIGNvbG9yID0gdHlwZUNvbG9yW2ldOwogICAgICAgICAgICAgIHZhciBfdHlwZUR1cml0aW9uID0gdHlwZURhdGFbaV07CiAgICAgICAgICAgICAgdmFyIHRvdGFsVHlwZVNlY29uZHMgPSAwOwoKICAgICAgICAgICAgICBmb3IgKHZhciBfZCBpbiBfdHlwZUR1cml0aW9uKSB7CiAgICAgICAgICAgICAgICB0b3RhbFR5cGVTZWNvbmRzICs9IHRvb2xzLnRpbWUyc2Vjb25kcyhfdHlwZUR1cml0aW9uW19kXVsxXSkgLSB0b29scy50aW1lMnNlY29uZHMoX3R5cGVEdXJpdGlvbltfZF1bMF0pOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgaWYgKHRvdGFsVHlwZVNlY29uZHMgPiAwKSB7CiAgICAgICAgICAgICAgICB2YXIgX3R5cGVTdGVwUiA9IHR5cGVBcmNTY2FsZV9saW5lYXIodG90YWxUeXBlU2Vjb25kcyk7IC8vTWF0aC5QSS8yOwoKCiAgICAgICAgICAgICAgICB2YXIgZW5kQW5nbGV0ID0gdHlwZVN0YXJ0UiArIDEgKiBfdHlwZVN0ZXBSOwogICAgICAgICAgICAgICAgZGF0YXNldCA9IHsKICAgICAgICAgICAgICAgICAgc3RhcnRBbmdsZTogdHlwZVN0YXJ0UiwKICAgICAgICAgICAgICAgICAgZW5kQW5nbGU6IGVuZEFuZ2xldAogICAgICAgICAgICAgICAgfTsgLy/liJvlu7rkuIDkuKrlvKfnlJ/miJDlmagKCiAgICAgICAgICAgICAgICB0eXBlU3RhcnRSID0gZW5kQW5nbGV0OwogICAgICAgICAgICAgICAgYXJjUGF0aCA9IGQzLmFyYygpLmlubmVyUmFkaXVzKHIgKyAxMCkub3V0ZXJSYWRpdXMociArIDI1KTsKICAgICAgICAgICAgICAgIHBhdGhBcmMgPSBhcmNQYXRoKGRhdGFzZXQpOwoKICAgICAgICAgICAgICAgIF90aGlzLmRyYXdBcmMoc3ZnLCB4LCB5IC0gciAvIDIsIHBhdGhBcmMsIGNvbG9yLCBjb2xvciwgJ3R5cGUgZicgKyBkYXRhWydpZCddICsgIiB0IiArIGkpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgaWYgKGNvcHkgIT0gMCAmJiBqZzIgPT0gMCkgewogICAgICAgICAgICAgICAgamcyID0gMTsKICAgICAgICAgICAgICAgIGFuZzIgPSBkYXRhc2V0LnN0YXJ0QW5nbGUgKyBNYXRoLlBJIC8gMjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBzb25Ub3RhbCA9IDA7CiAgICAgICAgICAgIHZhciBzb25OdW0gPSAwOwoKICAgICAgICAgICAgdmFyIF9sb29wMTIgPSBmdW5jdGlvbiBfbG9vcDEyKHMpIHsKICAgICAgICAgICAgICB2YXIgc29uRGF0YSA9IG9EYXRhLmZpbmQoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBkWydpZCddID09IHNvbkxpc3Rbc107CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgdmFyIHNvbkR1ciA9IHNvbkRhdGFbJ3RvdGFsRHVyYXRpb24nXTsKICAgICAgICAgICAgICBzb25Ub3RhbCArPSBzb25EdXI7CiAgICAgICAgICAgICAgc29uTnVtICs9IDE7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBmb3IgKHZhciBzIGluIHNvbkxpc3QpIHsKICAgICAgICAgICAgICBfbG9vcDEyKHMpOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgc2tpcEFyYyA9IE1hdGguUEkgLyAoc29uTnVtICsgMik7CiAgICAgICAgICAgIHZhciB0aW1lU29uTGluZWFyID0gZDMuc2NhbGVMaW5lYXIoWzAsIHNvblRvdGFsXSwgWzAsIE1hdGguUEkgLSBza2lwQXJjICogKHNvbk51bSAtIDEpXSk7CiAgICAgICAgICAgIHZhciB0aW1lU29uSGVpZ2hMaW5lYXIgPSBkMy5zY2FsZUxpbmVhcihbMCwgc29uVG90YWxdLCBbNDAsIDQwXSk7CiAgICAgICAgICAgIHZhciB0aW1lU29uQ29sb3JfbGluZWFyID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWzAsIHNvblRvdGFsXSkucmFuZ2UoWzAsIDFdKTsKICAgICAgICAgICAgdmFyIHRpbWVTb25Db21wdXRlX2NvbG9yID0gZDMuaW50ZXJwb2xhdGUoIndoaXRlIiwgY2lyY2xlQ29sb3IpOwogICAgICAgICAgICBzb25TdGFydFIgPSBNYXRoLlBJIC8gMjsKICAgICAgICAgICAgdmFyIHJlbExpc3QgPSBbXTsKICAgICAgICAgICAgdmFyIHJlbFJvb3RMaXN0ID0gW107CiAgICAgICAgICAgIHZhciBwc051bSA9IDAuMTsKICAgICAgICAgICAgdmFyIGRhSWQgPSBkYXRhWydpZCddOwogICAgICAgICAgICB2YXIgcmVsRGF0YSA9IF90aGlzLnJlbERhdGE7CiAgICAgICAgICAgIHZhciBvZERhdGEgPSBfdGhpcy5kYXRhOwogICAgICAgICAgICB2YXIgYmFzaWNSZWwgPSByZWxEYXRhWydiYXNpY1JlbCddOwoKICAgICAgICAgICAgdmFyIF9sb29wMTMgPSBmdW5jdGlvbiBfbG9vcDEzKHJlKSB7CiAgICAgICAgICAgICAgdmFyIHNvcmNlSWQgPSBiYXNpY1JlbFtyZV1bMF07CiAgICAgICAgICAgICAgdmFyIHRhcmdldElkID0gYmFzaWNSZWxbcmVdWzFdOwogICAgICAgICAgICAgIHZhciBjTm9kZSA9ICcnOwoKICAgICAgICAgICAgICBpZiAoc29yY2VJZCA9PSBkYUlkKSB7CiAgICAgICAgICAgICAgICBjTm9kZSA9IG9kRGF0YS5maW5kKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludChkWydpZCddKSA9PSBwYXJzZUludCh0YXJnZXRJZCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJlbExpc3QucHVzaCh0YXJnZXRJZCk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZiAodGFyZ2V0SWQgPT0gZGFJZCkgewogICAgICAgICAgICAgICAgY05vZGUgPSBvZERhdGEuZmluZChmdW5jdGlvbiAoZCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoZFsnaWQnXSkgPT0gcGFyc2VJbnQoc29yY2VJZCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJlbExpc3QucHVzaChzb3JjZUlkKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBmb3IgKHZhciByZSA9IDA7IHJlIDwgYmFzaWNSZWwubGVuZ3RoOyByZSsrKSB7CiAgICAgICAgICAgICAgX2xvb3AxMyhyZSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIDsKCiAgICAgICAgICAgIGlmIChyZWxMaXN0Lmxlbmd0aCA9PSAwKSB7CiAgICAgICAgICAgICAgc29uU3RhcnRSID0gMDsKICAgICAgICAgICAgICB0aW1lU29uTGluZWFyID0gZDMuc2NhbGVMaW5lYXIoWzAsIHNvblRvdGFsXSwgWzAsIE1hdGguUEkgKiAyIC0gc2tpcEFyYyAqIHNvbk51bV0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgX2xvb3AxNCA9IGZ1bmN0aW9uIF9sb29wMTQoX3MpIHsKICAgICAgICAgICAgICB2YXIgc29uRGF0YSA9IG9EYXRhLmZpbmQoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBkWydpZCddID09IHNvbkxpc3RbX3NdOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIHZhciBzb25EdXIgPSBzb25EYXRhWyd0b3RhbER1cmF0aW9uJ107CiAgICAgICAgICAgICAgdmFyIHNvblN0ZXBSID0gdGltZVNvbkxpbmVhcihzb25EdXIpOyAvL01hdGguUEkvMjsKCiAgICAgICAgICAgICAgdmFyIGVuZEFuZ2xldCA9IHNvblN0YXJ0UiArIHNvblN0ZXBSOwogICAgICAgICAgICAgIGRhdGFzZXQgPSB7CiAgICAgICAgICAgICAgICBzdGFydEFuZ2xlOiBzb25TdGFydFIsCiAgICAgICAgICAgICAgICBlbmRBbmdsZTogZW5kQW5nbGV0CiAgICAgICAgICAgICAgfTsgLy/liJvlu7rkuIDkuKrlvKfnlJ/miJDlmagKCiAgICAgICAgICAgICAgc29uU3RhcnRSID0gZW5kQW5nbGV0OwogICAgICAgICAgICAgIHZhciBjb2xvciA9ICdibHVlJzsKICAgICAgICAgICAgICBhcmNQYXRoID0gZDMuYXJjKCkuaW5uZXJSYWRpdXMociArIDI4KS5vdXRlclJhZGl1cyhyICsgdGltZVNvbkhlaWdoTGluZWFyKHNvbkR1cikpOwogICAgICAgICAgICAgIGFyY01pZFBhdGggPSBkMy5hcmMoKS5pbm5lclJhZGl1cygwKS5vdXRlclJhZGl1cyhyICsgMzIpOwogICAgICAgICAgICAgIHBhdGhBcmMgPSBhcmNQYXRoKGRhdGFzZXQpOwogICAgICAgICAgICAgIGVuZEFuZ2xldCA9IHNvblN0YXJ0UiArIHNraXBBcmM7CiAgICAgICAgICAgICAgbWlkRGF0YXNldCA9IHsKICAgICAgICAgICAgICAgIHN0YXJ0QW5nbGU6IHNvblN0YXJ0UiwKICAgICAgICAgICAgICAgIGVuZEFuZ2xlOiBlbmRBbmdsZXQKICAgICAgICAgICAgICB9OyAvL+WIm+W7uuS4gOS4quW8p+eUn+aIkOWZqAoKICAgICAgICAgICAgICB2YXIgamlhbnRvdVBhdGggPSBkMy5wYXRoKCk7CiAgICAgICAgICAgICAgamlhbnRvdVBhdGguYXJjKHgsIHkgLSByIC8gMiwgciArIDMyLCBzb25TdGFydFIgLSBNYXRoLlBJIC8gMiwgZW5kQW5nbGV0IC0gTWF0aC5QSSAvIDIpOwogICAgICAgICAgICAgIHNvblN0YXJ0UiArPSBza2lwQXJjOwogICAgICAgICAgICAgIHBhdGhNaWRBcmMgPSBhcmNNaWRQYXRoKG1pZERhdGFzZXQpOwogICAgICAgICAgICAgIHZhciB0aW1lU29uQ29sb3IgPSBjb21wdXRlX2NvbG9yKGNvbG9yX2xpbmVhcihzb25EYXRhWydhdHRyaWJ1dGUnXVsnaW1wb3J0YW5jZSddKSk7CgogICAgICAgICAgICAgIF90aGlzLmRyYXdBcmMoc3ZnLCB4LCB5IC0gciAvIDIsIHBhdGhBcmMsIHRpbWVTb25Db2xvciwgdGltZVNvbkNvbG9yLCAnc29uIGYnICsgZGF0YVsnaWQnXSArICIgcyIgKyBzb25MaXN0W19zXSwgJzAnKTsKCiAgICAgICAgICAgICAgaWYgKF9zICE9IHNvbkxpc3QubGVuZ3RoIC0gMSkgewogICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cKICAgICAgICAgICAgICAgIF90aGlzLmRyYXdUaW1lTGluZShzdmcsIGppYW50b3VQYXRoLCAicmdiKDIwMCwyMDAsMjAwKSIsIDMsICc5LDUnLCAnbWlkQXJjICcsICdtaWRBcmMgJyk7IC8vIF90aGlzLmRyYXdUaW1lTGluZShfdGhpcy5hcmNHLCBwYXRoLCAid2hpdGUiLCAyLCcwJywgJ3NvbkxpbmUgJywgJ3NvbkxpbmUgJyk7CiAgICAgICAgICAgICAgICAvLyBfdGhpcy5kcmF3QXJjKF90aGlzLmFyY0csIHgsIHkgLSByIC8gMiwgcGF0aE1pZEFyYywgInJnYigyMDAsMjAwLDIwMCkiLCAid2hpdGUiLCAnc29uIGYnICsgZGF0YVsnaWQnXSwgIjksNSIsIDMpOwoKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGlmIChjb3B5ICE9IDApIHsKICAgICAgICAgICAgICAgIGpnMyA9IDE7CiAgICAgICAgICAgICAgICBhbmczID0gKGRhdGFzZXQuZW5kQW5nbGUgKyBkYXRhc2V0LnN0YXJ0QW5nbGUpIC8gMiArIE1hdGguUEkgLyAyOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIGZvciAodmFyIF9zIGluIHNvbkxpc3QpIHsKICAgICAgICAgICAgICBfbG9vcDE0KF9zKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIDsKCiAgICAgICAgICBpZiAoY29weSAhPSAwKSB7CiAgICAgICAgICAgIC8vIGpnMj0xCiAgICAgICAgICAgIHBhdGgxLm1vdmVUbygxMCwgMTU1KTsKICAgICAgICAgICAgcGF0aDEubGluZVRvKDEyMCwgMTU1KTsgLy8gbGV0IGFuZyA9IGRhLnN0YXJ0QW5nbGUrMC4wMDErTWF0aC5QSS8yCgogICAgICAgICAgICBfdGhpcy5kcmF3VHh0KHN2ZywgNjAsIDEyMCwgODAsIFsiQ29uY2VwdCIsICJUaW1lIiwgIkRpc3RyaWJ1dGlvbiJdLCAiZ3JleSIsIDE1LCAidGV4dHNfMSIpOwoKICAgICAgICAgICAgcGF0aDEubGluZVRvKGxpbmVEYXRhWzBdWzBdLCBsaW5lRGF0YVswXVsxXSk7IC8vIHBhdGgyLmxpbmVUbygoeC0ociArIGludGVyICsgaCkqTWF0aC5jb3MoYW5nKSksKHktci8yLShyICsgaW50ZXIgKyBoKSpNYXRoLnNpbihhbmcpKSkKCiAgICAgICAgICAgIF90aGlzLmRyYXdUaW1lTGluZShzdmcsIHBhdGgxLCAicmdiKDIwMCwyMDAsMjAwKSIsIDIsICc5LDUnLCAnbW0gJywgJ21tICcpOwoKICAgICAgICAgICAgaWYgKGpnMiA9PSAxKSB7CiAgICAgICAgICAgICAgcGF0aDIubW92ZVRvKDU1MCwgMzUpOwogICAgICAgICAgICAgIHBhdGgyLmxpbmVUbygzMjAsIDM1KTsKCiAgICAgICAgICAgICAgX3RoaXMuZHJhd1R4dChzdmcsIDM2MCwgMjAsIDgwLCBbIkNvdXJzZSBTdHlsZSJdLCAiZ3JleSIsIDE1LCAidGV4dHNfMSIpOwoKICAgICAgICAgICAgICBwYXRoMi5saW5lVG8oeCAtIChyICsgMjUpICogTWF0aC5jb3MoYW5nMiksIHkgLSByIC8gMiAtIChyICsgMjUpICogTWF0aC5zaW4oYW5nMikpOwoKICAgICAgICAgICAgICBfdGhpcy5kcmF3VGltZUxpbmUoc3ZnLCBwYXRoMiwgInJnYigyMDAsMjAwLDIwMCkiLCAyLCAnOSw1JywgJ21tICcsICdtbSAnKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGlmIChqZzMgPT0gMSkgewogICAgICAgICAgICBwYXRoMy5tb3ZlVG8oNTUwLCAyMzUpOwogICAgICAgICAgICBwYXRoMy5saW5lVG8oMzIwLCAyMzUpOwoKICAgICAgICAgICAgdmFyIF9hbmcyID0gTWF0aC5QSSAqICgxIC8gMiArIDEgLSAwLjA1KTsKCiAgICAgICAgICAgIF90aGlzLmRyYXdUeHQoc3ZnLCAzNjAsIDIwMCwgODAsIFsiU3ViY29uY2VwdCIsICJEaXN0cmlidXRpb24iXSwgImdyZXkiLCAxNSwgInRleHRzXzEiKTsKCiAgICAgICAgICAgIHBhdGgzLmxpbmVUbyh4IC0gKHIgKyAzMikgKiBNYXRoLmNvcyhfYW5nMiksIHkgLSByIC8gMiAtIChyICsgMzIpICogTWF0aC5zaW4oX2FuZzIpKTsKCiAgICAgICAgICAgIF90aGlzLmRyYXdUaW1lTGluZShzdmcsIHBhdGgzLCAicmdiKDIwMCwyMDAsMjAwKSIsIDIsICc5LDUnLCAnbW0gJywgJ21tICcpOwogICAgICAgICAgfQogICAgICAgIH0pKCk7CiAgICAgIH0KCiAgICAgIHZhciB0eHRzID0gZGF0YVsnbmFtZSddLnNwbGl0KCIgIik7CiAgICAgIHZhciB0eCA9IHggLSByIC0gMzA7CiAgICAgIHZhciB0eSA9IHkgKyByICsgNjA7CiAgICAgIHZhciB0dyA9IHIgKiAyOwogICAgICB0eCA9IHg7CgogICAgICBpZiAoZGF0YVsnc29uJ10ubGVuZ3RoID09IDApIHsKICAgICAgICB0eCA9IHg7IC8vLXItMTA7CgogICAgICAgIHR5ID0geSArIHIgKiAyOwogICAgICB9IC8vIGlmIChkYXRhWydpZCddID09ICIzIikgewogICAgICAvLyAgIHR4ID0geCAtIDEwOwogICAgICAvLyAgIHR5ID0geSArIHIgKiAyOwogICAgICAvLyB9CiAgICAgIC8vIGlmIChkYXRhWydpZCddID09ICI0IikgewogICAgICAvLyAgIHR4ID0geCArIDEwOwogICAgICAvLyAgIHR5ID0geSArIHIgKiAyOwogICAgICAvLyB9CiAgICAgIC8vIGlmKGRhdGFbJ3R5cGUnXT09JzEnKXsKICAgICAgLy8gICB0eCA9IHgtci8yOwogICAgICAvLyAgIHR5ID0geStyKjI7CiAgICAgIC8vIH0KCgogICAgICBfdGhpcy5kcmF3VHh0KHN2ZywgdHgsIHR5LCB0dywgdHh0cywgImdyZXkiLCAxNiwgInRleHRfIi5jb25jYXQoZGF0YVsnaWQnXSkpOwogICAgfSwKICAgIGRyYXdBcmM6IGZ1bmN0aW9uIGRyYXdBcmMoc3ZnLCB4LCB5LCBhcmNQYXRoLCBzdHJva2UsIGZpbGwsIGNsYXNzTmFtZSkgewogICAgICB2YXIgc3Ryb2tlX2Rhc2hhcnJheSA9IGFyZ3VtZW50cy5sZW5ndGggPiA3ICYmIGFyZ3VtZW50c1s3XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzddIDogIjAiOwogICAgICB2YXIgd2lkdGggPSBhcmd1bWVudHMubGVuZ3RoID4gOCAmJiBhcmd1bWVudHNbOF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s4XSA6IDM7CiAgICAgIHZhciBvcGFjaXR5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDkgJiYgYXJndW1lbnRzWzldICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbOV0gOiAxOwogICAgICB2YXIgYXJjID0gc3ZnLmFwcGVuZCgicGF0aCIpLmF0dHIoImQiLCBhcmNQYXRoKS5hdHRyKCJjbGFzcyIsIGNsYXNzTmFtZSkuYXR0cigidHJhbnNmb3JtIiwgInRyYW5zbGF0ZSgiICsgeCArICIsIiArIHkgKyAiKSIpLmF0dHIoInN0cm9rZSIsIHN0cm9rZSkuYXR0cignc3Ryb2tlLXdpZHRoJywgd2lkdGgpLmF0dHIoInN0cm9rZS1kYXNoYXJyYXkiLCBzdHJva2VfZGFzaGFycmF5KS5hdHRyKCJzdHJva2UtbGluZWpvaW4iLCAicm91bmQiKS5hdHRyKCJmaWxsIiwgZmlsbCkuYXR0cigib3BhY2l0eSIsIG9wYWNpdHkpOwogICAgICByZXR1cm4gYXJjOwogICAgfSwKICAgIGRyYXdDaXJjbGU6IGZ1bmN0aW9uIGRyYXdDaXJjbGUoc3ZnLCB4LCB5LCByLCBmaWxsLCBkYXRhLCBvcGFjaXR5LCBjbGFzc05hbWUsIGlkTmFtZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIG9EYXRhID0gX3RoaXMuZGF0YTsKICAgICAgc3ZnLmFwcGVuZCgiY2lyY2xlIikuYXR0cigiaWQiLCBpZE5hbWUpLmF0dHIoImNsYXNzIiwgY2xhc3NOYW1lKS5hdHRyKCJvcGFjaXR5Iiwgb3BhY2l0eSkuYXR0cigiY3giLCB4KS5hdHRyKCJjeSIsIHkpLmF0dHIoInIiLCByKS5hdHRyKCJmaWxsIiwgZmlsbCkub24oIm1vdXNlb3ZlciIsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmF0dHIoInIiLCByICogMS4xKTsKICAgICAgICB2YXIgY2xhc3NOID0gZDMuc2VsZWN0KHRoaXMpLmF0dHIoImNsYXNzIik7CiAgICAgICAgdmFyIGlkTiA9IGQzLnNlbGVjdCh0aGlzKS5hdHRyKCJpZCIpLnNwbGl0KCJfIilbMV07CiAgICAgICAgX3RoaXMub3ZlckVudGl0eUlkID0gaWROOwogICAgICAgIHZhciBzaG93UmVsID0gX3RoaXMuc2hvd0VudGl0eVJlbElkTGlzdDsKCiAgICAgICAgaWYgKCFzaG93UmVsLmluY2x1ZGVzKHBhcnNlSW50KGlkTikpKSB7CiAgICAgICAgICBzaG93UmVsLnB1c2gocGFyc2VJbnQoaWROKSk7CiAgICAgICAgICBfdGhpcy5zaG93RW50aXR5UmVsSWRPdmVyU3RhdGUgPSAwOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBfdGhpcy5zaG93RW50aXR5UmVsSWRPdmVyU3RhdGUgPSAxOwogICAgICAgIH0KCiAgICAgICAgX3RoaXMuc2hvd0VudGl0eVJlbElkTGlzdCA9IHNob3dSZWw7CgogICAgICAgIGlmIChjbGFzc04gPT0gJ2xpbmVQb2ludCcpIHsKICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hdHRyKCJvcGFjaXR5IiwgMSkuYXR0cigiciIsIDUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBkMy5zZWxlY3RBbGwoIi5mIiArIGRhdGFbJ2lkJ10pLmF0dHIoInRyYW5zZm9ybSIsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1kID0gZDMuc2VsZWN0KHRoaXMpLmF0dHIoInRyYW5zZm9ybSIpOwogICAgICAgICAgICByZXR1cm4gdHJhbnNmb3JtZC5zcGxpdCgiICIpWzBdICsgIiBzY2FsZSgxLjEpIjsKICAgICAgICAgIH0pOwogICAgICAgICAgZDMuc2VsZWN0QWxsKCIuYmFzaWNSZWwiKS5hdHRyKCJjbGFzcyIsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICAgIHZhciBjbGFzc04gPSBkMy5zZWxlY3QodGhpcykuYXR0cigiY2xhc3MiKTsKICAgICAgICAgICAgdmFyIGNsYXNzTkxpc3QgPSBjbGFzc04uc3BsaXQoIiAiKTsKICAgICAgICAgICAgdmFyIGpnID0gMDsKCiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xhc3NOTGlzdC5sZW5ndGggLSAxOyBpKyspIHsKICAgICAgICAgICAgICBpZiAoJ3NvdXJjZScgKyBkYXRhWydpZCddID09IGNsYXNzTkxpc3RbaV0pIHsKICAgICAgICAgICAgICAgIGpnID0gMTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGlmICgndGFyZ2V0JyArIGRhdGFbJ2lkJ10gPT0gY2xhc3NOTGlzdFtpXSkgewogICAgICAgICAgICAgICAgamcgPSAxOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGpnID09IDEpIHsvLyBjbGFzc04gKz0gIiBhY3RpdmVTIjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIGNsYXNzTjsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSkub24oIm1vdXNlbGVhdmUiLCBmdW5jdGlvbiAoZCkgewogICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hdHRyKCJyIiwgcik7CiAgICAgICAgX3RoaXMub3ZlckVudGl0eUlkID0gIiI7IC8vX3RoaXMuY3VyRW50SWQ7CgogICAgICAgIHZhciBjbGFzc04gPSBkMy5zZWxlY3QodGhpcykuYXR0cigiY2xhc3MiKTsKICAgICAgICB2YXIgaWROID0gZDMuc2VsZWN0KHRoaXMpLmF0dHIoImlkIikuc3BsaXQoIl8iKVsxXTsKICAgICAgICB2YXIgc2hvd1JlbCA9IF90aGlzLnNob3dFbnRpdHlSZWxJZExpc3Q7CgogICAgICAgIGlmIChfdGhpcy5zaG93RW50aXR5UmVsSWRPdmVyU3RhdGUgPT0gMSkgewogICAgICAgICAgc2hvd1JlbC5wdXNoKHBhcnNlSW50KGlkTikpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzaG93UmVsLnNwbGljZShzaG93UmVsLmluZGV4T2YocGFyc2VJbnQoaWROKSksIDEpOwogICAgICAgIH0KCiAgICAgICAgX3RoaXMuc2hvd0VudGl0eVJlbElkTGlzdCA9IHNob3dSZWw7CgogICAgICAgIGlmIChjbGFzc04gPT0gJ2xpbmVQb2ludCcpIHsKICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hdHRyKCJvcGFjaXR5IiwgMCkuYXR0cigiciIsIDUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBkMy5zZWxlY3RBbGwoIi5mIiArIGRhdGFbJ2lkJ10pLmF0dHIoInRyYW5zZm9ybSIsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1kID0gZDMuc2VsZWN0KHRoaXMpLmF0dHIoInRyYW5zZm9ybSIpOwogICAgICAgICAgICByZXR1cm4gdHJhbnNmb3JtZC5zcGxpdCgiICIpWzBdICsgIiBzY2FsZSgxKSI7CiAgICAgICAgICB9KTsKICAgICAgICAgIGQzLnNlbGVjdCgiI2dyYXBoUGFuZWwiKS5zZWxlY3RBbGwoInBhdGgiKS5hdHRyKCJjbGFzcyIsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICAgIHZhciB0aGlzU2VsZWN0ID0gZDMuc2VsZWN0KHRoaXMpOwogICAgICAgICAgICB2YXIgY2xhc3NOID0gdGhpc1NlbGVjdC5hdHRyKCJjbGFzcyIpOwogICAgICAgICAgICB2YXIgY2xhc3NOTGlzdCA9IGNsYXNzTi5zcGxpdCgiICIpOwoKICAgICAgICAgICAgaWYgKGNsYXNzTkxpc3RbY2xhc3NOTGlzdC5sZW5ndGggLSAxXSA9PSAiYWN0aXZlUyIpIHsKICAgICAgICAgICAgICBjbGFzc04gPSAiIjsKCiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbGFzc05MaXN0Lmxlbmd0aCAtIDE7IGkrKykgewogICAgICAgICAgICAgICAgY2xhc3NOICs9ICIgIiArIGNsYXNzTkxpc3RbaV07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gY2xhc3NOOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KS5vbigiY2xpY2siLCBmdW5jdGlvbiAoZCkgewogICAgICAgIHZhciBpZE4gPSBkMy5zZWxlY3QodGhpcykuYXR0cigiaWQiKS5zcGxpdCgiXyIpWzFdOwogICAgICAgIHZhciBzaG93UmVsID0gX3RoaXMuc2hvd0VudGl0eVJlbElkTGlzdDsgLy8gIC0gX3RoaXMuc2hvd0VudGl0eVJlbElkT3ZlclN0YXRlOwoKICAgICAgICBpZiAoIXNob3dSZWwuaW5jbHVkZXMocGFyc2VJbnQoaWROKSkpIHsKICAgICAgICAgIHNob3dSZWwgPSBbcGFyc2VJbnQoaWROKV07CiAgICAgICAgICBfdGhpcy5zaG93RW50aXR5UmVsSWRPdmVyU3RhdGUgPSAxOwogICAgICAgIH0gZWxzZSBpZiAoc2hvd1JlbC5pbmNsdWRlcyhwYXJzZUludChpZE4pKSkgewogICAgICAgICAgLy8gc2hvd1JlbC5maWx0ZXIoaXRlbT0+e3JldHVybiBpdGVtPT1wYXJzZUludChpZE4pfSkKICAgICAgICAgIF90aGlzLnNob3dFbnRpdHlSZWxJZE92ZXJTdGF0ZSA9IDA7CiAgICAgICAgICBzaG93UmVsLnNwbGljZShzaG93UmVsLmluZGV4T2YocGFyc2VJbnQoaWROKSksIDEpOwogICAgICAgIH0KCiAgICAgICAgX3RoaXMuc2hvd0VudGl0eVJlbElkTGlzdCA9IHNob3dSZWw7CiAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmF0dHIoInIiLCByKTsKICAgICAgICBkMy5zZWxlY3RBbGwoIi5mIiArIGRhdGFbJ2lkJ10pLmF0dHIoInRyYW5zZm9ybSIsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICB2YXIgdHJhbnNmb3JtZCA9IGQzLnNlbGVjdCh0aGlzKS5hdHRyKCJ0cmFuc2Zvcm0iKTsKICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1kLnNwbGl0KCIgIilbMF0gKyAiIHNjYWxlKDEpIjsKICAgICAgICB9KTsKICAgICAgICB2YXIgdGhpc0lkID0gdGhpcy5pZC5zcGxpdCgiXyIpWzFdOwogICAgICAgIF90aGlzLmN1ckVudElkID0gdGhpc0lkOwoKICAgICAgICB2YXIgdGhpc0RhdGEgPSBfdGhpcy5kcmF3RW50aXR5TG9jYXRpb24uZmluZChmdW5jdGlvbiAoYSkgewogICAgICAgICAgcmV0dXJuIGFbJ2lkJ10gPT0gdGhpc0lkOwogICAgICAgIH0pOwoKICAgICAgICB2YXIgdGhpc1RpbWUgPSB0aGlzRGF0YVsndGltZSddOwoKICAgICAgICBfdGhpcy5jbGlja19FbnQodGhpc1RpbWUpOwoKICAgICAgICB2YXIgcHN2ZyA9IGQzLnNlbGVjdCgiI2VudEciKTsKICAgICAgICB2YXIgZHcgPSBwc3ZnLmF0dHIoIndpZHRoIik7CiAgICAgICAgdmFyIGRoID0gcHN2Zy5hdHRyKCJoZWlnaHQiKTsKICAgICAgICBwc3ZnLnJlbW92ZSgpOwogICAgICAgIHZhciBzdmcgPSBkMy5zZWxlY3QoJyNlZGl0RW50JykuYXBwZW5kKCJnIikuYXR0cigiaWQiLCAiZW50RyIpLmF0dHIoIndpZHRoIiwgZHcpLmF0dHIoImhlaWdodCIsIGRoKTsKCiAgICAgICAgX3RoaXMuZHJhd0VudGl0eShzdmcsIGR3IC8gMiwgMTAwLCByLCB0aGlzRGF0YSwgMSk7IC8vIGlmICh0aGlzRGF0YVsndHlwZSddID09IDAgKSB7CgoKICAgICAgICBfdGhpcy5kcmF3RW50aXR5VGltZUF4aXMoc3ZnLCB0aGlzRGF0YSwgW2R3IC8gMiwgMTAwLCByXSk7IC8vIH0KICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzVGltZSx0aGlzSWQsdGhpc0RhdGEpCgogICAgICB9KS5vbigiY29udGV4dG1lbnUiLCBmdW5jdGlvbiAoZCwgaSkgewogICAgICAgIGQucHJldmVudERlZmF1bHQoKTsKCiAgICAgICAgaWYgKF90aGlzLmJ0bkVkaSkgewogICAgICAgICAgX3RoaXMuZWRpdERpdlNob3cgPSB0cnVlOwogICAgICAgICAgX3RoaXMuJHJlZnMuZWRpdERpdi5zdHlsZS50b3AgPSAiIi5jb25jYXQoZC5jbGllbnRZLCAicHgiKTsKICAgICAgICAgIF90aGlzLiRyZWZzLmVkaXREaXYuc3R5bGUubGVmdCA9ICIiLmNvbmNhdChkLmNsaWVudFgsICJweCIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgdGhpc0lkID0gdGhpcy5pZC5zcGxpdCgiXyIpWzFdOwoKICAgICAgICAgIHZhciB0aGlzU2hvd0VudGl0eURhdGEgPSBfdGhpcy5zaG93RW50aXR5TGlzdC5maW5kKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICAgIHJldHVybiBkWydpZCddID09IHRoaXNJZDsKICAgICAgICAgIH0pOwoKICAgICAgICAgIHZhciB0aGlzU29ucyA9IHRoaXNTaG93RW50aXR5RGF0YVsnc29uJ107CgogICAgICAgICAgaWYgKHRoaXNTb25zLmxlbmd0aCAhPSAwKSB7CiAgICAgICAgICAgIHZhciBzb25zID0gdG9vbHMuZGVlcENsb25lKHRoaXNTb25zKTsKICAgICAgICAgICAgdmFyIHNob3dKYWdlID0gZmFsc2U7CiAgICAgICAgICAgIHZhciBfaTMgPSAwOwoKICAgICAgICAgICAgdmFyIF9sb29wMTcgPSBmdW5jdGlvbiBfbG9vcDE3KCkgewogICAgICAgICAgICAgIHZhciBzID0gc29uc1swXTsKICAgICAgICAgICAgICBzb25zLnNwbGljZSgwLCAxKTsKCiAgICAgICAgICAgICAgdmFyIGN1cnNvbiA9IF90aGlzLnNob3dFbnRpdHlMaXN0LmZpbmQoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBkWydpZCddID09IHMgKyAnJzsKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgaWYgKF9pMyA9PSAwKSB7CiAgICAgICAgICAgICAgICBfaTMrKzsKICAgICAgICAgICAgICAgIHNob3dKYWdlID0gIWN1cnNvblsnc2hvdyddOwogICAgICAgICAgICAgIH0gLy8gWydzaG93J10gPSAhX3RoaXMuc2hvd0VudGl0eUxpc3QuZmluZChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZFsnaWQnXSA9PSB0aGlzU29uc1tzXSB9KVsnc2hvdyddCgoKICAgICAgICAgICAgICBjdXJzb25bJ3Nob3cnXSA9IHNob3dKYWdlOwogICAgICAgICAgICAgIHZhciBjdXJnc29uID0gY3Vyc29uWydzb24nXTsKCiAgICAgICAgICAgICAgaWYgKCFzaG93SmFnZSkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgZ3MgPSAwOyBncyA8IGN1cmdzb24ubGVuZ3RoOyBncysrKSB7CiAgICAgICAgICAgICAgICAgIHNvbnMucHVzaChjdXJnc29uW2dzXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwoKICAgICAgICAgICAgd2hpbGUgKHNvbnMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgIF9sb29wMTcoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgX3RoaXMudXBkYXRhR3JhcGgoKTsKICAgICAgfSk7IC8vIC5vbigiIikKICAgIH0sCiAgICBkcmF3UmVjdDogZnVuY3Rpb24gZHJhd1JlY3Qoc3ZnLCB4LCB5LCB3LCBoLCByeCwgcnksIGZpbGwsIG9wYWNpdHksIHN0cm9rZSkgewogICAgICB2YXIgaWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMTAgJiYgYXJndW1lbnRzWzEwXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzEwXSA6ICdyZWN0JzsKICAgICAgdmFyIHN0cm9rZVcgPSBhcmd1bWVudHMubGVuZ3RoID4gMTEgJiYgYXJndW1lbnRzWzExXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzExXSA6IDEuNTsKICAgICAgdmFyIGNsYXNzTiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxMiAmJiBhcmd1bWVudHNbMTJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMTJdIDogJ3JlY3QnOwogICAgICBkMy5zZWxlY3QoIiMiLmNvbmNhdChpZCkpLnJlbW92ZSgpOwogICAgICB2YXIgcmVjdCA9IHN2Zy5hcHBlbmQoInJlY3QiKS5hdHRyKCJpZCIsIGlkKS5hdHRyKCJjbGFzcyIsIGNsYXNzTikuYXR0cigieCIsIHgpLmF0dHIoInkiLCB5KS5hdHRyKCJyeCIsIHJ4KS5hdHRyKCJyeSIsIHJ5KS5hdHRyKCJoZWlnaHQiLCBoKS5hdHRyKCJ3aWR0aCIsIHcpIC8v5Yia5omN6K6+572u55qE5Z2X55qE5a695bqmCiAgICAgIC5hdHRyKCJmaWxsIiwgZmlsbCkuYXR0cigib3BhY2l0eSIsIG9wYWNpdHkpLmF0dHIoInN0cm9rZSIsIHN0cm9rZSkuYXR0cigic3Ryb2tlLXdpZHRoIiwgIiIuY29uY2F0KHN0cm9rZVcsICJweCIpKTsKICAgICAgcmV0dXJuIHJlY3Q7CiAgICB9LAogICAgZHJhd1R4dDogZnVuY3Rpb24gZHJhd1R4dChzdmcsIHgsIHksIHdpZHRoLCB0eHRzLCBmaWxsKSB7CiAgICAgIHZhciBmb250c2l6ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA2ICYmIGFyZ3VtZW50c1s2XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzZdIDogMTI7CiAgICAgIHZhciBpZE4gPSBhcmd1bWVudHMubGVuZ3RoID4gNyA/IGFyZ3VtZW50c1s3XSA6IHVuZGVmaW5lZDsKICAgICAgdmFyIGNsYXNzTiA9IGFyZ3VtZW50cy5sZW5ndGggPiA4ICYmIGFyZ3VtZW50c1s4XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzhdIDogInRleHQiOwogICAgICB2YXIgdHggPSB4OwogICAgICB2YXIgdHkgPSB5OwogICAgICB2YXIgcHJlV2lkdGggPSAwOwogICAgICB2YXIgcHJlSWROID0gMDsKICAgICAgdmFyIHByZXRleHQgPSAnJzsKCiAgICAgIGZvciAodmFyIHQgPSAwOyB0IDwgdHh0cy5sZW5ndGg7IHQrKykgewogICAgICAgIHByZXRleHQgKz0gIiAiICsgdHh0c1t0XTsKICAgICAgICB2YXIgdHh0ID0gc3ZnLmFwcGVuZCgidGV4dCIpLmF0dHIoInkiLCB0eSkuYXR0cigieCIsIHR4KS5hdHRyKCJpZCIsICIiLmNvbmNhdChpZE4sICJfIikuY29uY2F0KHQpKS5hdHRyKCJjbGFzcyIsICIiLmNvbmNhdChjbGFzc04pKS5hdHRyKCJmaWxsIiwgZmlsbCkuYXR0cigiZm9udC1zaXplIiwgZm9udHNpemUpLnN0eWxlKCJ0ZXh0LWFuY2hvciIsICJtaWRkbGUiKS50ZXh0KHByZXRleHQpOwogICAgICAgIHZhciB0ZXh0V2lkdGggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiIi5jb25jYXQoaWROLCAiXyIpLmNvbmNhdCh0KSkuZ2V0QkJveCgpLndpZHRoOwoKICAgICAgICBpZiAodGV4dFdpZHRoID4gd2lkdGggfHwgdCA9PSB0eHRzLmxlbmd0aCAtIDEpIHsKICAgICAgICAgIHByZXRleHQgPSAnJzsKICAgICAgICAgIHR4ID0geDsKICAgICAgICAgIHR5ICs9IDI1OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0eHQucmVtb3ZlKCk7CiAgICAgICAgfQoKICAgICAgICBwcmVXaWR0aCArPSB0ZXh0V2lkdGg7CiAgICAgIH0KICAgIH0sCiAgICBkcmF3VGltZUxpbmU6IGZ1bmN0aW9uIGRyYXdUaW1lTGluZShzdmcsIHBhdGgsIHN0cm9rZSwgd2lkdGgpIHsKICAgICAgdmFyIHN0cm9rZV9kYXNoYXJyYXkgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6ICIwIjsKICAgICAgdmFyIGlkTmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ID8gYXJndW1lbnRzWzVdIDogdW5kZWZpbmVkOwogICAgICB2YXIgY2xhc3NOYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDYgPyBhcmd1bWVudHNbNl0gOiB1bmRlZmluZWQ7CiAgICAgIHN2Zy5hcHBlbmQoJ3BhdGgnKS5hdHRyKCdkJywgcGF0aC50b1N0cmluZygpKS5hdHRyKCdzdHJva2UnLCBzdHJva2UpLmF0dHIoJ2NsYXNzJywgY2xhc3NOYW1lKS5hdHRyKCdpZCcsIGlkTmFtZSkuYXR0cigic3Ryb2tlLWRhc2hhcnJheSIsIHN0cm9rZV9kYXNoYXJyYXkpLmF0dHIoJ3N0cm9rZS13aWR0aCcsIHdpZHRoKS5hdHRyKCdmaWxsJywgJ25vbmUnKS5vbignbW91c2VvdmVyJywgZnVuY3Rpb24gKGQpIHsKICAgICAgICB2YXIgdGhpc1NlbGVjdCA9IGQzLnNlbGVjdCh0aGlzKTsKICAgICAgICB2YXIgY2xhc3NOID0gdGhpc1NlbGVjdC5hdHRyKCJjbGFzcyIpOwogICAgICAgIHZhciBpZE4gPSB0aGlzU2VsZWN0LmF0dHIoImlkIik7CgogICAgICAgIGlmIChjbGFzc04uc3BsaXQoIiAiKVswXSA9PSAiYmFzaWNSZWwiKSB7Ly8gZDMuc2VsZWN0KHRoaXMpLmF0dHIoImNsYXNzIiwgY2xhc3NOICsgIiBhY3RpdmVTIik7CiAgICAgICAgfQogICAgICB9KS5vbignbW91c2VsZWF2ZScsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgdmFyIHRoaXNTZWxlY3QgPSBkMy5zZWxlY3QodGhpcyk7CiAgICAgICAgdmFyIGNsYXNzTiA9IHRoaXNTZWxlY3QuYXR0cigiY2xhc3MiKTsKICAgICAgICB2YXIgY2xhc3NOTGlzdCA9IGNsYXNzTi5zcGxpdCgiICIpOwoKICAgICAgICBpZiAoY2xhc3NOTGlzdFtjbGFzc05MaXN0Lmxlbmd0aCAtIDFdID09ICJhY3RpdmVTIikgewogICAgICAgICAgY2xhc3NOID0gIiI7CgogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbGFzc05MaXN0Lmxlbmd0aCAtIDE7IGkrKykgewogICAgICAgICAgICBjbGFzc04gKz0gY2xhc3NOTGlzdFtpXSArICIgIjsKICAgICAgICAgIH0KCiAgICAgICAgICBkMy5zZWxlY3QodGhpcykuYXR0cigiY2xhc3MiLCBjbGFzc04pOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgdHJhbnNmb3JtR3JhcGhTdmc6IGZ1bmN0aW9uIHRyYW5zZm9ybUdyYXBoU3ZnKGZsYWcpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBncm91cHMgPSBfdGhpcy5ncm91cHNTdmc7CiAgICAgIHZhciBzY2FsZVByZSA9IF90aGlzLmdyYXBoU3ZnU2NhbGU7CiAgICAgIHZhciBtYXJnaW4gPSBfdGhpcy5tYXJnaW47CgogICAgICBpZiAoZmxhZyA9PSAnbGVmdCcpIHsKICAgICAgICBfdGhpcy5ncmFwaEdUcmFuc2Zvcm1YICs9IDEwOwogICAgICB9CgogICAgICBpZiAoZmxhZyA9PSAncmlnaHQnKSB7CiAgICAgICAgX3RoaXMuZ3JhcGhHVHJhbnNmb3JtWCAtPSAxMDsKICAgICAgfSAvLyBncm91cHMuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgKF90aGlzLmdyYXBoR1RyYW5zZm9ybVgpICsgJywnICsgKG1hcmdpbi50b3ApICsgJykgc2NhbGUoJyArIChzY2FsZVByZSkgKyAnKScpCgogICAgfSwKICAgIHVwZGF0YUFzc2lzdEdyYXBoUGFuZWw6IGZ1bmN0aW9uIHVwZGF0YUFzc2lzdEdyYXBoUGFuZWwoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgY29udGVudCA9IHRoaXMuZ3JvdXBzU3ZnLmh0bWwoKTsKICAgICAgdmFyIGhlaWdodCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhc3Npc3RHcmFwaFBhbmVsIikuY2xpZW50SGVpZ2h0OwogICAgICB2YXIgd2lkdGggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYXNzaXN0R3JhcGhQYW5lbCIpLmNsaWVudFdpZHRoOwogICAgICBkMy5zZWxlY3QoJyNhc3Npc3RHcmFwaFBhbmVsJykuc2VsZWN0KCdzdmcnKS5yZW1vdmUoKTsKICAgICAgdmFyIHRyYW5zWCA9IF90aGlzLmFzc2lzdEdUcmFuc2Zvcm1YOwogICAgICB2YXIgdHJhbnNZID0gX3RoaXMuYXNzaXN0R1RyYW5zZm9ybVk7CiAgICAgIHZhciBkaXYgPSBkMy5zZWxlY3QoJyNhc3Npc3RHcmFwaFBhbmVsJykuYXBwZW5kKCdzdmcnKS5hdHRyKCJ3aWR0aCIsIHdpZHRoKS5hdHRyKCJoZWlnaHQiLCBoZWlnaHQpLmFwcGVuZCgiZyIpLmF0dHIoInRyYW5zZm9ybSIsICJ0cmFuc2xhdGUoIi5jb25jYXQodHJhbnNYLCAiLCIpLmNvbmNhdCh0cmFuc1ksICIpIikpLmh0bWwoY29udGVudCk7CiAgICB9LAogICAgbW92ZUdyYXBoTGVmdDogZnVuY3Rpb24gbW92ZUdyYXBoTGVmdChlKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBfdGhpcy5tb3ZlRmxhZyA9PSB0cnVlOwogICAgICBjbGVhckludGVydmFsKHRoaXMubW92ZVRpbWVyKTsgLy8g5riF6Zmk5a6a5pe25ZmoCgogICAgICB0aGlzLm1vdmVUaW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpcy50cmFuc2Zvcm1HcmFwaFN2ZygibGVmdCIpOwogICAgICB9LCAxMCk7IC8vX3RoaXMudHJhbnNmb3JtR3JhcGhTdmcoJ2xlZnQnKSwgMTAwKTsKICAgIH0sCiAgICBtb3ZlR3JhcGhSaWdodDogZnVuY3Rpb24gbW92ZUdyYXBoUmlnaHQoZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOyAvLyBjb25zb2xlLmxvZygi4pqh8J+QsvCfq6finYTvuI/wn5GB77iPIixlKQoKCiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5tb3ZlVGltZXIpOyAvLyDmuIXpmaTlrprml7blmagKCiAgICAgIF90aGlzLm1vdmVGbGFnID09IHRydWU7CiAgICAgIHRoaXMubW92ZVRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzLnRyYW5zZm9ybUdyYXBoU3ZnKCJyaWdodCIpOwogICAgICB9LCAxMCk7IC8vX3RoaXMudHJhbnNmb3JtR3JhcGhTdmcoJ2xlZnQnKSwgMTAwKTsKICAgIH0sCiAgICBsZWF2ZUdyYXBoTW92ZTogZnVuY3Rpb24gbGVhdmVHcmFwaE1vdmUoKSB7CiAgICAgIC8vIHRoaXMubW92ZUZsYWcgPT0gZmFsc2U7CiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5tb3ZlVGltZXIpOyAvLyDmuIXpmaTlrprml7blmagKICAgICAgLy8gdGhpcy5ncmFwaEdUcmFuc2Zvcm1YID0gMDsKICAgIH0sCiAgICB1cGRhdGFHcmFwaDogZnVuY3Rpb24gdXBkYXRhR3JhcGgoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgbWFyZ2luID0gX3RoaXMubWFyZ2luOwogICAgICB2YXIgd2lkdGggPSBfdGhpcy4kcmVmcy5ncmFwaERpdi5vZmZzZXRXaWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0OwogICAgICB2YXIgaGVpZ2h0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImdyYXBoUGFuZWwiKS5jbGllbnRIZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTsKICAgICAgdmFyIGhlaWdodFRpbWVBeGlzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImdyYXBoVGltZUF4aXNQYW5lbCIpLmNsaWVudEhlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tOwogICAgICBfdGhpcy53aWR0aCA9IHdpZHRoOwogICAgICBfdGhpcy5oZWlnaHQgPSBoZWlnaHQ7CiAgICAgIGQzLnNlbGVjdCgiI2dyYXBoUGFuZWwiKS5zZWxlY3QoInN2ZyIpLnJlbW92ZSgpOwogICAgICB2YXIgc3ZnID0gZDMuc2VsZWN0KCIjZ3JhcGhQYW5lbCIpLmFwcGVuZCgic3ZnIikuYXR0cigid2lkdGgiLCB3aWR0aCkuYXR0cigiaGVpZ2h0IiwgaGVpZ2h0KTsKICAgICAgX3RoaXMucm9vdFN2ZyA9IHN2ZzsKICAgICAgZDMuc2VsZWN0KCIjZ3JhcGhUaW1lQXhpc1BhbmVsIikuc2VsZWN0KCJzdmciKS5yZW1vdmUoKTsKICAgICAgdmFyIFRpbWVBeGlzU3ZnID0gZDMuc2VsZWN0KCIjZ3JhcGhUaW1lQXhpc1BhbmVsIikuYXBwZW5kKCJzdmciKS5hdHRyKCJ3aWR0aCIsIHdpZHRoKS5hdHRyKCJoZWlnaHQiLCBoZWlnaHQpOwogICAgICBfdGhpcy5UaW1lQXhpc1N2ZyA9IFRpbWVBeGlzU3ZnOwogICAgICB2YXIgZGF0YSA9IF90aGlzLmRhdGE7CiAgICAgIHZhciBtYXhESW1wb3J0YW5jZSA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIGRhdGEubWFwKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuIGRbJ2F0dHJpYnV0ZSddWydpbXBvcnRhbmNlJ107CiAgICAgIH0pKTsKICAgICAgdmFyIG1pbkRJbXBvcnRhbmNlID0gTWF0aC5taW4uYXBwbHkoTWF0aCwgZGF0YS5tYXAoZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gZFsnYXR0cmlidXRlJ11bJ2ltcG9ydGFuY2UnXTsKICAgICAgfSkpOwogICAgICB2YXIgbWF4RFJlbGV2YW5jZSA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIGRhdGEubWFwKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuIGRbJ2F0dHJpYnV0ZSddWydyZWxldmFuY2UnXTsKICAgICAgfSkpOwogICAgICB2YXIgbWluRFJlbGV2YW5jZSA9IE1hdGgubWluLmFwcGx5KE1hdGgsIGRhdGEubWFwKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuIGRbJ2F0dHJpYnV0ZSddWydyZWxldmFuY2UnXTsKICAgICAgfSkpOwogICAgICB2YXIgbWF4RER1cmF0aW9uID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgZGF0YS5tYXAoZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gdG9vbHMudGltZTJzZWNvbmRzKGRbJ3RpbWUnXVsxXSkgLSB0b29scy50aW1lMnNlY29uZHMoZFsndGltZSddWzBdKTsKICAgICAgfSkpOwogICAgICB2YXIgbWF4VG90YWxEdXJhdGlvbiA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIGRhdGEubWFwKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuIGRbJ3RvdGFsRHVyYXRpb24nXTsKICAgICAgfSkpOwogICAgICBfdGhpcy5kcmF3RW50aXR5TG9jYXRpb24gPSBbXTsKICAgICAgX3RoaXMubWluREltcG9ydGFuY2UgPSBtaW5ESW1wb3J0YW5jZTsKICAgICAgX3RoaXMubWF4REltcG9ydGFuY2UgPSBtYXhESW1wb3J0YW5jZTsKICAgICAgX3RoaXMubWluRFJlbGV2YW5jZSA9IG1pbkRSZWxldmFuY2U7CiAgICAgIF90aGlzLm1heERSZWxldmFuY2UgPSBtYXhEUmVsZXZhbmNlOwogICAgICBfdGhpcy5tYXhERHVyYXRpb24gPSBtYXhERHVyYXRpb247CiAgICAgIF90aGlzLm1heFRvdGFsRHVyYXRpb24gPSBtYXhUb3RhbER1cmF0aW9uOwogICAgICB2YXIgY3VycmVudE1heENvbG9yID0gX3RoaXMuaW1wb3J0YW5jZU1heENvbG9yOwogICAgICB2YXIgY3VycmVudE1pbkNvbG9yID0gX3RoaXMuaW1wb3J0YW5jZU1pbkNvbG9yOwogICAgICBfdGhpcy5pbXBvcnRhbmNlQ29sb3JfbGluZWFyID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oW21pbkRJbXBvcnRhbmNlLCBtYXhESW1wb3J0YW5jZV0pLnJhbmdlKFswLCAxXSk7CgogICAgICBfdGhpcy4kYnVzLiRlbWl0KCJpbXBvcnRhbmNlTGluZWFyIiwgW21pbkRJbXBvcnRhbmNlLCBtYXhESW1wb3J0YW5jZV0pOwoKICAgICAgX3RoaXMuaW1wb3J0YW5jZUNvbXB1dGVfY29sb3IgPSBkMy5pbnRlcnBvbGF0ZShjdXJyZW50TWluQ29sb3IsIGN1cnJlbnRNYXhDb2xvcik7CiAgICAgIF90aGlzLnJlbGV2YW5jZVNjYWxlX2xpbmVhciA9IGQzLnNjYWxlTGluZWFyKFttaW5EUmVsZXZhbmNlLCBtYXhEUmVsZXZhbmNlXSwgWzIwLCA1MF0pOwogICAgICBfdGhpcy50b3RhbER1cmF0aW9uU2NhbGVfbGluZWFyID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWzAsIG1heFRvdGFsRHVyYXRpb25dKS5yYW5nZShbMjAsIDYwXSk7CgogICAgICBfdGhpcy5kcmF3TWFpbihzdmcpOyAvLyB9KTsKCiAgICB9LAogICAgem9vbUluTGF5b3V0Q2xrOiBmdW5jdGlvbiB6b29tSW5MYXlvdXRDbGsoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBfdGhpcy5sYXlvdXRTaG93ICs9IDE7CgogICAgICBpZiAoX3RoaXMubGF5b3V0U2hvdyA+IDMpIHsKICAgICAgICBfdGhpcy5sYXlvdXRTaG93ID0gMzsKICAgICAgfSAvLyBfdGhpcy51cGRhdGFHcmFwaCgpOwoKICAgIH0sCiAgICB6b29tT3V0TGF5b3V0Q2xrOiBmdW5jdGlvbiB6b29tT3V0TGF5b3V0Q2xrKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgX3RoaXMubGF5b3V0U2hvdyAtPSAxOwoKICAgICAgaWYgKF90aGlzLmxheW91dFNob3cgPCAwKSB7CiAgICAgICAgX3RoaXMubGF5b3V0U2hvdyA9IDA7CiAgICAgIH0gLy8gX3RoaXMudXBkYXRhR3JhcGgoKTsKCiAgICB9LAogICAgY2xpY2tfRW50OiBmdW5jdGlvbiBjbGlja19FbnQodGltZSkgewogICAgICB0aGlzLiRlbWl0KCJ0aW1lRHVyIiwgdGltZSk7CiAgICB9CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICB2YXIgbWFyZ2luID0gX3RoaXMubWFyZ2luOwogICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICBfdGhpcy51cGRhdGFHcmFwaCgpOwoKICAgICAgX3RoaXMudXBkYXRhQXNzaXN0R3JhcGhQYW5lbCgpOwogICAgfSk7CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICB2YXIgd2lkdGggPSBfdGhpcy4kcmVmcy5ncmFwaERpdi5vZmZzZXRXaWR0aDsKICAgIHZhciBoZWlnaHQgPSBfdGhpcy5oZWlnaHQ7CiAgICB2YXIgc2hvd0VudGl0eUxpc3QgPSB0b29scy5kZWVwQ2xvbmUoX3RoaXMuZGF0YSk7CgogICAgZm9yICh2YXIgZSBpbiBzaG93RW50aXR5TGlzdCkgewogICAgICBzaG93RW50aXR5TGlzdFtlXVsnc2hvdyddID0gdHJ1ZTsKICAgIH0KCiAgICBfdGhpcy5zaG93RW50aXR5TGlzdCA9IHNob3dFbnRpdHlMaXN0OyAvLyBsZXQgd2lkdGggPSBfdGhpcy53aWR0aDsKCiAgICB0aGlzLiRidXMuJG9uKCdncmFwaERhdGEnLCBmdW5jdGlvbiAodmFsKSB7CiAgICAgIF90aGlzLmRhdGEgPSB2YWw7CiAgICAgIHZhciBzaG93RW50aXR5TGlzdCA9IHRvb2xzLmRlZXBDbG9uZShfdGhpcy5kYXRhKTsKCiAgICAgIGZvciAodmFyIF9lIGluIHNob3dFbnRpdHlMaXN0KSB7CiAgICAgICAgc2hvd0VudGl0eUxpc3RbX2VdWydzaG93J10gPSB0cnVlOwogICAgICB9CgogICAgICBfdGhpcy5zaG93RW50aXR5TGlzdCA9IHNob3dFbnRpdHlMaXN0OwoKICAgICAgX3RoaXMudXBkYXRhR3JhcGgoKTsKICAgIH0pOwogICAgdGhpcy4kYnVzLiRvbigndG9waWNSZWN0dXAnLCBmdW5jdGlvbiAodmFsKSB7CiAgICAgIF90aGlzLmVkaXRDb25maXJtKCk7CiAgICB9KTsKICAgIHRoaXMuJGJ1cy4kb24oJ3N3aXRjaEwnLCBmdW5jdGlvbiAodmFsKSB7CiAgICAgIF90aGlzLnN3aXRjaEwgPSB2YWw7CiAgICB9KTsgLy8gdGhpcy4kcmVmcy5tb3ZlR3JhcGhMZWZ0LmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlb3ZlciIsIF90aGlzLm1vdmVHcmFwaExlZnQpOyAvLyDnm5HlkKzngrnlh7vkuovku7YKICAgIC8vIHRoaXMuJHJlZnMubW92ZUdyYXBoUmlnaHQuYWRkRXZlbnRMaXN0ZW5lcigibW91c2Vtb3ZlIiwgX3RoaXMubW92ZUdyYXBoUmlnaHQpOyAvLyDnm5HlkKzngrnlh7vkuovku7YKICAgIC8vIHRoaXMuJHJlZnMubW92ZUdyYXBoTGVmdC5hZGRFdmVudExpc3RlbmVyKCJtb3VzZWxlYXZlIiwgX3RoaXMubGVhdmVHcmFwaE1vdmUpOyAvLyDnm5HlkKzngrnlh7vkuovku7YKICAgIC8vIHRoaXMuJHJlZnMubW92ZUdyYXBoUmlnaHQuYWRkRXZlbnRMaXN0ZW5lcigibW91c2VsZWF2ZSIsIF90aGlzLmxlYXZlR3JhcGhNb3ZlKTsgLy8g55uR5ZCs54K55Ye75LqL5Lu2CiAgfSwKICBiZWZvcmVEZXN0cm95OiBmdW5jdGlvbiBiZWZvcmVEZXN0cm95KCkgewogICAgY2xlYXJJbnRlcnZhbCh0aGlzLm1vdmVUaW1lcik7CiAgfQp9Ow=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<!-- eslint-disable no-unused-vars -->\r\n<!-- eslint-disable no-unused-vars -->\r\n\r\n<template>\r\n  <div class=\"graph\" ref=\"graphDiv\" >\r\n    <!-- <div class=\"panelHead\">ConceptMap</div> -->\r\n    <div id=\"loadLoadingPanel\" class=\"\" v-loading=\"loadLoading\" v-show=\"loadLoading\">\r\n    </div>    \r\n    <div id=\"graphTimeAxisPanel\" class=\"\">\r\n    </div>\r\n    <div id=\"editConfirm\" v-show=\"editConfirmShow\" @click=\"editConfirm\">\r\n      <img class=\"editConfirm\" :src=\"editConfirmUrl\" @click=\"editConfirm\">\r\n    </div>\r\n    <div id=\"graphPanel\" class=\"panelBody\">\r\n    </div>\r\n    <!-- <div id=\"moveLeft\" ref=\"moveGraphLeft\"></div>\r\n                    <div id=\"moveRight\" ref=\"moveGraphRight\"></div> -->\r\n    <div id=\"assistGraphPanel\" class=\"panel\">\r\n      <div class=\"panelHead\"></div>\r\n    </div>\r\n\r\n    <div v-show=\"editDivShow\" ref=\"editDiv\" id=\"editDiv\" class=\"panel\">\r\n      <div id=\"editAdd\" @click=\"addNode\">\r\n        <img class=\"editIcons1\" :src=\"editAddUrl\" @click=\"addNode\">\r\n        Add sibling\r\n      </div>\r\n      <div id=\"editAddN\" @click=\"addNodeN\">\r\n        <img class=\"editIcons2\" :src=\"editAddNUrl\" @click=\"addNodeN\">\r\n        Add in next level\r\n      </div>\r\n      <div id=\"editDel\" @click=\"delNode\">\r\n        <img class=\"editIcons editDelIcons\" :src=\"editDelUrl\" @click=\"delNode\">\r\n        Delete\r\n      </div>\r\n    </div>\r\n\r\n    <div id=\"tipDiv\">\r\n      <img class=\"tip\" :src=\"tipUrl\">\r\n    </div>\r\n    <div id=\"zoomInDiv\" @click=\"zoomInLayoutClk\">\r\n    </div>\r\n    <div id=\"zoomOutDiv\" @click=\"zoomOutLayoutClk\">\r\n      <img class=\"icons\" :src=\"zoomOutUrl\">\r\n    </div>\r\n    <div id=\"editToolDiv\" @click=\"editToolClk\">\r\n      <img class=\"icons\" :src=\"editToolUrl\">\r\n    </div>\r\n    <div id=\"VideoEditPanel\" ref=\"VideoEditPanel\" class=\"\" v-show=\"VideoEditPanelShow\">\r\n    </div>\r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nimport * as d3 from 'd3'\r\nimport { Loading } from 'element-ui'\r\nimport { onMounted, ref } from 'vue';\r\nimport filenames from \"@/utils/fileName\";\r\nimport domtoimage from 'dom-to-image';\r\nimport TestJson from \"@/assets/json/case1_1_fin.json\";\r\nimport TestRelJson from \"@/assets/json/case1_fin_rel.json\";\r\nimport tools from \"@/utils/tools.js\";\r\nimport ocrad from \"@/utils/ocrad.js\";\r\nimport {createWorker} from \"@/utils/tesseract.min.js\";\r\nimport Tesseract from '@/utils/tesseract.min.js';\r\n// let worker= createWorker({\r\n//     // langPath:\"@/assets/data\"\r\n//     workerPath: '/uti/worker.min.js',\r\n//     // corePath: './tesseract-core.wasm.js',\r\n//     // langPath: 'D:/Cailibuhong/video2Graph/video2Graph/src/utils/tesseract'\r\n//   });;\r\n// console.log(worker)\r\n// worker.load()\r\n// worker.loadLanguage('eng')\r\n// worker.initialize('eng')\r\nexport default {\r\n  props: [\"videoTime\"],\r\n  data() {\r\n    return {\r\n      data: TestJson,\r\n      editConfirmShow:false,\r\n      gData: \"TestJson\",\r\n      relData: TestRelJson,\r\n      assistGTransformX: 10,\r\n      assistGTransformY: 100,\r\n      recognizeText:\"\",\r\n      loadLoading: false,\r\n      drawEntityLocation: [],\r\n      VideoEditPanelShow:false,\r\n      showEntityList: [],\r\n      switchL: [],\r\n      overEntityId: '',\r\n      overTargetEntityId: '',\r\n      showEntityRelIdList: [],\r\n      showEntityRelIdOverState: '',\r\n      rootEntityList: [],\r\n      rootSvg: null,\r\n      TimeAxisSvg: null,\r\n      groupsSvg: null,\r\n      arcG: null,\r\n      curEntId: '',\r\n      insertEntId: '',\r\n      editDivShow: false,\r\n      minDImportance: 0,\r\n      maxDImportance: 0,\r\n      minDRelevance: 0,\r\n      maxDRelevance: 0,\r\n      maxDDuration: 0,\r\n      timeAxisX: 0,\r\n      timeAxisW: 200,\r\n      timeAxisDropFlag: 0,\r\n      timeAxisDownX: 0,\r\n      timeAxisDownW: 60,\r\n      maxTotalDuration: 0,\r\n      videoDuration: 668,\r\n      totalDuration: 1000,\r\n      importanceColor_linear: null,\r\n      importanceCompute_color: null,\r\n      relevanceScale_linear: null,\r\n      totalDurationScale_linear: null,\r\n      sumTotalDuration: 0,\r\n      // importanceMinColor: \"rgb(1, 164, 183)\",\r\n      // importanceMaxColor: \"rgb(106, 52, 127)\",\r\n      zoomInUrl: require(\"@/assets/img/zoomIn.png\"),\r\n      zoomOutUrl: require(\"@/assets/img/zoomOut.png\"),\r\n      editToolUrl: require(\"@/assets/img/edit.png\"),\r\n      tipUrl: require(\"@/assets/img/tip.png\"),\r\n      editAddUrl: require(\"@/assets/img/edit_Add.png\"),\r\n      editAddNUrl: require(\"@/assets/img/edit_AddN.png\"),\r\n      editDelUrl: require(\"@/assets/img/edit_Delete.png\"),\r\n      editConfirmUrl: require(\"@/assets/img/已看.png\"),\r\n      layoutShow: 2,\r\n      graphGTransformK: 1,\r\n      graphGTransformX: 10,\r\n      graphGTransformY: 100,\r\n      graphGMoveX: 10,\r\n      graphSvgScale: 1,\r\n      moveTimer: null,\r\n      moveFlag: false,\r\n      importanceMinColor: \"rgb(203, 230, 209)\",\r\n      importanceMaxColor: \"rgb(22, 144, 207)\",\r\n      stepX: 150,\r\n      stepY: 100,\r\n      btnRel: false,\r\n      btnSim: false,\r\n      btnAso: false,\r\n      btnEdi: false,\r\n      circleInterval: 55,\r\n      width: 0,\r\n      height: 0,\r\n      curToolState: 'unEdit',\r\n      margin: { top: 80, right: 20, bottom: 0, left: 20 },\r\n      color: [\r\n        \"rgb(255,60,60)\",\r\n        \"rgb(0, 178, 171)\",\r\n        // \"rgb(255,83,255)\",\r\n        \"rgb(235,135,162)\",\r\n        \"rgb(255,178,101)\",\r\n        \"rgb(63,151,134)\",\r\n        \"rgb(83,255,255)\",\r\n        \"rgb(0,122,244)\",\r\n        \"rgb(168,168,255)\",\r\n        \"rgb(200,200,200)\",\r\n      ],\r\n      mcolor: [\r\n        \"rgb(125, 66, 206)\",\r\n        \"rgb(248, 134, 124)\",\r\n        \"rgb(50, 198, 191)\",\r\n        \"rgb(135, 126, 253)\",\r\n        \"rgb(198, 121, 123)\",\r\n        \"rgb(252, 177, 49)\",\r\n        \"rgb(112, 202, 229)\",\r\n      ],\r\n      // mcolor: [\r\n      //   \"rgb(91, 107, 255)\",\r\n      //   \"rgb(0, 178, 171)\",\r\n      //   // \"rgb(6, 214, 160)\",\r\n      //   \"rgb(255, 120, 90)\",\r\n      //   \"rgb(125, 98, 211)\",\r\n      //   \"rgb(255, 113, 212)\",\r\n      //   \"rgb(112, 214, 255)\",\r\n      //   \"rgb(255, 159, 28)\",\r\n      //   \"rgb(255, 77, 109)\",\r\n      // ],\r\n      mDarkcolor: [\r\n        \"rgb(95, 39, 179)\",\r\n        \"rgb(221, 83, 72)\",\r\n        \"rgb(0, 158, 148)\",\r\n        \"rgb(93, 88, 202)\",\r\n        \"rgb(180, 72, 79)\",\r\n        \"rgb(202, 134, 32)\",\r\n        \"rgb(46, 174, 202)\",\r\n      ],\r\n      mLigntcolor: [\r\n        \"#ff9c9c\",\r\n        \"#cc88b0\",\r\n        \"#ffa8ff\",\r\n        \"#e3b097\",\r\n        \"#f4c3d0\",\r\n        \"#f4f4d0\",\r\n        \"#ffd8b1\",\r\n        \"#9ecac2\",\r\n        \"#a8ccff\",\r\n        \"#97e3ba\",\r\n        \"#6f8be0\",\r\n        \"rgb(0,122,244)\",\r\n        \"#b6a2f7\",\r\n        \"rgb(168,168,255)\",\r\n        \"rgb(200,200,200)\",\r\n      ],\r\n      editVideoJage:false,\r\n      editVideoSP:[],\r\n      editVideoEP:[],\r\n    };\r\n  },\r\n\r\n  watch: {\r\n    type(val) {\r\n    },\r\n    switchL: {\r\n      deep: true,\r\n      handler(val) {\r\n        this.btnRel = val[0];\r\n        this.btnSim = val[1];\r\n        this.btnAso = val[2];\r\n        this.btnEdi = val[3];\r\n        this.updataRel()\r\n      }\r\n    },\r\n    recognizeText(val){\r\n      const _this =this;\r\n      _this.$bus.$emit(\"recognizeText\", [1,val]);\r\n    },\r\n    timeAxisX(val) {\r\n      const _this = this;\r\n      _this.updataTimeAxisDur(_this.TimeAxisSvg, _this.timeAxisX, _this.timeAxisW);\r\n    },\r\n    curEntId(val) {\r\n      const _this = this;\r\n      _this.overEntityId = val;\r\n      console.log(val)\r\n      _this.$bus.$emit(\"selectE\", val);\r\n      let entityLocationData = _this.drawEntityLocation;\r\n\r\n      let relData = _this.relData;\r\n      let showJageData = _this.showEntityList;\r\n      let basicRel = relData['basicRel'];\r\n      for (let r = 0; r < basicRel.length; r++) {\r\n        let sorceId = basicRel[r][0];\r\n        let targetId = basicRel[r][1];\r\n        let sorceJage = showJageData.find(function (d) { return d['id'] == sorceId })['show'];\r\n        let targetJage = showJageData.find(function (d) { return d['id'] == targetId })['show'];\r\n        if (sorceJage && targetJage) {\r\n          let trnId = '-1';\r\n          if (sorceId == parseInt(val)) {\r\n            trnId = targetId;\r\n          }\r\n          else if (targetId == parseInt(val)) {\r\n            trnId = sorceId;\r\n          }\r\n          if (trnId != '-1') {\r\n            let curEnt = entityLocationData.find(function (d) { return parseInt(d['id']) == trnId });\r\n            _this.assistGTransformX = parseInt(-curEnt['x']) + parseFloat(curEnt['r']) + 150;\r\n            _this.assistGTransformY = parseInt(-curEnt['y']) + parseFloat(curEnt['r']) + 300;\r\n            _this.updataAssistGraphPanel();\r\n          }\r\n        }\r\n\r\n      };\r\n      let similarityRel = relData['similarityRel'];\r\n      for (let r = 0; r < similarityRel.length; r++) {\r\n        let sorceId = similarityRel[r][0];\r\n        let targetId = similarityRel[r][1];\r\n        let sorceJage = showJageData.find(function (d) { return d['id'] == sorceId })['show'];\r\n        let targetJage = showJageData.find(function (d) { return d['id'] == targetId })['show'];\r\n        if (sorceJage && targetJage) {\r\n          let trnId = '-1';\r\n          if (sorceId == parseInt(val)) {\r\n            trnId = targetId;\r\n          }\r\n          else if (targetId == parseInt(val)) {\r\n            trnId = sorceId;\r\n          }\r\n          if (trnId != '-1') {\r\n            let curEnt = entityLocationData.find(function (d) { return parseInt(d['id']) == trnId });\r\n            _this.assistGTransformX = parseInt(-curEnt['x']) + parseFloat(curEnt['r']) + 150;\r\n            _this.assistGTransformY = parseInt(-curEnt['y']) + parseFloat(curEnt['r']) + 300;\r\n            _this.updataAssistGraphPanel();\r\n          }\r\n        }\r\n\r\n      };\r\n\r\n\r\n    },\r\n    overEntityId(val) {\r\n      const _this = this;\r\n\r\n      _this.$bus.$emit(\"overEntityId\", val);\r\n      let relList = [];\r\n      let relRootList = [];\r\n      let relData = _this.relData;\r\n      let oData = _this.drawEntityLocation;\r\n      let basicRel = relData['basicRel'];\r\n      d3.selectAll('.timeText').attr(\"opacity\", 0)\r\n      d3.selectAll('.timeAxisEnt').attr(\"stroke-width\", 0).attr(\"opacity\", 0.4).attr(\"stroke\", function () {\r\n        let cid = d3.select(this).attr(\"id\").split(\"_\")[1];\r\n        let nd = oData.find(function (d) { return d['id'] == cid });\r\n        return nd['colorD']\r\n      });\r\n      for (let re = 0; re < basicRel.length; re++) {\r\n\r\n        let sorceId = basicRel[re][0];\r\n        let targetId = basicRel[re][1];\r\n        let cNode = '';\r\n        if (sorceId == val) {\r\n          cNode = oData.find(function (d) { return d['id'] == targetId });\r\n          relList.push(targetId);\r\n          relRootList.push(cNode['rootIndex']);\r\n        }\r\n\r\n        if (targetId == val) {\r\n          cNode = oData.find(function (d) { return d['id'] == sorceId });\r\n          relList.push(sorceId);\r\n          relRootList.push(cNode['rootIndex']);\r\n        }\r\n      };\r\n      relList.forEach((self, indx, arr) => {\r\n\r\n        d3.select(`#timeAxisEnt_${self}`).attr(\"stroke\", 'white').attr(\"stroke-width\", 2).attr(\"opacity\", 1);\r\n        d3.select(`#timeText_${self}_0`).attr(\"opacity\", 1);\r\n      })\r\n      d3.select(`#timeAxisEnt_${val}`).attr(\"stroke-width\", 2).attr(\"opacity\", 1);\r\n      d3.select(`#timeText_${val}_0`).attr(\"opacity\", 1);\r\n    },\r\n    showEntityRelIdList(val) {\r\n      this.updataRel();\r\n    },\r\n    groupsSvg: {\r\n      deep: true,\r\n      handler() {\r\n        this.updataAssistGraphPanel();\r\n      }\r\n    },\r\n    gData(val) {\r\n    },\r\n    layoutShow(val) {\r\n      const _this = this;\r\n      let showEntityList = tools.deepClone(_this.data);\r\n      for (let e in showEntityList) {\r\n        if (parseInt(showEntityList[e]['layout']) < parseInt(val))\r\n          showEntityList[e]['show'] = true;\r\n        else {\r\n          showEntityList[e]['show'] = false;\r\n        }\r\n      }\r\n      _this.showEntityList = showEntityList;\r\n      _this.updataGraph();\r\n    },\r\n    data(val) {\r\n    },\r\n    videoTime(val) {\r\n      const _this = this;\r\n      let entityLocationData = _this.drawEntityLocation;\r\n      for (let e = 0; e < entityLocationData.length; e++) {\r\n        let curD = entityLocationData[e];\r\n        let timeStart = tools.time2seconds(entityLocationData[e]['time'][0]);\r\n        let timeEnd = tools.time2seconds(entityLocationData[e]['time'][1]);\r\n        if ((val > timeStart) && (val < timeEnd)) {\r\n          let entX = entityLocationData[e]['x'];\r\n          let entY = entityLocationData[e]['y'];\r\n          let entR = entityLocationData[e]['r'];\r\n          let moveLinear = d3.scaleLinear([timeStart, timeEnd], [entX - entR, entX + entR])\r\n          _this.graphGTransformX = -moveLinear((val));\r\n        }\r\n      }\r\n    },\r\n    graphGMoveX(val) {\r\n      const _this = this;\r\n      let data = _this.drawEntityLocation;\r\n      let stjg = 0;\r\n      let enjg = 0;\r\n      let snode = '';\r\n      let enode = '';\r\n      let width = 1590\r\n      data.forEach((self, indx, arr) => {\r\n        let entx = self['x'] * _this.graphGTransformK;\r\n        let transformX = entx + val;\r\n        if ((transformX > 0) && (transformX < width)) {\r\n          stjg++;\r\n        }\r\n        else {\r\n          if ((stjg > 0) && enjg == 0) {\r\n            enode = self;\r\n            enjg = 1\r\n          }\r\n        }\r\n        if (stjg == 1) {\r\n          snode = self\r\n        }\r\n      })\r\n      let ew = enode['timeW'];\r\n      if (snode == '') {\r\n        _this.timeAxisX = 0\r\n      }\r\n      else\r\n        _this.timeAxisX = snode['timeX'];\r\n      _this.timeAxisW = enode['timeX'] - snode['timeX'] + enode['timeW']\r\n      if (ew == undefined) {\r\n        _this.timeAxisW = width - snode['timeX']\r\n      }\r\n    },\r\n    graphGTransformX(val) {\r\n      const _this = this;\r\n      let groups = _this.groupsSvg;\r\n      _this.graphGMoveX = _this.graphGTransformX;\r\n      let graphGTransformX = _this.graphGTransformX;\r\n      let graphGTransformY = _this.graphGTransformY;\r\n      let graphGTransformK = _this.graphGTransformK;\r\n      groups.attr(\"transform\", \"translate(\" + graphGTransformX + ',' + graphGTransformY + \") scale(\" + graphGTransformK + \")\");\r\n    }\r\n  },\r\n  methods: {\r\n    addNode() {\r\n      const _this = this;\r\n      _this.editConfirmShow = true,\r\n      _this.VideoEditPanelShow = true,\r\n      _this.editDivShow = false;\r\n      _this.$bus.$emit(\"recognizeText\", [1,\"Please select on the video\"]);\r\n      d3.select(\"#VideoEditPanel\").select(\"svg\").remove()\r\n      var svg = d3.select(\"#VideoEditPanel\").append(\"svg\")\r\n        .attr(\"width\", \"946\")\r\n        .attr(\"height\", \"553\");\r\n      svg.on(\"mousedown\",function(d){\r\n        _this.editVideoSP = [d.layerX,d.layerY];\r\n        _this.editVideoJage = true;\r\n      }).on(\"mousemove\",function(d){\r\n        if(_this.editVideoJage){\r\n        let sP = _this.editVideoSP;\r\n        _this.editVideoEP = [d.layerX,d.layerY];\r\n        let eP =  [d.layerX,d.layerY];\r\n        let eX  = sP[0]>eP[0]?sP[0]:eP[0];\r\n        let eY  = sP[1]>eP[1]?sP[1]:eP[1];\r\n        let sX  = sP[0]<eP[0]?sP[0]:eP[0];\r\n        let sY  = sP[1]<eP[1]?sP[1]:eP[1];\r\n        _this.drawRect(svg,sX , sY, Math.abs(eX-sX), Math.abs(eY - sY), 0,0,\"rgba(0,0,0,0)\",1, \"red\", `videoRect`)}\r\n      }).on(\"mouseup\",function(d){\r\n        _this.editVideoJage = false;\r\n        \r\n        let sP = _this.editVideoSP;\r\n        let eP = [d.layerX,d.layerY];;\r\n\r\n        let eX  = sP[0]>eP[0]?sP[0]:eP[0];\r\n        let eY  = sP[1]>eP[1]?sP[1]:eP[1];\r\n        let sX  = sP[0]<eP[0]?sP[0]:eP[0];\r\n        let sY  = sP[1]<eP[1]?sP[1]:eP[1];\r\n        \r\n        var player = document.getElementById(\"playVideo\");   //获取video的Dom节点\r\n        player.setAttribute(\"crossOrigin\", \"anonymous\");  //添加srossOrigin属性，解决跨域问题\r\n        var canvas = document.createElement(\"canvas\");\r\n        \r\n        canvas.width = player.clientWidth;\r\n        canvas.height = player.clientHeight;\r\n        // canvas = canvas.getContext(\"2d\")\r\n        canvas.getContext(\"2d\").drawImage(player , 0, 0, canvas.width, canvas.height);//截\r\n        const data = canvas.getContext(\"2d\").getImageData(sX , sY,eX-sX, eY-sY);\r\n        // const data = canvas.getContext(\"2d\").getImageData(0, 0, canvas.width, canvas.height);\r\n        var canvass = document.createElement(\"canvas\");\r\n        canvass.width =eX-sX;\r\n        canvass.height = eY-sY;\r\n        canvass.getContext(\"2d\").putImageData(data, 0,0)\r\n        var dataURL = canvass.toDataURL(\"image/png\");  //将图片转成base64格式\r\n        var img = document.createElement('img');\r\n        img.src = dataURL\r\n        Tesseract.recognize(\r\n          canvass,\r\n          'eng',\r\n          { logger: m => console.log(m) }\r\n        ).then((d) => {\r\n          console.log(d.data.text);\r\n          _this.$bus.$emit(\"recognizeText\", [1,d.data.text]);\r\n        })\r\n        \r\n        // document.getElementById(\"VideoEditPanel\").appendChild(img);   //显示在页面中\r\n        // var string = ocrad(canvass);\r\n        // console.log(string)\r\n        // alert(string);\r\n      })\r\n    },\r\n    // VideoEditPanelShow(val) {\r\n    //   const _this = this;\r\n    //   if (val) {\r\n    //     let width = _this.$refs.VideoEditPanel.offsetWidth;\r\n    //     let height = document.getElementById(\"VideoEditPanel\").clientHeight;\r\n    //     d3.select(\"#VideoEditPanel\").select(\"svg\").remove()\r\n    //     var svg = d3.select(\"#VideoEditPanel\").append(\"svg\")\r\n    //       .attr(\"width\", width)\r\n    //       .attr(\"height\", height);\r\n    //   }\r\n    // },\r\n    addNodeN() {\r\n      const _this = this;\r\n      _this.editDivShow = false;\r\n\r\n    },\r\n    delNode() {\r\n      const _this = this;\r\n      _this.editDivShow = false;\r\n    },\r\n    editToolClk() {\r\n      const _this = this;\r\n      if (_this.curToolState == 'edit') _this.curToolState = 'unEdit';\r\n      else if (_this.curToolState != 'edit') _this.curToolState = 'edit';\r\n      this.$emit(\"toolState\", this.curToolState);\r\n    },\r\n    editConfirm(){\r\n      console.log(\"confirm\")\r\n      const _this = this;\r\n      _this.loadLoading = true;\r\n      setTimeout(() => {\r\n        _this.loadLoading = false;\r\n        }, 2000);\r\n      _this.editDivShow = false;\r\n      _this.editConfirmShow = false;\r\n      _this.VideoEditPanelShow = false;\r\n      _this.$bus.$emit(\"recognizeText\", [0,\"\"]);\r\n    },\r\n    updataRel() {\r\n      const _this = this;\r\n      let relData = _this.relData;\r\n      let oData = _this.drawEntityLocation;\r\n      let showJageData = _this.showEntityList;\r\n      let showRel = _this.showEntityRelIdList;\r\n      let basicRel = relData['basicRel'];\r\n\r\n      if (_this.btnRel) {\r\n        if (_this.btnSim) {\r\n          d3.selectAll('.similarityRel').attr('opacity', 1);\r\n        }\r\n        else if (!_this.btnSim) {\r\n          d3.selectAll('.similarityRel').attr('opacity', 0);\r\n        }\r\n        if (_this.btnAso) {\r\n          d3.selectAll('.basicRel').attr('opacity', 1);\r\n        }\r\n        else if (!_this.btnAso) {\r\n          d3.selectAll('.basicRel').attr('opacity', 0);\r\n        }\r\n        // d3.selectAll('.similarityRel').attr('opacity', 1);\r\n        // d3.selectAll('.basicRel').attr('opacity', 1);\r\n      }\r\n      else if (!_this.btnRel) {\r\n        d3.selectAll('.similarityRel').attr('opacity', 0);\r\n        d3.selectAll('.basicRel').attr('opacity', 0);\r\n      }\r\n      if (!_this.btnRel || !_this.btnAso) {\r\n        for (let r = 0; r < basicRel.length; r++) {\r\n          let sorceId = basicRel[r][0];\r\n          let targetId = basicRel[r][1];\r\n          let idN = \"basicRel\" + sorceId + \"_\" + targetId;\r\n          if (_this.overTargetEntityId == '') {\r\n            if ((showRel.includes(sorceId)) || (showRel.includes(targetId))) {\r\n              d3.select(`#${idN}`).attr('opacity', 1).attr('stroke', 'grey')\r\n            }\r\n            else {\r\n              d3.select(`#${idN}`).attr('opacity', 0)\r\n            }\r\n          }\r\n          else {\r\n\r\n            if ((showRel.includes(sorceId + '')) || (showRel.includes(targetId + ''))) {\r\n              d3.select(`#${idN}`).attr('opacity', 1).attr('stroke', 'grey')\r\n            }\r\n            else {\r\n              d3.select(`#${idN}`).attr('opacity', 0)\r\n            }\r\n            if ((showRel.includes(sorceId + '')) && (targetId == _this.overTargetEntityId)) {\r\n              d3.select(`#${idN}`).attr('opacity', 1).attr('stroke', 'darkslateblue')\r\n            }\r\n            else if ((showRel.includes(targetId + '')) && (sorceId == _this.overTargetEntityId)) {\r\n              d3.select(`#${idN}`).attr('opacity', 1).attr('stroke', 'darkslateblue')\r\n            }\r\n          }\r\n        };\r\n      }\r\n    },\r\n    drawRelationshipLine(svg) {\r\n      const _this = this;\r\n      let relData = _this.relData;\r\n      let oData = _this.drawEntityLocation;\r\n      let showJageData = _this.showEntityList;\r\n      let margin = _this.margin;\r\n      let height = svg.attr('height');\r\n      let basicRel = relData['basicRel'];\r\n      for (let r = 0; r < basicRel.length; r++) {\r\n\r\n        let sorceId = basicRel[r][0];\r\n        let targetId = basicRel[r][1];\r\n        let idN = \"basicRel\" + sorceId + \"_\" + targetId;\r\n        let classN = \"basicRel source\" + sorceId + \" target\" + targetId;\r\n        let sorceNode = oData.find(function (d) { return d['id'] == sorceId });\r\n        let targetNode = oData.find(function (d) { return d['id'] == targetId });\r\n        let sorceJage = showJageData.find(function (d) { return d['id'] == sorceId })['show'];\r\n        let targetJage = showJageData.find(function (d) { return d['id'] == targetId })['show'];\r\n        if (sorceJage && targetJage) {\r\n          if (sorceNode['x'] > targetNode['x']) {\r\n            let tp = sorceNode;\r\n            sorceNode = targetNode;\r\n            targetNode = tp;\r\n          }\r\n          const path = d3.path();\r\n\r\n          let startX = sorceNode['x'];\r\n          let endX = targetNode['x'];\r\n          let midX = (startX + endX) / 2;\r\n          let flag = ((sorceNode['sonFlag']) || (targetNode['sonFlag']));\r\n          // if((targetNode['id'] == \"4\")||((sorceNode['id']==\"1\")&&(targetNode['id']==\"6\"))||((sorceNode['id']==\"2\")&&(targetNode['id']==\"7\"))||((sorceNode['id']==\"3\")&&(targetNode['id']==\"8\"))){\r\n          //   flag = true;\r\n          // }\r\n          if (targetNode['id'] == \"4\") {\r\n            flag = true;\r\n          }\r\n          // if(targetNode['id'] == \"30\"){\r\n          //   flag = true;\r\n          // }\r\n          let rsourceint = (sorceNode['sonFlag']) ? (49) : (2);\r\n          let rtargetint = (targetNode['sonFlag']) ? (49) : (2);\r\n          let startY = (flag) ? (sorceNode['y'] - sorceNode['r'] - rsourceint) : (sorceNode['y'] + sorceNode['r'] + rsourceint);\r\n          let endY = (flag) ? (targetNode['y'] - targetNode['r'] - rtargetint) : (targetNode['y'] + targetNode['r'] + rtargetint);\r\n\r\n          let cnx1 = startX - 50;\r\n          let cnx2 = endX + 50;\r\n          let midY = (startY + endY) / 2;\r\n          // if(((sorceNode['id']==\"1\")&&(targetNode['id']==\"6\"))||((sorceNode['id']==\"2\")&&(targetNode['id']==\"7\"))||((sorceNode['id']==\"3\")&&(targetNode['id']==\"8\"))){\r\n          //   midY-=140\r\n          // }\r\n          let h = (((endX - startX) / 5) > (parseInt(height) + 100)) ? (parseInt(height) + 100) : ((endX - startX) / 5);\r\n          let cny = (flag) ? (midY - h) : (midY + h);\r\n\r\n          let cny1 = cny;\r\n          let cny2 = cny;\r\n\r\n          if (((sorceNode['layout'] == 2) && (cny < 0)) || ((sorceNode['layout'] == 0) && (cny > 0))) {\r\n            cnx1 -= 250;\r\n            cny1 = cny * 1.3;\r\n          }\r\n          if (((targetNode['layout'] == 2) && (cny < 0)) || ((targetNode['layout'] == 0) && (cny > 0))) {\r\n            cnx2 += 250;\r\n            cny2 = cny * 1.3;\r\n          }\r\n          if((sorceId == '14')&&(targetId == '7')){\r\n            cny*=1.4}\r\n          // let midP = [(startP[0]+endP[0])/2,(startP[1])>(endP[1])?(startP[1]-100):(endP[1]-100)];\r\n          path.moveTo(startX, startY);\r\n          path.bezierCurveTo(midX, cny, midX, cny, endX, endY);\r\n          _this.drawTimeLine(svg, path, \"rgb(200,200,200)\", 5, \"9,9\", idN, classN);\r\n        }\r\n\r\n      };\r\n      let similarityRel = relData['similarityRel'];\r\n      // let basicRel = relData['basicRel'];\r\n      for (let r = 0; r < similarityRel.length; r++) {\r\n\r\n        let sorceId = similarityRel[r][0];\r\n        let targetId = similarityRel[r][1];\r\n\r\n        let idN = \"similarityRel\" + sorceId + \"_\" + targetId;\r\n\r\n        let classN = \"similarityRel source\" + sorceId + \" target\" + targetId;\r\n        let sorceNode = oData.find(function (d) { return d['id'] == sorceId });\r\n        let targetNode = oData.find(function (d) { return d['id'] == targetId });\r\n        let sorceJage = showJageData.find(function (d) { return d['id'] == sorceId })['show'];\r\n        let targetJage = showJageData.find(function (d) { return d['id'] == targetId })['show'];\r\n        if (sorceJage && targetJage) {\r\n\r\n          if (sorceNode['x'] > targetNode['x']) {\r\n            let tp = sorceNode;\r\n            sorceNode = targetNode;\r\n            targetNode = tp;\r\n          }\r\n          const path = d3.path();\r\n\r\n          let startX = sorceNode['x'] + sorceNode['r'] / 2;\r\n          let endX = targetNode['x'] - targetNode['r'] / 2;\r\n          let midX = (startX + endX) / 2;\r\n          let flag = ((sorceNode['sonFlag']) || (targetNode['sonFlag']));\r\n          let rsourceint = (sorceNode['sonFlag']) ? (20) : (2);\r\n          let rtargetint = (targetNode['sonFlag']) ? (20) : (2);\r\n          let startY = (flag) ? (sorceNode['y'] - sorceNode['r'] - rsourceint) : (sorceNode['y'] + sorceNode['r'] + rsourceint);\r\n          let endY = (flag) ? (targetNode['y'] - targetNode['r'] - rtargetint) : (targetNode['y'] + targetNode['r'] + rtargetint);\r\n\r\n          let midY = (startY + endY) / 2;\r\n\r\n          // let h1Scale_linear = d3.scaleLinear([0, _this.width], [(sorceNode['y']>targetNode['y'])?(sorceNode['y']*2):(targetNode['y']*2),parseInt(height)])\r\n          let h = (((endX - startX) / 14) > (parseInt(height) - 10)) ? (parseInt(height) - 10) : ((endX - startX) / 14);\r\n          let hScale_linear = d3.scaleLinear([0, _this.width / 2], [0, (h-80) / 3 * 2])\r\n          let cny = (flag) ? (midY - hScale_linear(endX)) : (midY + hScale_linear(endX));\r\n          // if (sorceNode['id'] == '7') { cny -= 20 }\r\n          if (cny < -150) {\r\n            startY = sorceNode['y'] + sorceNode['r'] + rsourceint\r\n            endY = targetNode['y'] + targetNode['r'] + rtargetint\r\n            cny = height - cny - 300;\r\n          }\r\n          if(targetId==\"5\"||sorceId==\"5\"){cny+=250}\r\n          if(targetId==\"6\"||sorceId==\"6\"){cny+=150}\r\n          path.moveTo(startX, startY);\r\n          path.lineTo(startX, cny);\r\n          path.lineTo(endX, cny);\r\n          path.lineTo(endX, endY);\r\n          _this.drawTimeLine(svg, path, \"rgb(200,200,200)\", 5, \"0\", idN, classN);\r\n        }\r\n\r\n\r\n      };\r\n      _this.updataRel()\r\n    },\r\n    drawMain(svg) {\r\n      let _this = this;\r\n      let data = _this.data;\r\n      let margin = _this.margin;\r\n\r\n      let width = _this.width - margin.left - margin.right;\r\n      let height = _this.height - margin.top - margin.bottom;\r\n\r\n      let graphGTransformX = _this.graphGTransformX;\r\n      let graphGTransformY = _this.graphGTransformY;\r\n      let graphGTransformK = _this.graphGTransformK;\r\n      let axisGroups = svg.append(\"g\").attr(\"id\", \"axisGroups\").attr(\"width\", width).attr(\"height\", height)\r\n      // .attr(\"transform\", \"translate(\" + graphGTransformX + ',' + graphGTransformY + \") scale(\" + graphGTransformK + \")\");\r\n      let groups = svg.append(\"g\").attr(\"id\", \"groups\").attr(\"width\", width).attr(\"height\", height)\r\n        .attr(\"transform\", \"translate(\" + graphGTransformX + ',' + graphGTransformY + \") scale(\" + graphGTransformK + \")\");\r\n      this.groupsSvg = groups;\r\n\r\n      let backG = groups.append(\"g\").attr(\"id\", \"backG\").attr(\"width\", width).attr(\"height\", height);\r\n      let arcG = groups.append(\"g\").attr(\"id\", \"arcG\").attr(\"width\", width).attr(\"height\", height);\r\n      let timeLineG = groups.append(\"g\").attr(\"id\", \"timeLineG\").attr(\"width\", width).attr(\"height\", height);\r\n      let circleG = groups.append(\"g\").attr(\"id\", \"circleG\").attr(\"width\", width).attr(\"height\", height);\r\n\r\n      _this.arcG = arcG;\r\n      let stepX = _this.stepX;\r\n      let stepY = _this.stepY;\r\n      let interval = _this.circleInterval;\r\n\r\n\r\n      let scalePre = _this.graphSvgScale;\r\n      let stx = 0;\r\n      let sty = 0;\r\n      let stk = 1;\r\n      var graphZoom = d3.zoom()\r\n        .scaleExtent([0, 10])\r\n        .on(\"start\", (e) => {\r\n          sty = e.transform.y;\r\n          stx = e.transform.x;\r\n          stk = e.transform.k;\r\n        })\r\n        .on('zoom', (e) => {\r\n          graphGTransformX = _this.graphGTransformX + e.transform.x - stx;\r\n          graphGTransformY = _this.graphGTransformY + e.transform.y - sty;\r\n          graphGTransformK = _this.graphGTransformK + e.transform.k - stk;\r\n          _this.graphGMoveX = graphGTransformX;\r\n\r\n          groups.attr('transform', 'translate(' + (graphGTransformX) + ',' + (graphGTransformY) + ') scale(' + (graphGTransformK) + ')')\r\n        })\r\n        .on('end', (e) => {\r\n          _this.graphGTransformX = graphGTransformX;\r\n          _this.graphGTransformY = graphGTransformY;\r\n          _this.graphGTransformK = graphGTransformK;\r\n          groups.attr('transform', 'translate(' + (graphGTransformX) + ',' + (graphGTransformY) + ') scale(' + (graphGTransformK) + ')')\r\n        });\r\n\r\n\r\n      svg.call(graphZoom)\r\n      // .call(graphZoom.transform, d3.zoomIdentity.scale(1))\r\n      const path = d3.path()\r\n      path.moveTo(margin.left, margin.top)\r\n      let x = margin.left;\r\n      let prex = margin.left;\r\n      let prey = margin.top;\r\n      let prer = 0;\r\n      let preSonLen = 0;\r\n      let layoutShow = _this.layoutShow;\r\n      let sumTotalDuration = 0;\r\n      let rootIndex = -1;\r\n      for (let i = 0; i < data.length; i++) {\r\n        let lay = parseInt(data[i]['layout']);\r\n\r\n        let colors = _this.mcolor;\r\n        let colorsD = _this.mDarkcolor;\r\n        let entityLocationData = tools.deepClone(data[i]);\r\n        if (lay == 0) {\r\n          rootIndex++;\r\n        }\r\n        entityLocationData['rootIndex'] = rootIndex;\r\n        entityLocationData['color'] = colors[rootIndex % colors.length];\r\n        entityLocationData['colorD'] = colorsD[rootIndex % colorsD.length];\r\n        let timeList = data[i]['time'];\r\n        let duration = tools.time2seconds(timeList[1]) - tools.time2seconds(timeList[0]);\r\n        sumTotalDuration += duration;\r\n        let showEntity = _this.showEntityList.find(function (d) { return d['id'] == data[i]['id'] });\r\n        if ((showEntity['show'] == true)) {\r\n          let y = margin.top + lay * stepY\r\n          let relevanceValue = data[i]['attribute']['relevance'];\r\n          let totalDurationValue = data[i]['totalDuration'];\r\n          let rScale = _this.totalDurationScale_linear;\r\n\r\n\r\n          let r = rScale(totalDurationValue);\r\n          let stepL = r + stepX / 2 + interval / 10;\r\n          let controlP1x = prex + interval / 1;\r\n          let controlP2x = x - interval / 1;\r\n          let curLinex = x - r - interval;\r\n\r\n          let relData = _this.relData;\r\n          let oData = _this.drawEntityLocation;\r\n          let basicRel = relData['basicRel'];\r\n          let daId = data[(i)]['id'];\r\n          let jg = 0;\r\n          for (let re = 0; re < basicRel.length; re++) {\r\n\r\n            let sorceId = basicRel[re][0];\r\n            let targetId = basicRel[re][1];\r\n            let cNode = '';\r\n            if ((sorceId == daId) || (targetId == daId)) {\r\n              jg = 1;\r\n            }\r\n          };\r\n          let sonFlag = 1;\r\n          if (((i > 0) && (preSonLen == 0)) && (data[(i)]['son'].length == 0)) {\r\n            sonFlag = 0;\r\n            stepL = r + stepX / 1.2 + interval / 10;\r\n            x += stepL;\r\n            controlP1x = prex + interval / 1;\r\n            controlP2x = x - r - interval / 2 - interval / 1;\r\n            curLinex = r + interval / 10;\r\n          }\r\n          else if (((i > 0) && (preSonLen != 0)) && (data[(i)]['son'].length == 0)) {\r\n            sonFlag = 0;\r\n            stepL = r + stepX + interval + 30;\r\n            x += stepL;\r\n            controlP1x = prex + interval / 1;\r\n            controlP2x = x - r - interval / 1 - interval / 1;\r\n            curLinex = r + interval / 10;\r\n          }\r\n          else {\r\n            stepL = r + stepX + interval + 10;\r\n            x += stepL;\r\n            controlP1x = prex + interval / 1;\r\n            controlP2x = x - r - interval - interval / 1;\r\n            curLinex = r + interval;\r\n          }\r\n\r\n          if ((jg == 1) && (data[i]['type'] == 0) && (data[(i)]['son'].length == 0)) {\r\n            curLinex += r * 1.5\r\n          }\r\n          _this.drawEntity(circleG, x, y, r, data[i])\r\n          path.bezierCurveTo(controlP1x, prey, controlP2x, y, x - curLinex, y)\r\n          // path.lineTo(controlP1x, prey)\r\n          // path.lineTo(controlP2x, y)\r\n          // path.lineTo(x - curLinex, y)\r\n          path.moveTo(x + curLinex, y);\r\n          prex = x + curLinex;\r\n          prey = y;\r\n          prer = r;\r\n          preSonLen = data[(i)]['son'].length;\r\n          entityLocationData['x'] = x;\r\n          entityLocationData['y'] = y;\r\n          entityLocationData['r'] = r;\r\n        }\r\n        else {\r\n          entityLocationData['x'] = prex;\r\n          entityLocationData['y'] = prey;\r\n          entityLocationData['r'] = prer;\r\n        }\r\n        entityLocationData['sonFlag'] = (entityLocationData['son'].length > 0) ? (1) : (0);\r\n        // entityLocationData['showRel'] = false;\r\n        _this.drawEntityLocation.push(entityLocationData);\r\n      }\r\n      let entityLocationData = _this.drawEntityLocation;\r\n      let colors = _this.mcolor;\r\n      let colorIndex = 0;\r\n      let colorrootIndex = 0;\r\n\r\n      _this.sumTotalDuration = sumTotalDuration;\r\n      for (let i = 0; i < entityLocationData.length; i++) {\r\n        let x = entityLocationData[i]['x'];\r\n        let y = entityLocationData[i]['y'];\r\n        let r = entityLocationData[i]['r'];\r\n\r\n        let showEntity = _this.showEntityList.find(function (d) { return d['id'] == entityLocationData[i]['id'] });\r\n        if (entityLocationData[i]['type'] == 0 && (showEntity['show'] == true)) {\r\n          _this.drawEntityTimeAxis(circleG, entityLocationData[i]);\r\n        }\r\n        if ((entityLocationData[i]['layout'] == '0' && (entityLocationData[i]['name'] != 'Test'))) {\r\n          colorIndex = colorrootIndex;\r\n          colorrootIndex++;\r\n\r\n        }\r\n        if ((entityLocationData[i]['son'].length != 0) && (_this.showEntityList.find(function (d) { return d['id'] == entityLocationData[i]['son'][0] })['show'])) {\r\n          let maxxs = entityLocationData[i]['x'] - entityLocationData[i]['r'] - 40;\r\n          let maxys = entityLocationData[i]['y'] - entityLocationData[i]['r'] - 40;\r\n          let minxs = tools.deepClone(maxxs);\r\n          let minys = tools.deepClone(maxys);\r\n          let rectPoints = [[maxxs, maxys]];\r\n          let sons = tools.deepClone(data[i]['son']);\r\n          while ((sons.length > 0)) {\r\n            let s = sons[0];\r\n            sons.splice(0, 1);\r\n            let curson = entityLocationData.find(function (d) { return d['id'] == s; });\r\n            let curgson = curson['son'];\r\n            let curx = curson['x'] + curson['r'] * 2;\r\n            let cury = curson['y'] + curson['r'] * 2;\r\n            if (curx > maxxs) { maxxs = curx; }\r\n            // if(curson['y']<maxys)maxys = curson['y'];\r\n            if (cury < minys) minys = cury;\r\n            if (cury > maxys) maxys = cury;\r\n            for (let gs = 0; gs < curgson.length; gs++) {\r\n              sons.push(curgson[gs]);\r\n            }\r\n          }\r\n          rectPoints = [[minxs, minys], [minxs, maxys], [maxxs, maxys], [maxxs, minys]];\r\n          // _this.drawpolygon(backG, colors[colorIndex], rectPoints, \"rgb(255,255,255)\",0.3);\r\n          _this.drawRect(backG, minxs, minys, Math.abs(maxxs - minxs), Math.abs(maxys - minys), 20, 20, colors[colorIndex], 0.1, \"white\", `backRect${i}`)\r\n\r\n          colorIndex++;\r\n          colorIndex %= colors.length\r\n        }\r\n        // entityLocationData[i]['color'] = colors[colorIndex - 1];\r\n        // if ((entityLocationData[i]['layout'] == '0') && ((entityLocationData[i]['name'] == 'Test') || (entityLocationData[i]['name'] == 'Example'))) {\r\n        //   entityLocationData[i]['color'] = colors[colorIndex]\r\n        // }\r\n      }\r\n      _this.drawTimeLine(timeLineG, path, \"rgb(200,200,200)\", 5, '0', 'timeLine ', 'timeLine ');\r\n      _this.drawRelationshipLine(timeLineG);\r\n      _this.drawTimeAxis(_this.TimeAxisSvg);\r\n      _this.drawTypeRiver(_this.TimeAxisSvg);\r\n      _this.updataTimeAxisDur(_this.TimeAxisSvg, _this.timeAxisX, _this.timeAxisW);\r\n    },\r\n    updataTimeAxisDur(svg, x, width) {\r\n      const _this = this;\r\n      let margin = _this.margin;\r\n      let totalWidth = _this.width //margin.left - margin.right;\r\n      let y = 0;\r\n      let h = 200;\r\n      _this.drawRect(svg, 0, y, x, h, 3, 3, 'white', 0.3, '', \"timeAxisRect1\")\r\n      let curRect = _this.drawRect(svg, x, y - 0, width, h - 5, 3, 3, 'rgba(0,0,0,0)', 1, 'rgb(145, 180, 189)', 'winRect', 2);\r\n      // --------------------------------------\r\n      // curRect.on('mousemove', function (e) {\r\n      //   d3.select(this).attr(\"cursor\", 'pointer');\r\n      //   if (_this.timeAxisDropFlag == 1) {\r\n      //     let mx = e.clientX - _this.timeAxisDownX;\r\n      //     _this.timeAxisX = e.layerX - 450 - _this.timeAxisW / 2;\r\n      //   }\r\n      // })\r\n      // curRect.on('mousedown', function (e) {\r\n      //   _this.timeAxisDownX = e.clientX;\r\n      //   _this.timeAxisDropFlag = 1;\r\n      // })\r\n      // curRect.on('mouseup', function (e) {\r\n      //   _this.timeAxisDownX = e.clientX;\r\n      //   _this.timeAxisDropFlag = 0;\r\n      // })\r\n      // ----------------------------------------\r\n\r\n      _this.drawRect(svg, x + width, y, totalWidth - width, h, 3, 3, 'white', 0.3, '', \"timeAxisRect2\")\r\n    },\r\n    drawTypeRiver(svg) {\r\n      const _this = this;\r\n      let oriData = _this.data;\r\n      let resData = [];\r\n      let triLi = [];\r\n      let exeLi = [];\r\n      var defs = svg.append(\"defs\");\r\n\r\n      var filter = defs\r\n        .append(\"filter\")\r\n        .attr(\"id\", \"coolShadow\")\r\n        .attr(\"x\", \"-100%\")\r\n        .attr(\"y\", \"-100%\") //\r\n        .attr(\"width\", \"300%\")\r\n        .attr(\"height\", \"300%\"); //\r\n\r\n      filter\r\n        .append(\"feMorphology\")\r\n        .attr(\"in\", \"SourceGraphic\")\r\n        .attr(\"result\", \"upperLayer\")\r\n        .attr(\"operator\", \"dilate\")\r\n        .attr(\"radius\", \"0.2 0.2\");\r\n\r\n      filter\r\n        .append(\"feMorphology\")\r\n        .attr(\"in\", \"SourceAlpha\")\r\n        .attr(\"result\", \"enlargedAlpha\")\r\n        .attr(\"operator\", \"dilate\")\r\n        .attr(\"radius\", \"0.2 0.2\");\r\n\r\n      filter\r\n        .append(\"feGaussianBlur\")\r\n        .attr(\"in\", \"enlargedAlpha\")\r\n        .attr(\"result\", \"bluredAlpha\")\r\n        .attr(\"stdDeviation\", \"3\");\r\n\r\n      filter\r\n        .append(\"feOffset\")\r\n        .attr(\"in\", \"bluredAlpha\")\r\n        .attr(\"result\", \"lowerLayer\")\r\n        .attr(\"dy\", \"1\"); //\r\n\r\n      var feMerge = filter.append(\"feMerge\");\r\n      feMerge.append(\"feMergeNode\").attr(\"in\", \"lowerLayer\");\r\n      feMerge.append(\"feMergeNode\").attr(\"in\", \"upperLayer\");\r\n      let total = 0\r\n      for (let i = 0; i < oriData.length; i++) {\r\n        let curEnt = oriData[i];\r\n        let tp = {}\r\n        tp['od'] = i;\r\n        tp['du'] =total;\r\n        total+=curEnt['totalDuration'];\r\n        console.log(curEnt)\r\n        if ((curEnt['type'] == \"1\")) {\r\n          triLi.push(tp);\r\n        }\r\n        if (curEnt['type'] == \"2\") {\r\n          exeLi.push(tp);\r\n        }\r\n        let typeData = curEnt[\"attribute\"][\"expressions\"];\r\n        let totalDur = 0;\r\n\r\n        for (let t in typeData) {\r\n          // let color = typeColor[i];\r\n          let typeDurition = typeData[t];\r\n          let totalTypeSeconds = 0;\r\n          for (let d in typeDurition) {\r\n            totalTypeSeconds += (tools.time2seconds(typeDurition[d][1]) - tools.time2seconds(typeDurition[d][0]))\r\n          }\r\n          totalDur += totalTypeSeconds;\r\n          tp[t] = totalTypeSeconds;\r\n        }\r\n        for (let t in tp) {\r\n          if ((t != 'od')&&(t!='du')) {\r\n            tp[t] /= totalDur;\r\n            if (totalDur == 0) {\r\n              tp[t] = 0;\r\n            }\r\n          }\r\n        }\r\n        resData.push(tp)\r\n      }\r\n      let data = resData;\r\n      var stack = d3.stack()\r\n        .keys(['1', '2', '3'])\r\n        .order(d3.stackOrderInsideOut)\r\n        .offset(d3.stackOffsetWiggle);\r\n\r\n      let yRangeWidth = 70;\r\n      let w = parseInt(svg.attr(\"width\")) + 30\r\n      let xStep = (w) / oriData.length;\r\n      let xScale = d3.scaleLinear().domain([0,total]).range([0,w])\r\n      let yScale = d3.scaleLinear().domain([-1, 1]).range([0, 70]);\r\n      var area = d3.area()\r\n        .curve(d3.curveBasis)\r\n        .x(function (d) {\r\n          return 15+xScale(d.data.du)+d.data.od * 10//xStep + 15;\r\n        })\r\n        .y0(function (d) {\r\n          return 153 + yRangeWidth - yScale(d[0]);\r\n        })\r\n        .y1(function (d) {\r\n          return 153 + yRangeWidth - yScale(d[1]);\r\n        });\r\n      let stackData = stack(data)\r\n      console.log(\"stack\",resData,stackData)\r\n      let lenThreshold = 0.4;\r\n      let iconLi = {}\r\n      for (let s in stackData) {\r\n        iconLi[s] = []\r\n        for (let i in stackData[s]) {\r\n          let lenArea = stackData[s][i]\r\n          if ((lenArea[1] - lenArea[0]) > 0.4) {\r\n            iconLi[s].push([i, lenArea]);\r\n          }\r\n          for (let li in iconLi[s]) {\r\n            if (i < (iconLi[s][li][0] + 2)) {\r\n              let selectArea = iconLi[s][li][1]\r\n              if (((selectArea[1] - lenArea[1]) - (selectArea[0] - lenArea[0])) < 0.2) {\r\n                iconLi[s].splice(s, 1);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // let areaG = svg.append(\"g\")\r\n      let typeColor = {\r\n        \"1\": \"#ff9c9c\",\r\n        \"2\": \"#f4f4d0\",\r\n        \"3\": \"#6f8be0\",\r\n      };\r\n      let colorLi = _this.mcolor;\r\n      svg.selectAll(\"path\")\r\n        .data(stackData)\r\n        .join(\"path\")\r\n        .attr(\"id\", function (d) { return d.key })\r\n        .attr(\"class\", \"river\")\r\n        .attr(\"d\", function (d) {\r\n          return area(d)\r\n        })\r\n        .attr(\"fill\", function (d, i) {\r\n          return typeColor[d.key]\r\n        })\r\n        .on(\"mouseover\", function (d) {\r\n          d3.selectAll(\".river\").style(\"filter\", \"url()\")\r\n          d3.select(this).style(\"filter\", \"url(#coolShadow)\")\r\n        })\r\n\r\n      for (let t in triLi) {\r\n        let area = tools.calcTriangle((triLi[t]['od']) * xStep, -30, 14);\r\n        _this.drawTriangle(svg, \"rgb(250, 199, 88)\", area, \"rgb(250, 199, 88)\",1,15,\"entE\",`entE_${data['id']}`);\r\n        _this.drawTxt(svg, (triLi[t]['od']) * xStep, -23, \"T\", \"white\", 0, \"middle\", 18)\r\n      }\r\n      for (let t in exeLi) {\r\n        let area = tools.calcTriangle((exeLi[t]['od']) * xStep, -30, 14);\r\n        _this.drawTriangle(svg, \"rgb(250, 199, 88)\", area, \"rgb(250, 199, 88)\",1,15,\"entE\",`entE_${data['id']}`);\r\n        _this.drawTxt(svg, (exeLi[t]['od']) * xStep, -23, \"E\", \"white\", 0, \"middle\", 18)\r\n      }\r\n    },\r\n    drawTimeAxis(svg) {\r\n      const _this = this;\r\n      let sumTotalDuration = _this.sumTotalDuration;\r\n      let data = _this.drawEntityLocation;\r\n      let addData = tools.deepClone(_this.drawEntityLocation);\r\n      let margin = _this.margin;\r\n      let prex = margin.left;\r\n      let prey = 50;\r\n      let width = svg.attr(\"width\") -20 //margin.left - margin.right;\r\n      let height = _this.height - margin.top - margin.bottom;\r\n      let widthScale = d3.scaleLinear([0, sumTotalDuration], [0, width]);\r\n      data.forEach((self, indx, arr) => {\r\n        let totalDurationValue = self['totalDuration'];\r\n        let timeList = self['time'];\r\n        let id = self['id']\r\n        let duration = tools.time2seconds(timeList[1]) - tools.time2seconds(timeList[0]);\r\n        // console.log(timeList,tools.time2seconds(timeList[0]))\r\n        let evWidth = widthScale(duration) - 4;\r\n\r\n        let evTWidth = widthScale(totalDurationValue);\r\n        let lay = parseInt(self['layout']);\r\n        let evHight = 80 - 20 * lay;\r\n        let x = prex;\r\n        let y = prey + 20 * lay;\r\n        prex += evWidth + 4;\r\n        let cr = 3;\r\n        // if(self['type']==0){\r\n        if (1) {\r\n          if (lay == 0) {\r\n            _this.drawRect(svg, x-1, y - 59, 3, 42, 0, 0, self['color'], 0.4, 'white', `timeAxisEntBl_${indx}`, 0, 'timeAxisEntBl')\r\n\r\n            _this.drawTxt(svg, x+23, y  - 23, 10, [self['time'][0].split(\":\").splice(1).join(\":\")], self['color'], 15, `timeDurText_${id}`, 'timeDuyrText');\r\n            _this.drawRect(svg, x - 2, y - 20, evTWidth, 100, 6, 6, self['color'], 0.3, 'white', `timeAxisEntB_${indx}`, 1.5, 'timeAxisEntB')\r\n          }\r\n          _this.drawRect(svg, x, y, evWidth, evHight, 3, 3, self['color'], 0.4, self['colorD'], `timeAxisEnt_${id}`, 1.5, 'timeAxisEnt')\r\n          _this.drawTxt(svg, x + evWidth / 2, y + evHight + 20, 10, [self['name'].split(\" \").join(\" \")], \"grey\", 16, `timeText_${id}`, 'timeText');\r\n        }\r\n        else {\r\n          if (lay == 0) {\r\n            _this.drawRect(svg, x - 2, y - 20, evTWidth, 100, 6, 6, self['color'], 0.3, 'white', `timeAxisEntB_${id}`, 1.5, 'timeAxisEnt')\r\n          }\r\n          let area = [[x + cr, y + evHight - cr], [x - cr + evWidth, y + evHight - cr], [x + evWidth / 2, y]];\r\n          _this.drawTriangle(svg, self['color'], area, self['color'], 1, cr * 2,\"entE\",`entE_${data['id']}`);\r\n        }\r\n        addData[indx]['timeX'] = x;\r\n        addData[indx]['timeW'] = evWidth\r\n      })\r\n\r\n      d3.selectAll('.timeText').attr(\"opacity\", 0)\r\n      _this.drawEntityLocation = addData;\r\n    },\r\n    drawTriangle(svg, color, points, stroke, opacity = 1, strokeW = 15,classNa,idNa) {\r\n      const _this = this;\r\n      svg.append(\"polygon\")\r\n        .attr(\"points\", points)\r\n        .attr(\"fill\", color)\r\n        .attr(\"id\", idNa)\r\n        .attr(\"class\", classNa)\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"stroke\", stroke)\r\n        .on(\"mouseover\", function (d) {\r\n          // d3.select(this).attr(\"r\", r * 1.1)\r\n          let classN = d3.select(this).attr(\"class\");\r\n          let idN = d3.select(this).attr(\"id\").split(\"_\")[1]\r\n          _this.overEntityId = idN\r\n          let showRel = _this.showEntityRelIdList\r\n          if (!showRel.includes(parseInt(idN))) {\r\n            showRel.push(parseInt(idN))\r\n            _this.showEntityRelIdOverState = 0;\r\n          }\r\n          else {\r\n            _this.showEntityRelIdOverState = 1;\r\n          }\r\n          _this.showEntityRelIdList = showRel;\r\n          if (classN == 'linePoint') {\r\n            d3.select(this).attr(\"opacity\", 1).attr(\"r\", 5)\r\n          }\r\n          // else {\r\n          //   d3.selectAll(\".f\" + data['id'])\r\n          //     .attr(\"transform\", function (d) {\r\n          //       let transformd = d3.select(this).attr(\"transform\")\r\n          //       return transformd.split(\" \")[0] + \" scale(1.1)\"\r\n          //     })\r\n\r\n          //   d3.selectAll(\".basicRel\")\r\n          //     .attr(\"class\", function (d) {\r\n          //       let classN = d3.select(this).attr(\"class\");\r\n          //       let classNList = classN.split(\" \");\r\n          //       let jg = 0;\r\n          //       for (let i = 0; i < classNList.length - 1; i++) {\r\n          //         if ('source' + data['id'] == classNList[i]) { jg = 1; }\r\n          //         if ('target' + data['id'] == classNList[i]) { jg = 1; }\r\n          //       }\r\n          //       if (jg == 1) {\r\n          //         // classN += \" activeS\";\r\n          //       }\r\n          //       return classN;\r\n          //     })\r\n          // }\r\n        })\r\n        .on(\"mouseleave\", function (d) {\r\n          // d3.select(this).attr(\"r\", r)\r\n\r\n          _this.overEntityId = \"\"//_this.curEntId;\r\n          let classN = d3.select(this).attr(\"class\");\r\n\r\n          let idN = d3.select(this).attr(\"id\").split(\"_\")[1]\r\n          let showRel = _this.showEntityRelIdList\r\n          if (_this.showEntityRelIdOverState == 1) {\r\n            showRel.push(parseInt(idN))\r\n          }\r\n          else {\r\n            showRel.splice(showRel.indexOf(parseInt(idN)), 1)\r\n          }\r\n          _this.showEntityRelIdList = showRel;\r\n\r\n          if (classN == 'linePoint') {\r\n            d3.select(this).attr(\"opacity\", 0).attr(\"r\", 5)\r\n          }\r\n          // else {\r\n          //   d3.selectAll(\".f\" + data['id'])\r\n          //     .attr(\"transform\", function (d) {\r\n          //       let transformd = d3.select(this).attr(\"transform\")\r\n          //       return transformd.split(\" \")[0] + \" scale(1)\"\r\n          //     })\r\n          //   d3.select(\"#graphPanel\").selectAll(\"path\")\r\n          //     .attr(\"class\", function (d) {\r\n          //       let thisSelect = d3.select(this)\r\n          //       let classN = thisSelect.attr(\"class\");\r\n          //       let classNList = classN.split(\" \")\r\n          //       if (classNList[classNList.length - 1] == \"activeS\") {\r\n          //         classN = \"\";\r\n          //         for (let i = 0; i < classNList.length - 1; i++) {\r\n          //           classN += \" \" + classNList[i];\r\n          //         }\r\n          //       }\r\n          //       return classN\r\n          //     })\r\n          // }\r\n        })\r\n        .on(\"click\", function (d) {\r\n\r\n          let idN = d3.select(this).attr(\"id\").split(\"_\")[1]\r\n          let showRel = _this.showEntityRelIdList;\r\n          //  - _this.showEntityRelIdOverState;\r\n          if (!showRel.includes(parseInt(idN))) {\r\n            showRel = [(parseInt(idN))]\r\n            _this.showEntityRelIdOverState = 1;\r\n          }\r\n          else if (showRel.includes(parseInt(idN))) {\r\n            // showRel.filter(item=>{return item==parseInt(idN)})\r\n            _this.showEntityRelIdOverState = 0;\r\n            showRel.splice(showRel.indexOf(parseInt(idN)), 1)\r\n          }\r\n          _this.showEntityRelIdList = showRel;\r\n\r\n          // d3.select(this).attr(\"r\", r);\r\n          // d3.selectAll(\".f\" + data['id'])\r\n          //   .attr(\"transform\", function (d) {\r\n          //     let transformd = d3.select(this).attr(\"transform\")\r\n          //     return transformd.split(\" \")[0] + \" scale(1)\"\r\n          //   })\r\n          let thisId = this.id.split(\"_\")[1];\r\n          _this.curEntId = thisId;\r\n          let thisData = _this.drawEntityLocation.find(function (a) { return a['id'] == thisId })\r\n          let thisTime = thisData['time'];\r\n          _this.click_Ent(thisTime);\r\n          let psvg = d3.select(\"#entG\");\r\n          let dw = psvg.attr(\"width\");\r\n          let dh = psvg.attr(\"height\");\r\n          psvg.remove();\r\n          let svg = d3.select('#editEnt').append(\"g\").attr(\"id\", \"entG\").attr(\"width\", dw).attr(\"height\", dh);\r\n          _this.drawEntity(svg, dw/2, 100, 50, thisData,1)\r\n          // if (thisData['type'] == 0 ) {\r\n            // _this.drawEntityTimeAxis(svg,thisData,[dw/2,100,10]);\r\n        // }\r\n          // console.log(thisTime,thisId,thisData)\r\n        })\r\n        .attr(\"stroke-width\", strokeW);\r\n    },\r\n    drawpolygon(svg, color, areas, stroke, opacity = 1) {\r\n      svg.append(\"polygon\")\r\n        .attr(\"points\", areas)\r\n        .attr(\"fill\", color)\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"stroke\", stroke)\r\n        .attr(\"stroke-width\", \"1.5px\");\r\n    },\r\n    drawEntityTimeAxis(svg, entData,copy=0) {\r\n\r\n      const _this = this;\r\n      let x = entData['x'];\r\n      let r = entData['r'];\r\n      let y = entData['y'] + r / 2;\r\n      if(copy!=0){\r\n        x = copy[0];\r\n        r = copy[2];\r\n        y = copy[1]+r/2;\r\n      }\r\n      let path1 = d3.path();\r\n      let jg1 = 0;\r\n      let path2 = d3.path();\r\n      let jg2 = 0;\r\n      let daId = entData['id']\r\n      let entDataO = _this.drawEntityLocation;\r\n      let sumTotalDuration = _this.sumTotalDuration;\r\n      let widthScale = d3.scaleLinear([0, sumTotalDuration], [0, Math.PI]);\r\n      let timeStepR = 0;\r\n      let timeStartR = -Math.PI / 2;\r\n      let inter = 0;\r\n      let sons = tools.deepClone(entData['son']);\r\n      let relList = [];\r\n      let relRootList = [];\r\n      let psNum = 0.5;\r\n      if ((sons.length > 0)) {\r\n        inter = 14\r\n      }\r\n\r\n      let relData = _this.relData;\r\n      let oData = _this.drawEntityLocation;\r\n      let basicRel = relData['basicRel'];\r\n      for (let re = 0; re < basicRel.length; re++) {\r\n\r\n        let sorceId = basicRel[re][0];\r\n        let targetId = basicRel[re][1];\r\n        let cNode = '';\r\n        if (sorceId == daId) {\r\n          cNode = oData.find(function (d) { return d['id'] == targetId });\r\n          relList.push(targetId);\r\n          relRootList.push(cNode['rootIndex']);\r\n        }\r\n\r\n        if (targetId == daId) {\r\n          cNode = oData.find(function (d) { return d['id'] == sorceId });\r\n          relList.push(sorceId);\r\n          relRootList.push(cNode['rootIndex']);\r\n        }\r\n      };\r\n      // if(entData[]) \r\n      let wline = 0;\r\n      let sumTotalDurationF = 0;\r\n      entDataO.forEach((self, indx, arr) => {\r\n        let totalDurationValue = self['totalDuration'];\r\n        let timeList = self['time'];\r\n        let layout = self['layout'];\r\n        let rootIndex = self['rootIndex'];\r\n        let duration = tools.time2seconds(timeList[1]) - tools.time2seconds(timeList[0]);\r\n        timeStepR = widthScale(duration);\r\n        if (!relRootList.includes(rootIndex)) {\r\n          wline += timeStepR * psNum;\r\n          sumTotalDurationF += duration;\r\n        }\r\n      })\r\n      let widthScaleA = d3.scaleLinear([0, sumTotalDuration - sumTotalDurationF], [0, Math.PI - wline]);\r\n      // if(rootEntityList.length==0){\r\n      //   widthScaleA = widthScale\r\n      // }\r\n      // let wline = 0;\r\n      entDataO.forEach((self, indx, arr) => {\r\n        let totalDurationValue = self['totalDuration'];\r\n        let timeList = self['time'];\r\n        let layout = self['layout'];\r\n        let rootIndex = self['rootIndex'];\r\n        let cId = self['id'];\r\n        let duration = tools.time2seconds(timeList[1]) - tools.time2seconds(timeList[0]);\r\n        timeStepR = widthScale(duration);\r\n        if (!relRootList.includes(rootIndex)) {\r\n          if (relRootList.length != 0) {\r\n            timeStepR = psNum * widthScale(duration);\r\n          }\r\n        }\r\n        else {\r\n          timeStepR = widthScaleA(duration)\r\n        }\r\n        let endAnglet = timeStartR + timeStepR;\r\n        var dataset = { startAngle: timeStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n        timeStartR = endAnglet;\r\n        let color = 'blue';\r\n        let rh = 30;\r\n        let h = rh;\r\n        let nh = 0;\r\n        if (relRootList.length != 0) {\r\n          h = rh * 0.32 + rh * 0.6 - 3 * layout;\r\n          nh = rh * 0.3;\r\n        }\r\n        if (!relRootList.includes(self['rootIndex'])) {\r\n          h = rh * 0.7;\r\n          nh = h * 0 + h * 0.6;\r\n        }\r\n        else {\r\n          dataset.startAngle += 0.003;\r\n          dataset.endAngle -= 0.003;\r\n\r\n        }\r\n        var arcPath = d3.arc()\r\n          .innerRadius(r + inter + nh)\r\n          .outerRadius(r + inter + h);\r\n        var pathArc = arcPath(dataset);\r\n        let arc;\r\n        if (relRootList.length != 0) {\r\n          let jiantouPath = d3.path();\r\n          jiantouPath.arc(x, y - r / 2, r + h + inter, - Math.PI, 0);\r\n\r\n          // _this.drawTimeLine(_this.arcG, jiantouPath, \"rgb(200,200,200)\", 1, '9,5', 'timeLayout ', 'timeLayout ');\r\n\r\n          if (relRootList.includes(self['rootIndex'])) {\r\n            if (relList.includes(parseInt(self['id']))) {\r\n            if((copy!=0) &&(jg1==0)){\r\n              jg1=1\r\n              path1.moveTo(2, 25)\r\n              path1.lineTo(150,25)\r\n              let ang = dataset.startAngle+Math.PI/2\r\n              _this.drawTxt(svg, 70, 20, 100, [\"Associated Concept\"], \"grey\", 15, `texts_1`);\r\n              // path1.lineTo((x+10),(y-r/2+10))\r\n              path1.lineTo((x-(r + inter + h)*Math.cos(ang)),(y-r/2-(r + inter + h)*Math.sin(ang)))\r\n              _this.drawTimeLine(svg, path1, \"rgb(200,200,200)\", 2, '9,5', 'mm ', 'mm ');\r\n            }\r\n              arc = _this.drawArc(svg, x, y - r / 2, pathArc, self['color'], self['color'], `timeAxisFor f${entData['id']} ${self['id']}`, '0', 0, 1);\r\n            }\r\n            else {\r\n              // path1.lineTo(0,0) \r\n              arc = _this.drawArc(svg, x, y - r / 2, pathArc, \"white\", self['color'], `timeAxisFor f${entData['id']} ${self['id']}`, '0', 0.0, 0.4);\r\n            }\r\n          }\r\n          else {\r\n            arc = _this.drawArc(svg, x, y - r / 2, pathArc, self['color'], self['color'], `timeAxisFor f${entData['id']} ${self['id']}`, '0', 0, 0.2);\r\n\r\n          }\r\n          if(daId == self['id']){\r\n            let color = d3.select(`#entCircle_${self['id']}`).attr(\"fill\")\r\n            let da = tools.deepClone(dataset);\r\n            da.startAngle = (dataset.endAngle+dataset.startAngle)/2-0.001;\r\n            da.endAngle = (dataset.endAngle+dataset.startAngle)/2+0.0001;\r\n            let arcPa = d3.arc()\r\n            .innerRadius(r + inter + (nh+h)/2)\r\n            .outerRadius(r + inter + (nh+h)/2);\r\n            let pathA = arcPa(da);\r\n            if((copy!=0) &&(jg2==0)){\r\n              jg2=1\r\n              path2.moveTo(400, 125)\r\n              path2.lineTo(290,125)\r\n              let ang = da.startAngle+0.001+Math.PI/2\r\n              _this.drawTxt(svg, 350, 120, 100, [\"Current Concept\"], \"grey\", 15, `texts_1`);\r\n              // path1.lineTo((x+10),(y-r/2+10))\r\n              path2.lineTo((x-(r + inter + h)*Math.cos(ang)),(y-r/2-(r + inter + h)*Math.sin(ang)))\r\n              _this.drawTimeLine(svg, path2, \"rgb(200,200,200)\", 2, '9,5', 'mm ', 'mm ');\r\n            }\r\n            _this.drawArc(svg, x, y - r / 2, pathA, color, self['color'], `timeAxisself f${self['id']}`, '0', 6, 1);\r\n          }\r\n            if(copy!=0){\r\n              // _this.drawTimeLine(svg, path1, \"rgb(200,200,200)\", 3, '9,5', 'mm ', 'mm ');\r\n            }\r\n          arc.on(\"mouseover\", function (d) {\r\n            let classN = d3.select(this).attr(\"class\");\r\n            let sId = (classN.split(\" \")[1] + \"\").slice(1);\r\n            let tId = classN.split(\" \")[2];\r\n            _this.showEntityRelIdList = [sId]\r\n            _this.overEntityId = sId;\r\n            _this.overTargetEntityId = tId;\r\n          })\r\n          \r\n          arc.on(\"mouseleave\", function (d) {\r\n            let classN = d3.select(this).attr(\"class\");\r\n            let sId = (classN.split(\" \")[1] + \"\").slice(1);\r\n            let showRel = _this.showEntityRelIdList;\r\n            _this.overTargetEntityId = '';\r\n            _this.overEntityId = \"\"//_this.curEntId;\r\n            if (_this.showEntityRelIdOverState == 1) {\r\n              showRel.push(parseInt(sId))\r\n            }\r\n            else {\r\n              showRel.splice(showRel.indexOf(parseInt(sId)), 1)\r\n            }\r\n          })\r\n        }\r\n      })\r\n    },\r\n    drawEntity(svg, x, y, r, data,copy=0) {\r\n      const _this = this;\r\n      let color_linear = _this.importanceColor_linear;\r\n      let compute_color = _this.importanceCompute_color;\r\n      let rScale = _this.relevanceScale_linear;\r\n      let oData = _this.data;\r\n      let path1 = d3.path();\r\n      let path2 = d3.path();\r\n      let jg2=0;\r\n      let ang2=0;\r\n      let path3 = d3.path();\r\n      let jg3=0;\r\n      let ang3=0;\r\n      let importanceValue = data['attribute']['importance'];\r\n      // let relevanceValuale(relevanceValue)\r\n      // { 'id': dae = data['attribute']['relevance'];\r\n      // let r = rScta[i]['id'], \"x\": x, \"r\": r, \"layout\": lay, \"y\": y, \"sonFlag\": sonFlag }\r\n\r\n\r\n      if (data['type'] == '1') {\r\n        let area = tools.calcTriangle(x, y, r);\r\n        _this.drawTriangle(svg, \"rgb(250, 199, 88)\", area, \"rgb(250, 199, 88)\",1,15,\"entT\",`entT_${data['id']}`);\r\n\r\n        _this.drawTxt(svg, x, y + 8, 20, [\"T\"], 'white', 28, \"T\")\r\n      }\r\n      else if (data['type'] == '2') {\r\n        let area = tools.calcTriangle(x, y, r);\r\n        _this.drawTriangle(svg, \"rgb(250, 199, 88)\", area, \"rgb(250, 199, 88)\",1,15,\"entE\",`entE_${data['id']}`);\r\n\r\n        _this.drawTxt(svg, x, y + 8, 20, [\"E\"], 'white', 28, \"E\")\r\n      }\r\n      else {\r\n\r\n        let cy = y;\r\n        let totalDuration = _this.totalDuration;\r\n        let timeLineScale_linear = d3.scaleLinear([0, totalDuration], [x - r * Math.sqrt(3) / 2, x + r * Math.sqrt(3) / 2])\r\n        let timeLineHighScale_linear = d3.scaleLinear([0, _this.maxTotalDuration - 50], [r / 2, r * (1 + Math.sqrt(3) / 3 * 2)])\r\n        let circleColor = compute_color(color_linear(importanceValue));\r\n        _this.drawCircle(svg, x, cy, r, circleColor, data, 1, \"entCircle\", \"entCircle_\" + data['id']);\r\n\r\n        r = r * Math.sqrt(3) / 2;\r\n        y += r / 2;\r\n        let path = d3.path();\r\n\r\n\r\n        path.moveTo(x - r, y);\r\n        let lineLi = [data];\r\n        let linePoint = [{ 'id': data['id'], 'time': data['time'], 'x': 0, 'y': 0 }];\r\n        let jgidL = [data['id']];\r\n        let similarityRelsli = [data[\"similarityRel\"]];\r\n        while (similarityRelsli.length > 0) {\r\n          let similarityRels = similarityRelsli[0];\r\n          similarityRelsli.splice(0, 1);\r\n          let jg = 0;\r\n          for (let srel in similarityRels) {\r\n            let cdata = oData.find(function (d) { return d['id'] == similarityRels[srel] });\r\n            if (jgidL.indexOf(cdata['id']) == -1) {\r\n              similarityRelsli.push(cdata[\"similarityRel\"])\r\n              jg = 1;\r\n              lineLi.push(cdata)\r\n              jgidL.push(cdata['id'])\r\n              linePoint.push({ 'id': cdata['id'], 'time': cdata['time'], 'x': 0, 'y': 0 })\r\n            }\r\n          }\r\n          // if(jg==0){\r\n          // break;\r\n          // }\r\n        }\r\n\r\n        const sortmt = (a, b) => {\r\n          return tools.time2seconds(a[0]) - tools.time2seconds(b[0]);\r\n        }\r\n        const sortlp = (a, b) => {\r\n          return tools.time2seconds(a['time'][0]) - tools.time2seconds(b['time'][0]);\r\n        }\r\n\r\n        lineLi = lineLi.sort(sortlp);\r\n        linePoint = linePoint.sort(sortlp);\r\n        let lineData = [[x - r * Math.sqrt(3) / 2 - 4, y]];\r\n        for (let t = 0; t < lineLi.length; t++) {\r\n          let startT = lineLi[t]['time'][0];\r\n          let duration = lineLi[t]['totalDuration']\r\n          // let endT = lineLi[t]['time'][1];\r\n          let startS = tools.time2seconds(startT);\r\n          let endS = startS + duration;\r\n          // let startx = timeLineScale_linear((startS - duration * 10));\r\n          // let endx = timeLineScale_linear((endS + duration * 10));\r\n          let limst = (x - r * Math.sqrt(3) / 2);\r\n          let limed = (x + r * Math.sqrt(3) / 2);\r\n          let startx = (limst < timeLineScale_linear((startS))) ? (timeLineScale_linear((startS))) : (limst);\r\n          let endx = (limed > timeLineScale_linear((endS))) ? (timeLineScale_linear((endS))) : (limed);\r\n          // let midx = timeLineScale_linear((endS + startS) / 2);\r\n          let midx = (startx + endx) / 2;\r\n          let ys = y;\r\n          let yz = y - timeLineHighScale_linear((duration));\r\n          linePoint[t]['x'] = midx;\r\n          linePoint[t]['y'] = y - timeLineHighScale_linear(duration) / 1.7;\r\n          // if (startx < (lineData[lineData.length - 1][0])) {\r\n          if (t > 0) {\r\n            lineData.splice(lineData.length - 1, 1);\r\n            midx += t * 5;\r\n            startx = midx - ((midx - (lineData[lineData.length - 1][0] + midx) / 2)) / 2;\r\n            endx += t * 5;\r\n            ys = y + (y - lineData[lineData.length - 1][1]) / 3\r\n          }\r\n          // }\r\n          lineData.push([startx, ys], [midx, yz], [endx, y])\r\n          // let startx = timeLineScale_linear((startS - duration * 10));\r\n          // let endx = timeLineScale_linear((endS + duration * 10));\r\n\r\n          // let startyf = y + timeLineHighScale_linear((duration)) / 8;\r\n          // let startyf1 = y + timeLineHighScale_linear((duration)) / 8;\r\n          // let endyf = y + timeLineHighScale_linear((duration)) / 8;\r\n          // let endyf1 = y + timeLineHighScale_linear((duration)) / 8;\r\n          // let yz = y - timeLineHighScale_linear((duration));\r\n          // let midx = timeLineScale_linear((endS + startS) / 2);\r\n          // linePoint[t]['x'] = midx;\r\n          // linePoint[t]['y'] = y - timeLineHighScale_linear(duration) / 1.7;\r\n          // let y1 = y;\r\n          // if (startx < (lineData[lineData.length - 1][0])) {\r\n          //   if (t > 0) {\r\n          //     lineData.splice(lineData.length - 3, 3);\r\n          //     startx = (lineData[lineData.length - 1][0] + midx) / 2;\r\n          //     y1 = lineData[lineData.length - 1][1] + timeLineHighScale_linear((duration)) / 2;\r\n          //     startyf = lineData[lineData.length - 1][1] + timeLineHighScale_linear((duration)) / 2;\r\n          //     startyf1 = lineData[lineData.length - 1][1] + timeLineHighScale_linear((duration)) / 2;\r\n          //   }\r\n          // }\r\n          // let startx1 = startx + (timeLineScale_linear((startS + duration)) - timeLineScale_linear((startS)));\r\n          // let endx1 = endx - (timeLineScale_linear((startS + duration)) - timeLineScale_linear((startS)));\r\n          // let startx2 = startx1 + (timeLineScale_linear((startS + duration)) - timeLineScale_linear((startS)));\r\n          // let endx2 = endx1 - (timeLineScale_linear((startS + duration)) - timeLineScale_linear((startS)));\r\n          // if (endx > (r + x)) endx = r + x;\r\n          // if (startx1 < (lineData[lineData.length - 1][0])) startx1 = lineData[lineData.length - 1][0];\r\n          // if (endx1 > (r + x)) endx1 = r + x;\r\n          // if (startx2 < (lineData[lineData.length - 1][0])) startx2 = lineData[lineData.length - 1][0];\r\n          // if (endx2 > (r + x)) endx2 = r + x;\r\n          // lineData.push([startx, y1], [startx1, startyf1], [startx2, startyf], [midx, yz], [endx2, endyf], [endx1, endyf1], [endx, y])\r\n        }\r\n        lineData.push([x + r, y])\r\n        let curve_generator = d3.line()\r\n          .x((d) => d[0])\r\n          .y((d) => {\r\n            let h = Math.sqrt(Math.pow(r, 2) - Math.pow((d[0] - (x - r)), 2));\r\n            if ((y - d[1]) > (h + r * Math.sqrt(3) / 2))\r\n              return y - (h + r * Math.sqrt(3) / 2) + 2;\r\n            return d[1];\r\n          })\r\n          .curve(d3.curveBundle)\r\n        // .curve(d3.curveCatmullRom  )\r\n        // .curve(d3.curveBasis)\r\n        _this.drawTimeLine(svg, curve_generator(lineData), \"white\", 2, '0', 'sonLine ', 'sonLine ');\r\n\r\n        for (let p = 0; p < linePoint.length; p++) {\r\n          _this.drawCircle(svg, linePoint[p]['x'], linePoint[p]['y'], 5, \"red\", linePoint[p], 0, \"linePoint\", \"linePoint_\" + linePoint[p]['id']);\r\n        }\r\n\r\n        // \"1\": \"rgb(145, 204, 117)\",\r\n        //   \"2\": \"rgb(84, 112, 198)\",\r\n        //   \"3\": \"rgb(238, 102, 102)\",\r\n        let typeColor = {\r\n          \"1\": \"#ff9c9c\",\r\n          \"2\": \"#f4f4d0\",\r\n          \"3\": \"#6f8be0\",\r\n        };\r\n        let duration = tools.time2seconds(data['time'][0]) - tools.time2seconds(data['time'][1]);\r\n        let typeData = data['attribute']['expressions'];\r\n        let sonList = data['son'];\r\n        let sons = [sonList];\r\n        while (sons.length > 0) {\r\n          let curSonList = sons[0];\r\n          sons.splice(0, 1);\r\n          if (curSonList.length > 0) {\r\n            for (let s in curSonList) {\r\n              let sonData = oData.find(function (d) { return d['id'] == curSonList[s] });\r\n              let sonTypeData = sonData['attribute']['expressions'];\r\n\r\n              for (let t in sonTypeData) {\r\n                let typeDurition = sonTypeData[t];\r\n                for (let d in typeDurition) {\r\n                  typeData[t].push(typeDurition[d])\r\n                }\r\n              }\r\n              sons.push(sonData['son']);\r\n            }\r\n          }\r\n        }\r\n        var typeStartR = 0//Math.PI/4;\r\n\r\n        var typeStepR = Math.PI / 1;\r\n\r\n        if (sonList.length > 0) {\r\n          let typeTotalDur = 0;\r\n          for (let t in typeData) {\r\n            let typeDurition = typeData[t];\r\n            for (let d in typeDurition) {\r\n              typeTotalDur += (tools.time2seconds(typeDurition[d][1]) - tools.time2seconds(typeDurition[d][0]))\r\n            }\r\n          }\r\n          let typeArcScale_linear = d3.scaleLinear([0, typeTotalDur], [0, Math.PI * 2]);\r\n          for (let i in typeData) {\r\n            let color = typeColor[i];\r\n            let typeDurition = typeData[i];\r\n            let totalTypeSeconds = 0;\r\n            for (let d in typeDurition) {\r\n              totalTypeSeconds += (tools.time2seconds(typeDurition[d][1]) - tools.time2seconds(typeDurition[d][0]))\r\n            }\r\n            if (totalTypeSeconds > 0) {\r\n              let typeStepR = typeArcScale_linear(totalTypeSeconds)//Math.PI/2;\r\n\r\n              let endAnglet = typeStartR + 1 * typeStepR\r\n              var dataset = { startAngle: typeStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n              typeStartR = endAnglet;\r\n              var arcPath = d3.arc()\r\n                .innerRadius(r + 10)\r\n                .outerRadius(r + 25);\r\n              var pathArc = arcPath(dataset);\r\n              _this.drawArc(svg, x, y - r / 2, pathArc, color, color, 'type f' + data['id'] + \" t\" + i);\r\n            }\r\n          if((copy!=0)&&(jg2==0)){\r\n            jg2=1;\r\n              ang2 = dataset.startAngle+Math.PI/2\r\n            }\r\n          }\r\n          let sonTotal = 0;\r\n          let sonNum = 0\r\n          for (let s in sonList) {\r\n            let sonData = oData.find(function (d) { return d['id'] == sonList[s] });\r\n            let sonDur = sonData['totalDuration'];\r\n            sonTotal += sonDur;\r\n            sonNum += 1;\r\n          }\r\n          let skipArc = Math.PI / (sonNum + 2);\r\n          let timeSonLinear = d3.scaleLinear([0, sonTotal], [0, Math.PI - skipArc * (sonNum - 1)]);\r\n          let timeSonHeighLinear = d3.scaleLinear([0, sonTotal], [40, 40]);\r\n\r\n          let timeSonColor_linear = d3.scaleLinear().domain([0, sonTotal]).range([0, 1]);\r\n          let timeSonCompute_color = d3.interpolate(\"white\", circleColor);\r\n          var sonStartR = Math.PI / 2;\r\n\r\n          let relList = [];\r\n          let relRootList = [];\r\n          let psNum = 0.1;\r\n          let daId = data['id']\r\n          let relData = _this.relData;\r\n          let odData = _this.data;\r\n          let basicRel = relData['basicRel'];\r\n          for (let re = 0; re < basicRel.length; re++) {\r\n\r\n            let sorceId = basicRel[re][0];\r\n            let targetId = basicRel[re][1];\r\n            let cNode = '';\r\n            if (sorceId == daId) {\r\n              cNode = odData.find(function (d) { return parseInt(d['id']) == parseInt(targetId) });\r\n              relList.push(targetId);\r\n            }\r\n\r\n            if (targetId == daId) {\r\n              cNode = odData.find(function (d) { return parseInt(d['id']) == parseInt(sorceId) });\r\n              relList.push(sorceId);\r\n            }\r\n          };\r\n          if (relList.length == 0) {\r\n            sonStartR = 0;\r\n            timeSonLinear = d3.scaleLinear([0, sonTotal], [0, Math.PI * 2 - skipArc * (sonNum)]);\r\n          }\r\n\r\n          for (let s in sonList) {\r\n            let sonData = oData.find(function (d) { return d['id'] == sonList[s] });\r\n            let sonDur = sonData['totalDuration'];\r\n\r\n            let sonStepR = timeSonLinear(sonDur)//Math.PI/2;\r\n\r\n            let endAnglet = sonStartR + sonStepR;\r\n            var dataset = { startAngle: sonStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n            sonStartR = endAnglet;\r\n            let color = 'blue';\r\n            var arcPath = d3.arc()\r\n              .innerRadius(r + 28)\r\n              .outerRadius(r + timeSonHeighLinear(sonDur));\r\n            var arcMidPath = d3.arc()\r\n              .innerRadius(0)\r\n              .outerRadius(r + 32);\r\n            var pathArc = arcPath(dataset);\r\n\r\n            endAnglet = sonStartR + skipArc;\r\n            var midDataset = { startAngle: sonStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n\r\n            let jiantouPath = d3.path();\r\n            jiantouPath.arc(x, y - r / 2, r + 32, sonStartR - Math.PI / 2, endAnglet - Math.PI / 2);\r\n\r\n            sonStartR += skipArc;\r\n            var pathMidArc = arcMidPath(midDataset);\r\n            let timeSonColor = compute_color(color_linear(sonData['attribute']['importance']));\r\n            _this.drawArc(svg, x, y - r / 2, pathArc, timeSonColor, timeSonColor, 'son f' + data['id'] + \" s\" + sonList[s], '0');\r\n            if (s != sonList.length - 1) {\r\n\r\n              // console.log\r\n              _this.drawTimeLine(svg, jiantouPath, \"rgb(200,200,200)\", 3, '9,5', 'midArc ', 'midArc ');\r\n              // _this.drawTimeLine(_this.arcG, path, \"white\", 2,'0', 'sonLine ', 'sonLine ');\r\n              // _this.drawArc(_this.arcG, x, y - r / 2, pathMidArc, \"rgb(200,200,200)\", \"white\", 'son f' + data['id'], \"9,5\", 3);\r\n            }\r\n            \r\n          if((copy!=0)){\r\n            jg3=1;\r\n              ang3 = (dataset.endAngle+dataset.startAngle)/2+Math.PI/2\r\n            }\r\n          }\r\n        };\r\n        \r\n        if((copy!=0)){\r\n              // jg2=1\r\n              path1.moveTo(10, 155)\r\n              path1.lineTo(120,155)\r\n              // let ang = da.startAngle+0.001+Math.PI/2\r\n              _this.drawTxt(svg, 60, 120, 80, [\"Concept\",\"Time\",\"Distribution\"], \"grey\", 15, `texts_1`);\r\n              path1.lineTo(lineData[0][0],lineData[0][1])\r\n              // path2.lineTo((x-(r + inter + h)*Math.cos(ang)),(y-r/2-(r + inter + h)*Math.sin(ang)))\r\n              _this.drawTimeLine(svg, path1, \"rgb(200,200,200)\", 2, '9,5', 'mm ', 'mm ');\r\n              if(jg2==1){\r\n              path2.moveTo(550, 35)\r\n              path2.lineTo(320,35)\r\n              _this.drawTxt(svg, 360, 20, 80, [\"Course Style\"], \"grey\", 15, `texts_1`);\r\n              path2.lineTo((x-(r +25)*Math.cos(ang2)),(y-r/2-(r +25)*Math.sin(ang2)))\r\n              _this.drawTimeLine(svg, path2, \"rgb(200,200,200)\", 2, '9,5', 'mm ', 'mm ');}\r\n            }\r\n              if(jg3==1){\r\n              path3.moveTo(550, 235)\r\n              path3.lineTo(320,235)\r\n              let ang3 = Math.PI*(1/2+1-0.05)\r\n              _this.drawTxt(svg, 360, 200, 80, [\"Subconcept\",\"Distribution\"], \"grey\", 15, `texts_1`);\r\n              path3.lineTo((x-(r +32)*Math.cos(ang3)),(y-r/2-(r +32)*Math.sin(ang3)))\r\n              _this.drawTimeLine(svg, path3, \"rgb(200,200,200)\", 2, '9,5', 'mm ', 'mm ');\r\n            }\r\n      }\r\n      let txts = data['name'].split(\" \")\r\n      let tx = x - r - 30;\r\n      let ty = y + r + 60;\r\n      let tw = r * 2;\r\n      tx = x;\r\n      if (data['son'].length == 0) {\r\n        tx = x//-r-10;\r\n        ty = y + r * 2;\r\n      }\r\n      // if (data['id'] == \"3\") {\r\n      //   tx = x - 10;\r\n      //   ty = y + r * 2;\r\n      // }\r\n      // if (data['id'] == \"4\") {\r\n      //   tx = x + 10;\r\n      //   ty = y + r * 2;\r\n      // }\r\n      // if(data['type']=='1'){\r\n      //   tx = x-r/2;\r\n      //   ty = y+r*2;\r\n      // }\r\n\r\n      _this.drawTxt(svg, tx, ty, tw, txts, \"grey\", 16, `text_${data['id']}`);\r\n    },\r\n    drawArc(svg, x, y, arcPath, stroke, fill, className, stroke_dasharray = \"0\", width = 3, opacity = 1) {\r\n      let arc = svg.append(\"path\")\r\n        .attr(\"d\", arcPath)\r\n        .attr(\"class\", className)\r\n        .attr(\"transform\", \"translate(\" + x + \",\" + y + \")\")\r\n        .attr(\"stroke\", stroke)\r\n        .attr('stroke-width', width)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n        .attr(\"fill\", fill)\r\n        .attr(\"opacity\", opacity);\r\n      return arc;\r\n    },\r\n    drawCircle(svg, x, y, r, fill, data, opacity, className, idName) {\r\n      const _this = this;\r\n      const oData = _this.data\r\n      svg.append(\"circle\")\r\n        .attr(\"id\", idName)\r\n        .attr(\"class\", className)\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"cx\", x)\r\n        .attr(\"cy\", y)\r\n        .attr(\"r\", r)\r\n        .attr(\"fill\", fill)\r\n        .on(\"mouseover\", function (d) {\r\n          d3.select(this).attr(\"r\", r * 1.1)\r\n          let classN = d3.select(this).attr(\"class\");\r\n          let idN = d3.select(this).attr(\"id\").split(\"_\")[1]\r\n          _this.overEntityId = idN\r\n          let showRel = _this.showEntityRelIdList\r\n          if (!showRel.includes(parseInt(idN))) {\r\n            showRel.push(parseInt(idN))\r\n            _this.showEntityRelIdOverState = 0;\r\n          }\r\n          else {\r\n            _this.showEntityRelIdOverState = 1;\r\n          }\r\n          _this.showEntityRelIdList = showRel;\r\n          if (classN == 'linePoint') {\r\n            d3.select(this).attr(\"opacity\", 1).attr(\"r\", 5)\r\n          }\r\n          else {\r\n            d3.selectAll(\".f\" + data['id'])\r\n              .attr(\"transform\", function (d) {\r\n                let transformd = d3.select(this).attr(\"transform\")\r\n                return transformd.split(\" \")[0] + \" scale(1.1)\"\r\n              })\r\n\r\n            d3.selectAll(\".basicRel\")\r\n              .attr(\"class\", function (d) {\r\n                let classN = d3.select(this).attr(\"class\");\r\n                let classNList = classN.split(\" \");\r\n                let jg = 0;\r\n                for (let i = 0; i < classNList.length - 1; i++) {\r\n                  if ('source' + data['id'] == classNList[i]) { jg = 1; }\r\n                  if ('target' + data['id'] == classNList[i]) { jg = 1; }\r\n                }\r\n                if (jg == 1) {\r\n                  // classN += \" activeS\";\r\n                }\r\n                return classN;\r\n              })\r\n          }\r\n        })\r\n        .on(\"mouseleave\", function (d) {\r\n          d3.select(this).attr(\"r\", r)\r\n\r\n          _this.overEntityId = \"\"//_this.curEntId;\r\n          let classN = d3.select(this).attr(\"class\");\r\n\r\n          let idN = d3.select(this).attr(\"id\").split(\"_\")[1]\r\n          let showRel = _this.showEntityRelIdList\r\n          if (_this.showEntityRelIdOverState == 1) {\r\n            showRel.push(parseInt(idN))\r\n          }\r\n          else {\r\n            showRel.splice(showRel.indexOf(parseInt(idN)), 1)\r\n          }\r\n          _this.showEntityRelIdList = showRel;\r\n\r\n          if (classN == 'linePoint') {\r\n            d3.select(this).attr(\"opacity\", 0).attr(\"r\", 5)\r\n          }\r\n          else {\r\n            d3.selectAll(\".f\" + data['id'])\r\n              .attr(\"transform\", function (d) {\r\n                let transformd = d3.select(this).attr(\"transform\")\r\n                return transformd.split(\" \")[0] + \" scale(1)\"\r\n              })\r\n            d3.select(\"#graphPanel\").selectAll(\"path\")\r\n              .attr(\"class\", function (d) {\r\n                let thisSelect = d3.select(this)\r\n                let classN = thisSelect.attr(\"class\");\r\n                let classNList = classN.split(\" \")\r\n                if (classNList[classNList.length - 1] == \"activeS\") {\r\n                  classN = \"\";\r\n                  for (let i = 0; i < classNList.length - 1; i++) {\r\n                    classN += \" \" + classNList[i];\r\n                  }\r\n                }\r\n                return classN\r\n              })\r\n          }\r\n        })\r\n        .on(\"click\", function (d) {\r\n\r\n          let idN = d3.select(this).attr(\"id\").split(\"_\")[1]\r\n          let showRel = _this.showEntityRelIdList;\r\n          //  - _this.showEntityRelIdOverState;\r\n          if (!showRel.includes(parseInt(idN))) {\r\n            showRel = [(parseInt(idN))]\r\n            _this.showEntityRelIdOverState = 1;\r\n          }\r\n          else if (showRel.includes(parseInt(idN))) {\r\n            // showRel.filter(item=>{return item==parseInt(idN)})\r\n            _this.showEntityRelIdOverState = 0;\r\n            showRel.splice(showRel.indexOf(parseInt(idN)), 1)\r\n          }\r\n          _this.showEntityRelIdList = showRel;\r\n\r\n          d3.select(this).attr(\"r\", r);\r\n          d3.selectAll(\".f\" + data['id'])\r\n            .attr(\"transform\", function (d) {\r\n              let transformd = d3.select(this).attr(\"transform\")\r\n              return transformd.split(\" \")[0] + \" scale(1)\"\r\n            })\r\n          let thisId = this.id.split(\"_\")[1];\r\n          _this.curEntId = thisId;\r\n          let thisData = _this.drawEntityLocation.find(function (a) { return a['id'] == thisId })\r\n          let thisTime = thisData['time'];\r\n          _this.click_Ent(thisTime);\r\n          let psvg = d3.select(\"#entG\");\r\n          let dw = psvg.attr(\"width\");\r\n          let dh = psvg.attr(\"height\");\r\n          psvg.remove();\r\n          let svg = d3.select('#editEnt').append(\"g\").attr(\"id\", \"entG\").attr(\"width\", dw).attr(\"height\", dh);\r\n          _this.drawEntity(svg, dw/2, 100, r, thisData,1)\r\n          // if (thisData['type'] == 0 ) {\r\n            _this.drawEntityTimeAxis(svg,thisData,[dw/2,100,r]);\r\n        // }\r\n          // console.log(thisTime,thisId,thisData)\r\n        })\r\n        .on(\"contextmenu\", function (d, i) {\r\n          d.preventDefault();\r\n\r\n          if (_this.btnEdi) {\r\n            _this.editDivShow = true;\r\n            _this.$refs.editDiv.style.top = `${d.clientY}px`;\r\n            _this.$refs.editDiv.style.left = `${d.clientX}px`;\r\n          }\r\n          else {\r\n            let thisId = this.id.split(\"_\")[1];\r\n            let thisShowEntityData = _this.showEntityList.find(function (d) { return d['id'] == thisId });\r\n            let thisSons = thisShowEntityData['son'];\r\n            if (thisSons.length != 0) {\r\n              let sons = tools.deepClone(thisSons);\r\n              let showJage = false;\r\n              let i = 0\r\n              while ((sons.length > 0)) {\r\n                let s = sons[0];\r\n                sons.splice(0, 1);\r\n                let curson = _this.showEntityList.find(function (d) { return d['id'] == s + '' })\r\n                if (i == 0) {\r\n                  i++;\r\n                  showJage = !curson['show']\r\n                }\r\n                // ['show'] = !_this.showEntityList.find(function (d) { return d['id'] == thisSons[s] })['show']\r\n                curson['show'] = showJage;\r\n                let curgson = curson['son'];\r\n                if (!showJage) {\r\n                  for (let gs = 0; gs < curgson.length; gs++) {\r\n                    sons.push(curgson[gs]);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          _this.updataGraph()\r\n        });\r\n      // .on(\"\")\r\n    },\r\n    drawRect(svg, x, y, w, h, rx, ry, fill, opacity, stroke, id = 'rect', strokeW = 1.5, classN = 'rect') {\r\n      d3.select(`#${id}`).remove()\r\n      let rect = svg.append(\"rect\")\r\n        .attr(\"id\", id)\r\n        .attr(\"class\", classN)\r\n        .attr(\"x\", x)\r\n        .attr(\"y\", y)\r\n        .attr(\"rx\", rx)\r\n        .attr(\"ry\", ry)\r\n        .attr(\"height\", h)\r\n        .attr(\"width\", w) //刚才设置的块的宽度\r\n        .attr(\"fill\", fill)\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"stroke\", stroke)\r\n        .attr(\"stroke-width\", `${strokeW}px`);\r\n      return rect;\r\n    },\r\n    drawTxt(svg, x, y, width, txts, fill, fontsize = 12, idN, classN = \"text\") {\r\n      let tx = x;\r\n      let ty = y;\r\n      let preWidth = 0;\r\n      let preIdN = 0;\r\n      let pretext = ''\r\n      for (let t = 0; t < txts.length; t++) {\r\n        pretext += \" \" + txts[t];\r\n        let txt = svg.append(\"text\")\r\n          .attr(\"y\", ty)\r\n          .attr(\"x\", tx)\r\n          .attr(\"id\", `${idN}_${t}`)\r\n          .attr(\"class\", `${classN}`)\r\n          .attr(\"fill\", fill)\r\n          .attr(\"font-size\", fontsize)\r\n          .style(\"text-anchor\", \"middle\")\r\n          .text(pretext)\r\n        let textWidth = document.getElementById(`${idN}_${t}`).getBBox().width;\r\n        if ((textWidth > width) || (t == txts.length - 1)) {\r\n          pretext = '';\r\n          tx = x;\r\n          ty += 25;\r\n        }\r\n        else {\r\n          txt.remove()\r\n        }\r\n        preWidth += textWidth;\r\n      }\r\n    },\r\n    drawTimeLine(svg, path, stroke, width, stroke_dasharray = \"0\", idName, className) {\r\n      svg.append('path')\r\n        .attr('d', path.toString())\r\n        .attr('stroke', stroke)\r\n        .attr('class', className)\r\n        .attr('id', idName)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr('stroke-width', width)\r\n        .attr('fill', 'none')\r\n        .on('mouseover', function (d) {\r\n          let thisSelect = d3.select(this)\r\n          let classN = thisSelect.attr(\"class\");\r\n          let idN = thisSelect.attr(\"id\");\r\n          if (classN.split(\" \")[0] == \"basicRel\") {\r\n            // d3.select(this).attr(\"class\", classN + \" activeS\");\r\n          }\r\n        })\r\n        .on('mouseleave', function (d) {\r\n          let thisSelect = d3.select(this)\r\n          let classN = thisSelect.attr(\"class\");\r\n          let classNList = classN.split(\" \")\r\n          if (classNList[classNList.length - 1] == \"activeS\") {\r\n            classN = \"\";\r\n            for (let i = 0; i < classNList.length - 1; i++) {\r\n              classN += classNList[i] + \" \";\r\n            }\r\n            d3.select(this).attr(\"class\", classN);\r\n          }\r\n        })\r\n    },\r\n    transformGraphSvg(flag) {\r\n      const _this = this;\r\n      let groups = _this.groupsSvg;\r\n\r\n      let scalePre = _this.graphSvgScale;\r\n\r\n      let margin = _this.margin;\r\n      if (flag == 'left') {\r\n        _this.graphGTransformX += 10;\r\n      }\r\n      if (flag == 'right') {\r\n        _this.graphGTransformX -= 10;\r\n      }\r\n      // groups.attr('transform', 'translate(' + (_this.graphGTransformX) + ',' + (margin.top) + ') scale(' + (scalePre) + ')')\r\n    },\r\n    updataAssistGraphPanel() {\r\n      const _this = this;\r\n      var content = this.groupsSvg.html();\r\n      let height = document.getElementById(\"assistGraphPanel\").clientHeight;\r\n      let width = document.getElementById(\"assistGraphPanel\").clientWidth;\r\n      d3.select('#assistGraphPanel').select('svg').remove();\r\n      let transX = _this.assistGTransformX;\r\n      let transY = _this.assistGTransformY;\r\n      var div = d3.select('#assistGraphPanel')\r\n        .append('svg')\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n        .append(\"g\")\r\n        .attr(\"transform\", `translate(${transX},${transY})`)\r\n        .html(content);\r\n    },\r\n    moveGraphLeft(e) {\r\n      const _this = this;\r\n      _this.moveFlag == true;\r\n      clearInterval(this.moveTimer)// 清除定时器\r\n      this.moveTimer = setInterval(() => { _this.transformGraphSvg(\"left\") }, 10)//_this.transformGraphSvg('left'), 100);\r\n    },\r\n    moveGraphRight(e) {\r\n      const _this = this;\r\n      // console.log(\"⚡🐲🫧❄️👁️\",e)\r\n      clearInterval(this.moveTimer)// 清除定时器\r\n      _this.moveFlag == true;\r\n      this.moveTimer = setInterval(() => { _this.transformGraphSvg(\"right\") }, 10)//_this.transformGraphSvg('left'), 100);\r\n    },\r\n    leaveGraphMove() {\r\n      // this.moveFlag == false;\r\n      clearInterval(this.moveTimer)// 清除定时器\r\n      // this.graphGTransformX = 0;\r\n    },\r\n    updataGraph() {\r\n      var _this = this;\r\n      let margin = _this.margin\r\n      let width = _this.$refs.graphDiv.offsetWidth - margin.left - margin.right;\r\n      let height = document.getElementById(\"graphPanel\").clientHeight - margin.top - margin.bottom;\r\n      let heightTimeAxis = document.getElementById(\"graphTimeAxisPanel\").clientHeight - margin.top - margin.bottom;\r\n      _this.width = width;\r\n      _this.height = height;\r\n      d3.select(\"#graphPanel\").select(\"svg\").remove()\r\n      var svg = d3.select(\"#graphPanel\").append(\"svg\")\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height);\r\n      _this.rootSvg = svg;\r\n      d3.select(\"#graphTimeAxisPanel\").select(\"svg\").remove()\r\n      var TimeAxisSvg = d3.select(\"#graphTimeAxisPanel\").append(\"svg\")\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height);\r\n      _this.TimeAxisSvg = TimeAxisSvg;\r\n      let data = _this.data;\r\n\r\n      let maxDImportance = Math.max.apply(Math, data.map(function (d) { return d['attribute']['importance']; }))\r\n      let minDImportance = Math.min.apply(Math, data.map(function (d) { return d['attribute']['importance']; }))\r\n      let maxDRelevance = Math.max.apply(Math, data.map(function (d) { return d['attribute']['relevance']; }))\r\n      let minDRelevance = Math.min.apply(Math, data.map(function (d) { return d['attribute']['relevance']; }))\r\n      let maxDDuration = Math.max.apply(Math, data.map(function (d) { return tools.time2seconds(d['time'][1]) - tools.time2seconds(d['time'][0]); }))\r\n      let maxTotalDuration = Math.max.apply(Math, data.map(function (d) { return d['totalDuration']; }))\r\n      _this.drawEntityLocation = [];\r\n      _this.minDImportance = minDImportance;\r\n      _this.maxDImportance = maxDImportance;\r\n      _this.minDRelevance = minDRelevance;\r\n      _this.maxDRelevance = maxDRelevance;\r\n      _this.maxDDuration = maxDDuration;\r\n      _this.maxTotalDuration = maxTotalDuration;\r\n\r\n      let currentMaxColor = _this.importanceMaxColor;\r\n      let currentMinColor = _this.importanceMinColor;\r\n      _this.importanceColor_linear = d3.scaleLinear().domain([minDImportance, maxDImportance]).range([0, 1]);\r\n      _this.$bus.$emit(\"importanceLinear\", [minDImportance, maxDImportance]);\r\n      _this.importanceCompute_color = d3.interpolate(currentMinColor, currentMaxColor);\r\n      _this.relevanceScale_linear = d3.scaleLinear([minDRelevance, maxDRelevance], [20, 50])\r\n      _this.totalDurationScale_linear = d3.scaleLinear().domain([0, maxTotalDuration]).range([20, 60]);\r\n\r\n      _this.drawMain(svg);\r\n      // });\r\n    },\r\n    zoomInLayoutClk() {\r\n      const _this = this;\r\n      _this.layoutShow += 1;\r\n      if (_this.layoutShow > 3) {\r\n        _this.layoutShow = 3;\r\n      }\r\n      // _this.updataGraph();\r\n    },\r\n    zoomOutLayoutClk() {\r\n      const _this = this;\r\n      _this.layoutShow -= 1;\r\n      if (_this.layoutShow < 0) {\r\n        _this.layoutShow = 0;\r\n      }\r\n      // _this.updataGraph();\r\n\r\n    },\r\n    click_Ent(time) {\r\n      this.$emit(\"timeDur\", time);\r\n    },\r\n  },\r\n  created() {\r\n    var _this = this;\r\n    let margin = _this.margin\r\n    this.$nextTick(() => {\r\n      _this.updataGraph();\r\n      _this.updataAssistGraphPanel();\r\n    });\r\n  },\r\n  mounted() {\r\n    const _this = this;\r\n    let width = _this.$refs.graphDiv.offsetWidth;\r\n    let height = _this.height;\r\n    let showEntityList = tools.deepClone(_this.data);\r\n    for (let e in showEntityList) {\r\n      showEntityList[e]['show'] = true;\r\n    }\r\n    _this.showEntityList = showEntityList;\r\n    // let width = _this.width;\r\n    this.$bus.$on('graphData', (val) => {\r\n      _this.data = val;\r\n      let showEntityList = tools.deepClone(_this.data);\r\n      for (let e in showEntityList) {\r\n        showEntityList[e]['show'] = true;\r\n      }\r\n      _this.showEntityList = showEntityList;\r\n      _this.updataGraph();\r\n    });\r\n    this.$bus.$on('topicRectup', (val) => {\r\n      _this.editConfirm();\r\n    });\r\n    this.$bus.$on('switchL', (val) => {\r\n      _this.switchL = val;\r\n    });\r\n\r\n    // this.$refs.moveGraphLeft.addEventListener(\"mouseover\", _this.moveGraphLeft); // 监听点击事件\r\n    // this.$refs.moveGraphRight.addEventListener(\"mousemove\", _this.moveGraphRight); // 监听点击事件\r\n    // this.$refs.moveGraphLeft.addEventListener(\"mouseleave\", _this.leaveGraphMove); // 监听点击事件\r\n    // this.$refs.moveGraphRight.addEventListener(\"mouseleave\", _this.leaveGraphMove); // 监听点击事件\r\n\r\n  },\r\n  beforeDestroy() {\r\n    clearInterval(this.moveTimer);\r\n  },\r\n} \r\n</script>\r\n\r\n<style>@import './index.css';</style>\r\n"],"sourceRoot":"src/components/Graph"}]}