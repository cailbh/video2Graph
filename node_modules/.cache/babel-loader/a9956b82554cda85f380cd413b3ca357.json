{"remainingRequest":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\babel-loader\\lib\\index.js!D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Cailibuhong\\video2Graph\\video2Graph\\src\\components\\OverviewPanel\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\src\\components\\OverviewPanel\\index.vue","mtime":1690984231692},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\babel.config.js","mtime":1647570572000},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1688115046166},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\babel-loader\\lib\\index.js","mtime":1688115046651},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1688115046166},{"path":"D:\\Cailibuhong\\video2Graph\\video2Graph\\node_modules\\vue-loader\\lib\\index.js","mtime":1688115046800}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<!-- eslint-disable no-unused-vars -->\r\n<!-- eslint-disable no-unused-vars -->\r\n\r\n<template>\r\n  <div class=\"overviewPanel\">\r\n    <div class=\"panelHead\">Overview</div>\r\n    <div id=\"overviewPanelDiv\" class=\"panelBody\" ref=\"overviewPanelDiv\">\r\n\r\n      <div class=\"chartTooltip\">\r\n        <p>\r\n          <br /><strong class=\"name\"></strong>\r\n        </p>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nimport * as d3 from 'd3'\r\nimport { onMounted, ref } from 'vue';\r\nimport filenames from \"@/utils/fileName\";\r\nimport domtoimage from 'dom-to-image';\r\nimport TestJson from \"@/assets/json/case1_fin.json\";\r\nimport TestRelJson from \"@/assets/json/case1_fin_rel.json\";\r\nimport tools from \"@/utils/tools.js\";\r\nimport { color } from 'd3';\r\n\r\nexport default {\r\n  props: [\"videoTime\"],\r\n  data() {\r\n    return {\r\n      data: TestJson,\r\n      relData: TestRelJson,\r\n      fatherMap: {},\r\n      treeData: [],\r\n      nameTextIds: [],\r\n      textG: '',\r\n      colorMap: {},\r\n      rootColorMap: {},\r\n      overEntityId: \"\",\r\n      margin: { top: 15, right: 5, bottom: 5, left: 5 },\r\n      // mcolor: [\r\n      //   \"rgb(255,60,60)\",\r\n      //   \"rgb(155,20,100)\",\r\n      //   \"rgb(255,83,255)\",\r\n      //   \"rgb(200,100,50)\",\r\n      //   \"rgb(235,135,162)\",\r\n      //   \"rgb(200,200,102)\",\r\n      //   \"rgb(255,178,101)\",\r\n      //   \"rgb(63,151,134)\",\r\n      //   \"rgb(83,155,255)\",\r\n      //   \"rgb(50,200,120)\",\r\n      //   \"rgb(2,50,200)\",\r\n      //   \"rgb(0,122,244)\",\r\n      //   \"rgb(150,122,244)\",\r\n      //   \"rgb(168,168,255)\",\r\n      //   \"rgb(200,200,200)\",\r\n      // ],\r\n      mcolor: [\r\n        \"rgb(91, 107, 255)\",\r\n        \"rgb(6, 214, 160)\",\r\n        \"rgb(255, 120, 90)\",\r\n        \"rgb(125, 98, 211)\",\r\n        \"rgb(255, 113, 212)\",\r\n        \"rgb(112, 214, 255)\",\r\n        \"rgb(255, 159, 28)\",\r\n        \"rgb(255, 77, 109)\",\r\n      ],\r\n      mLightcolor: [\r\n        \"#ff9c9c\",\r\n        \"#cc88b0\",\r\n        \"#ffa8ff\",\r\n        \"#e3b097\",\r\n        \"#f4c3d0\",\r\n        \"#f4f4d0\",\r\n        \"#ffd8b1\",\r\n        \"#9ecac2\",\r\n        \"#a8ccff\",\r\n        \"#97e3ba\",\r\n        \"#6f8be0\",\r\n        \"rgb(0,122,244)\",\r\n        \"#b6a2f7\",\r\n        \"rgb(168,168,255)\",\r\n        \"rgb(200,200,200)\",\r\n      ],\r\n    };\r\n  },\r\n  watch: {\r\n    type(val) {\r\n    },\r\n    treeData(val) {\r\n      this.drawoverView();\r\n    },\r\n    overEntityId(val) {\r\n      const _this = this;\r\n\r\n      if (val != '') {\r\n        let textId = tools.deepClone(val);\r\n        if (_this.nameTextIds.indexOf(textId) == -1) {\r\n          while (textId != 'root') {\r\n            _this.nameTextIds.push(textId);\r\n            textId = _this.fatherMap[textId];\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        _this.nameTextIds = []\r\n      }\r\n\r\n    },\r\n    nameTextIds(ids) {\r\n      const _this = this;\r\n      let data = _this.data;\r\n      let tx = 50;\r\n      let ty = 600;\r\n      let colorMap = this.colorMap;\r\n      _this.textPathG.select(\"g\").remove();\r\n      let g = _this.textPathG.append(\"g\");\r\n      d3.selectAll(`.curOverArc`).style(\"filter\", \"url()\")\r\n      for (let i = ids.length - 1; i >= 0; i--) {\r\n      d3.selectAll(`.na_${ids[i]}`).style(\"filter\", \"url(#coolShadow)\")\r\n        let curd = data.find(function (d) { return d['id'] == ids[i]; });\r\n        let name = curd['name'].split(\"_\")[0];\r\n        let nameS = name.split(\" \")\r\n        if(nameS.length>4){\r\n          name = nameS.splice(0,4).join(\" \")+\" ...\"\r\n\r\n        }\r\n        let w = name.length * 10;\r\n        let h = 4;\r\n        let rx = 5;\r\n        let ry = 5;\r\n        let color = colorMap[ids[i]];\r\n        _this.drawRect(g, tx, ty + 5, w, h, rx, ry, color, 0.5, color)\r\n        _this.drawTxt(g, tx, ty, name, \"rgb(60,60,60)\", 0, \"start\", 18);\r\n        tx += name.length * 12;\r\n        if (tx > 900) {\r\n          tx = 10;\r\n          ty += 30;\r\n        }\r\n      }\r\n    },\r\n    data(val) {\r\n    }\r\n  },\r\n  methods: {\r\n    click_Ent(time) {\r\n      this.$emit(\"timeDur\", time);\r\n    },\r\n    drawoverView() {\r\n      const _this = this;\r\n      const margin = _this.margin;\r\n      let data = _this.treeData;\r\n      let width = this.$refs.overviewPanelDiv.offsetWidth - margin.left - margin.right;\r\n      let height = this.$refs.overviewPanelDiv.offsetHeight - margin.top - margin.bottom;\r\n\r\n      // var tree = d3.tree()\r\n      //   .size([width, height - 200]);\r\n      d3.select(\"#overviewPanelDiv\").select(\"svg\").remove();\r\n      var svg = d3.select(\"#overviewPanelDiv\").append(\"svg\")\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n        .attr(\"transform\", \"translate(5,-10)\");\r\n      let sunTreeG = svg.append('g')\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height);\r\n      let riverG = svg.append('g')\r\n        .attr(\"width\", width + 20)\r\n        .attr(\"height\", height)\r\n        .attr(\"transform\", \"translate(35,600)\");\r\n      let textG = svg.append('g')\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height);\r\n      let textPathG = svg.append('g')\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height);\r\n      let toolTipG = svg.append('g')\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height);\r\n\r\n      var defs = svg.append(\"defs\");\r\n\r\n      var filter = defs\r\n        .append(\"filter\")\r\n        .attr(\"id\", \"coolShadow\")\r\n        .attr(\"x\", \"-100%\")\r\n        .attr(\"y\", \"-100%\") //\r\n        .attr(\"width\", \"300%\")\r\n        .attr(\"height\", \"300%\"); //\r\n\r\n      filter\r\n        .append(\"feMorphology\")\r\n        .attr(\"in\", \"SourceGraphic\")\r\n        .attr(\"result\", \"upperLayer\")\r\n        .attr(\"operator\", \"dilate\")\r\n        .attr(\"radius\", \"0.2 0.2\");\r\n\r\n      filter\r\n        .append(\"feMorphology\")\r\n        .attr(\"in\", \"SourceAlpha\")\r\n        .attr(\"result\", \"enlargedAlpha\")\r\n        .attr(\"operator\", \"dilate\")\r\n        .attr(\"radius\", \"0.2 0.2\");\r\n\r\n      filter\r\n        .append(\"feGaussianBlur\")\r\n        .attr(\"in\", \"enlargedAlpha\")\r\n        .attr(\"result\", \"bluredAlpha\")\r\n        .attr(\"stdDeviation\", \"3\");\r\n\r\n      filter\r\n        .append(\"feOffset\")\r\n        .attr(\"in\", \"bluredAlpha\")\r\n        .attr(\"result\", \"lowerLayer\")\r\n        .attr(\"dy\", \"1\"); //\r\n\r\n      var feMerge = filter.append(\"feMerge\");\r\n      feMerge.append(\"feMergeNode\").attr(\"in\", \"lowerLayer\");\r\n      feMerge.append(\"feMergeNode\").attr(\"in\", \"upperLayer\");\r\n\r\n      _this.textG = textG;\r\n      _this.textPathG = textPathG;\r\n\r\n      let centerX = margin.left + (width / 2);\r\n      let centerY = margin.top + (height / 2) - 50;\r\n      const gCircle = svg.append(\"g\");\r\n      // .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\r\n      let curD = tools.deepClone(data);\r\n      // console.log(data,curD)\r\n      // curD['layout'] = '-1';\r\n\r\n      let layout = -1;\r\n      let totalDur = 0\r\n      for (let c in data['children']) {\r\n        if (data['children'][c]['name'] != 'Test') {\r\n          totalDur += data['children'][c]['totalDuration'];\r\n        }\r\n      }\r\n      _this.drawSunTree(sunTreeG, centerX, centerY, curD, layout, totalDur, 0, Math.PI * 2, 0, \"\", \"root\");\r\n      // _this.drawTypeRiver(riverG);\r\n    },\r\n    drawTypeRiver(svg) {\r\n      const _this = this;\r\n      let oriData = _this.data;\r\n      let resData = [];\r\n      let triLi = [];\r\n      let exeLi = [];\r\n\r\n      for (let i = 0; i < oriData.length; i++) {\r\n        let curEnt = oriData[i];\r\n        let tp = {}\r\n        tp['od'] = i;\r\n        if ((curEnt['type'] == \"1\")) {\r\n          triLi.push(tp);\r\n        }\r\n        if (curEnt['type'] == \"2\") {\r\n          exeLi.push(tp);\r\n        }\r\n        let typeData = curEnt[\"attribute\"][\"expressions\"];\r\n        let totalDur = 0;\r\n\r\n        for (let t in typeData) {\r\n          // let color = typeColor[i];\r\n          let typeDurition = typeData[t];\r\n          let totalTypeSeconds = 0;\r\n          for (let d in typeDurition) {\r\n            totalTypeSeconds += (tools.time2seconds(typeDurition[d][1]) - tools.time2seconds(typeDurition[d][0]))\r\n          }\r\n          totalDur += totalTypeSeconds;\r\n          tp[t] = totalTypeSeconds;\r\n        }\r\n        for (let t in tp) {\r\n          if (t != 'od') {\r\n            tp[t] /= totalDur;\r\n            if (totalDur == 0) {\r\n              tp[t] = 0;\r\n            }\r\n          }\r\n        }\r\n        resData.push(tp)\r\n      }\r\n\r\n      let data = resData;\r\n      console.log(data)\r\n      var stack = d3.stack()\r\n        .keys(['1', '2', '3'])\r\n        .order(d3.stackOrderInsideOut)\r\n        .offset(d3.stackOffsetWiggle);\r\n\r\n      let yRangeWidth = 80;\r\n      let xStep = (svg.attr(\"width\") - 80) / oriData.length;\r\n      let yScale = d3.scaleLinear().domain([-1, 1]).range([0, 80]);\r\n      var area = d3.area()\r\n        .curve(d3.curveBasis)\r\n        .x(function (d) {\r\n          return d.data.od * xStep;\r\n        })\r\n        .y0(function (d) {\r\n          return yRangeWidth - yScale(d[0]);\r\n        })\r\n        .y1(function (d) {\r\n          return yRangeWidth - yScale(d[1]);\r\n        });\r\n      console.log(data)\r\n      let stackData = stack(data)\r\n      console.log(data, stackData)\r\n      let lenThreshold = 0.4;\r\n      let iconLi = {}\r\n      for (let s in stackData) {\r\n        iconLi[s] = []\r\n        for (let i in stackData[s]) {\r\n          let lenArea = stackData[s][i]\r\n          if ((lenArea[1] - lenArea[0]) > 0.4) {\r\n            iconLi[s].push([i, lenArea]);\r\n          }\r\n          for (let li in iconLi[s]) {\r\n            if (i < (iconLi[s][li][0] + 2)) {\r\n              let selectArea = iconLi[s][li][1]\r\n              if (((selectArea[1] - lenArea[1]) - (selectArea[0] - lenArea[0])) < 0.2) {\r\n                iconLi[s].splice(s, 1);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // let areaG = svg.append(\"g\")\r\n      let typeColor = {\r\n        \"1\": \"#ff9c9c\",\r\n        \"2\": \"#f4f4d0\",\r\n        \"3\": \"#6f8be0\",\r\n      };\r\n      let colorLi = _this.mcolor;\r\n      svg.selectAll(\"path\")\r\n        .data(stackData)\r\n        .join(\"path\")\r\n        .attr(\"id\", function (d) { return d.key })\r\n        .attr(\"class\", \"river\")\r\n        .attr(\"d\", function (d) {\r\n          return area(d)\r\n        })\r\n        .attr(\"fill\", function (d, i) {\r\n          return typeColor[d.key]\r\n        })\r\n        .on(\"mouseover\", function (d) {\r\n          d3.selectAll(\".river\").style(\"filter\", \"url()\")\r\n          d3.select(this).style(\"filter\", \"url(#coolShadow)\")\r\n        })\r\n\r\n      for (let t in triLi) {\r\n        let area = tools.calcTriangle((triLi[t]['od']) * xStep, -30, 14);\r\n        _this.drawTriangle(svg, \"rgb(250, 199, 88)\", area, \"rgb(250, 199, 88)\");\r\n        _this.drawTxt(svg, (triLi[t]['od']) * xStep, -23, \"T\", \"white\", 0, \"middle\", 18)\r\n      }\r\n      for (let t in exeLi) {\r\n        let area = tools.calcTriangle((exeLi[t]['od']) * xStep, -30, 14);\r\n        _this.drawTriangle(svg, \"rgb(250, 199, 88)\", area, \"rgb(250, 199, 88)\");\r\n        _this.drawTxt(svg, (exeLi[t]['od']) * xStep, -23, \"E\", \"white\", 0, \"middle\", 18)\r\n      }\r\n    },\r\n    drawTriangle(svg, color, points, stroke, opacity = 1) {\r\n      svg.append(\"polygon\")\r\n        .attr(\"points\", points)\r\n        .attr(\"fill\", color)\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"stroke\", stroke)\r\n        .attr(\"stroke-width\", \"5px\");\r\n    },\r\n    drawSunTree(svg, x, y, data, layout, totalDur, startAngle, endAngle, startHeight, curcolor, father) {\r\n      const _this = this;\r\n      var curStartR = tools.deepClone(startAngle);//Math.PI/4;\r\n      let colorList = this.mcolor;\r\n      let stepLayHight = 100;\r\n      if (layout == '-1') {\r\n        stepLayHight = 400;\r\n      }\r\n      if (layout == '0') {\r\n        stepLayHight = 80;\r\n      }\r\n      if (layout == '1') {\r\n        stepLayHight = 30;\r\n      }\r\n      if (layout == '2') {\r\n        stepLayHight = 30;\r\n      }\r\n      let endHeight = startHeight + stepLayHight;\r\n      // console.log(endHeight,layout,stepLayHight)\r\n      let Color_linear = d3.scaleLinear().domain([0, totalDur]).range([0, 1]);\r\n      let Compute_color = d3.interpolate(\"white\", curcolor);\r\n      let perDur = 0;\r\n      let curArcScale_linear = d3.scaleLinear([0, totalDur], [startAngle, endAngle]);\r\n      let curHeightScale_linear = d3.scaleLinear([0, Math.sqrt(totalDur)], [startHeight * 1.2, endHeight]);\r\n      for (let c in data['children']) {\r\n        _this.fatherMap[data['children'][c]['id']] = father;\r\n        if ((data['children'][c]['name'] != 'Test') || (data['children'][c]['layout'] != '0')) {\r\n          let curTotalDur = data['children'][c]['totalDuration'];\r\n          let endAnglet = curArcScale_linear(perDur + curTotalDur);\r\n          perDur += curTotalDur\r\n          var dataset = { startAngle: curStartR + 0.05, endAngle: endAnglet - 0.05 };\r\n          let h = ((curHeightScale_linear((Math.sqrt(curTotalDur)))))\r\n          var arcPath = d3.arc()\r\n            .innerRadius(startHeight + 20)\r\n            .outerRadius(h)\r\n          var pathArc = arcPath(dataset);\r\n          let color = \"\";\r\n          if (layout == -1) {\r\n            color = _this.rootColorMap[data['children'][c]['id']];//colorList[c];\r\n          }\r\n          else { color = Compute_color(Color_linear(curTotalDur)) }\r\n          _this.colorMap[data['children'][c]['id']] = color;\r\n          _this.drawArc(svg, x, y, pathArc, color, color, `curOverArc fa_${father} na_${data['children'][c]['id']}`, '0', 10);\r\n          _this.drawSunTree(svg, x, y, data['children'][c], layout + 1, curTotalDur, dataset.startAngle, dataset.endAngle, curHeightScale_linear(Math.sqrt(curTotalDur)), color, data['children'][c]['id']);\r\n\r\n          if ((parseInt(layout) < 1)) {\r\n            let name = data['children'][c]['name'];\r\n\r\n            let names = name.split(\" \")\r\n            let nameLen = names.length;\r\n            let anchor = \"end\"\r\n            let stepR = (endAnglet - curStartR) / (nameLen + 1);\r\n            let colorV = tools.getRgbValue(color)\r\n            let textColor = 'white';\r\n            let textStartR = curStartR;\r\n            let v = 0;\r\n            for (let i in colorV) {\r\n              v += parseInt(colorV[i]);\r\n            }\r\n            if (v > 620) {\r\n              textColor = 'grey';\r\n            }\r\n            if ((parseInt(layout) == -1) && ((endAnglet - curStartR) > (Math.PI / 5))) {\r\n              if ((endAnglet - curStartR) > (Math.PI / 4)) {\r\n                stepR = Math.PI / 20;\r\n                textStartR = (endAnglet + curStartR) / 2 - (nameLen) / 2 * stepR;\r\n              }\r\n              for (let n = 0; n < nameLen; n++) {\r\n                let nn = n;\r\n                let arcScale = d3.scaleLinear().domain([0, Math.PI * 2]).range([0, 360]);\r\n                if (arcScale(curStartR) > 180) {\r\n                  nn = nameLen - n - 1;\r\n                }\r\n                let midR = textStartR + stepR * (nn + 1);\r\n\r\n                let roat = arcScale(midR);\r\n                roat -= 90;\r\n                if (roat > 90) {\r\n                  roat += 180;\r\n                  anchor = \"start\"\r\n                }\r\n                // h = (h + startHeight) / 2 + 10;\r\n                let tx = x + h * Math.sin(midR);\r\n                let ty = y - h * Math.cos(midR);\r\n                _this.drawTxt(_this.textG, tx, ty, names[n], textColor, roat, anchor)\r\n\r\n              }\r\n            }\r\n\r\n            else if ((parseInt(layout) == 0) && ((endAnglet - curStartR) > (Math.PI / 15)) && (nameLen < 4) && (name.length < 10)) {\r\n              let steph = (h - startHeight - 20) / nameLen;\r\n              anchor = \"middle\"\r\n              for (let n = 0; n < nameLen; n++) {\r\n                let nn = n;\r\n                let arcScale = d3.scaleLinear().domain([0, Math.PI * 2]).range([0, 360]);\r\n                // if(arcScale(curStartR)>180){\r\n                //   nn = nameLen - n-1;\r\n                // }\r\n                let midR = (endAnglet + curStartR) / 2;\r\n\r\n                let roat = arcScale(midR);\r\n                // roat -= 90;\r\n                // if(roat>90){\r\n                //   roat+=180;\r\n                //   anchor = \"start\"\r\n                // }\r\n                h = h - 10 - 1 * n;//(h + startHeight) / 2 + 10;\r\n                let tx = x + h * Math.sin(midR);\r\n                let ty = y - h * Math.cos(midR);\r\n                _this.drawTxt(_this.textG, tx, ty, names[n], textColor, roat, anchor)\r\n\r\n              }\r\n            }\r\n            else if (parseInt(layout) == 1) {\r\n              let midR = (endAnglet + curStartR) / 2;\r\n\r\n              let arcScale = d3.scaleLinear().domain([0, Math.PI * 2]).range([0, 360]);\r\n              let roat = arcScale(midR)\r\n              if (layout == '-1') {\r\n                roat += 90;\r\n              }\r\n              h = (h + startHeight) / 2 + 10;\r\n              let tx = x + h * Math.sin(midR);\r\n              let ty = y - h * Math.cos(midR);\r\n              // if (layout != '-1') {\r\n              //   for(let w = 0;w<names.length;w++){\r\n              //     h-=(w+1)*1;\r\n              //     tx = x + h * Math.sin(midR);\r\n              //     ty = y - h * Math.cos(midR);\r\n              //     _this.drawTxt(_this.textG, tx,ty , names[w], textColor, roat,\"middle\")\r\n\r\n              //     }\r\n              // }\r\n              // else{\r\n              _this.drawTxt(_this.textG, tx, ty, data['children'][c]['name'], textColor, roat, \"middle\")\r\n              // }\r\n            }\r\n          }\r\n\r\n          curStartR = endAnglet;\r\n        }\r\n      }\r\n    },\r\n    drawRect(svg, x, y, w, h, rx, ry, fill, opacity, stroke) {\r\n      svg.append(\"rect\")\r\n        .attr(\"x\", x)\r\n        .attr(\"y\", y)\r\n        .attr(\"rx\", rx)\r\n        .attr(\"ry\", ry)\r\n        .attr(\"height\", h)\r\n        .attr(\"width\", w)\r\n        .attr(\"fill\", fill)\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"stroke\", stroke)\r\n        .attr(\"stroke-width\", \"1.5px\");\r\n    },\r\n    drawTxt(svg, tx, ty, txts, fill, roat, anchor, fontsize = 14) {\r\n      svg.append(\"text\")\r\n        .attr(\"y\", ty)\r\n        .attr(\"x\", tx)\r\n        .attr(\"fill\", fill)\r\n        .attr(\"font-size\", fontsize)\r\n        .text(txts)\r\n        .style(\"text-anchor\", anchor)//\"middle\")\r\n        .attr(\"transform\", `rotate(${roat} ${tx} ${ty})`);\r\n    },\r\n    drawArc(svg, x, y, arcPath, stroke, fill, className, stroke_dasharray = \"0\", width = 3) {\r\n      const _this = this;\r\n      svg.append(\"path\")\r\n        .attr(\"d\", arcPath)\r\n        .attr(\"class\", className)\r\n        .attr(\"transform\", \"translate(\" + x + \",\" + y + \")\")\r\n        .attr(\"stroke\", stroke)\r\n        .attr('stroke-width', width)\r\n        .attr(\"opacity\", 1)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n        .attr(\"fill\", fill)\r\n        .on(\"mousemove\", function (d) {\r\n          let transformd = d3.select(this).attr(\"transform\")\r\n          let id = d3.select(this).attr(\"class\").split(\" \")[d3.select(this).attr(\"class\").split(\" \").length - 1];\r\n          id = id.split(\"_\")[1]\r\n          let curEnt = _this.data.find(function (d) { return d['id'] == id })\r\n\r\n\r\n          d3.select(this)\r\n            .attr(\"transform\", function (d) {\r\n              return transformd.split(\" \")[0] + \" scale(1.04)\"\r\n            })\r\n          // var transform = d3.event;\r\n          var yPosition = d.clientY + 20;\r\n          var xPosition = d.clientX + 20;\r\n          var chartTooltip = d3\r\n            .select(\".chartTooltip\")\r\n            .style(\"left\", xPosition + \"px\")\r\n            .style(\"top\", yPosition + \"px\");\r\n          // 更新浮层内容\r\n          chartTooltip.select(\".name\").text(curEnt['name']);\r\n          // 移除浮层hidden样式，展示浮层\r\n          chartTooltip.classed(\"hidden\", false);\r\n          let textId = tools.deepClone(id);\r\n          if (_this.nameTextIds.indexOf(textId) == -1) {\r\n            while (textId != 'root') {\r\n              _this.nameTextIds.push(textId);\r\n              textId = _this.fatherMap[textId];\r\n            }\r\n          }\r\n        })\r\n        .on(\"mouseleave\", function (d) {\r\n          _this.nameTextIds = [];\r\n          let transformd = d3.select(this).attr(\"transform\")\r\n          d3.select(this)\r\n            .attr(\"transform\", function (d) {\r\n              return transformd.split(\" \")[0] + \" scale(1)\"\r\n            })\r\n          d3.select(\".chartTooltip\").classed(\"hidden\", true);\r\n        })\r\n    },\r\n  },\r\n  created() {\r\n\r\n\r\n\r\n    const _this = this;\r\n\r\n    this.$nextTick(() => {\r\n      _this.drawoverView();\r\n    });\r\n  },\r\n  mounted() {\r\n    const _this = this\r\n\r\n    this.$bus.$on('graphData', (val) => {\r\n      // console.log(val)\r\n      _this.data = val;\r\n    });\r\n    this.$bus.$on('overEntityId', (val) => {\r\n      _this.overEntityId = val;\r\n    });\r\n    this.$bus.$on('treeData', (val) => {\r\n      console.log(val)\r\n      _this.treeData = val[0];\r\n      _this.rootColorMap = val[1];\r\n      // _this.drawoverView();\r\n    });\r\n\r\n\r\n  },\r\n  // beforeDestroy() {\r\n  //   clearInterval(this.moveTimer);\r\n  // },\r\n} \r\n</script>\r\n\r\n<style>\r\n@import './index.css';\r\n</style>\r\n"],"sourceRoot":"src/components/OverviewPanel"}]}